<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>youthy的流水账</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://youthyblog.com/"/>
  <updated>2018-10-17T08:46:23.199Z</updated>
  <id>http://youthyblog.com/</id>
  
  <author>
    <name>Youthy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Regex 正则表达式</title>
    <link href="http://youthyblog.com/2016/05/06/Regex-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://youthyblog.com/2016/05/06/Regex-正则表达式/</id>
    <published>2016-05-06T07:56:24.000Z</published>
    <updated>2018-10-17T08:46:23.199Z</updated>
    
    <content type="html"><![CDATA[<ol><li>“regex” 精确的匹配 regex这个词</li><li>上面可能会把”regex2”这种词的前面也匹配到。此时需要”\bregex\b” </li></ol><a id="more"></a><blockquote><p>\b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p></blockquote><p><strong>erlang中需要用<code>\\</code> 代表 <code>\</code></strong></p><blockquote><p>The Erlang literal syntax for strings uses the “\” (backslash) character as an escape code. You need to escape backslashes in literal strings, both in your code and in the shell, with an additional backslash, i.e.: “\“.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">14&gt; re:run(&quot;hey hi hihi&quot;, &quot;hi&quot;, [global]).</span><br><span class="line">&#123;match,[[&#123;4,2&#125;],[&#123;7,2&#125;],[&#123;9,2&#125;]]&#125;</span><br><span class="line">15&gt; re:run(&quot;hey hi hihi&quot;, &quot;\\bhi\\b&quot;, [global]).</span><br><span class="line">&#123;match,[[&#123;4,2&#125;]]&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>.</code> 表示匹配出了换行的任意字符 <code>*</code> 表示任意数量。 表示<code>*</code>前面的字符可以重复任意个 比如”.<em>“, “h</em>“, “2*” 匹配任意字符，任意个h，任意个2</p></li><li><p><code>\d</code> 匹配数字。 <code>&quot;4\d\d\d\d\d\d\d&quot;</code> 匹配4开头的8位数字。也可以写成<code>&quot;4\d{7}&quot;</code>  “\d{7, 10}” 表示7到10个不等<br>\d在erlang中同样需要换成<code>\\d</code></p></li></ol><blockquote><p>.    匹配除换行符以外的任意字符<br>\w    匹配字母或数字或下划线或汉字<br>\s    匹配任意的空白符<br>\d    匹配数字<br>\b    匹配单词的开始或结束<br>^    匹配字符串的开始<br>$    匹配字符串的结束</p></blockquote><blockquote><p>表2.常用的限定符<br>代码/语法    说明</p><ul><li>重复零次或更多次</li></ul><ul><li>重复一次或更多次<br>?    重复零次或一次<br>{n}    重复n次<br>{n,}    重复n次或更多次<br>{n,m}    重复n到m次</li></ul></blockquote><ol start="5"><li>“[aeiou]” 规定一个字符集。 比如”[0-9]”就与”\d”一致。</li><li>分组 “(2[0-4]\d){2,3}” 括号扩起来的部分是一组。重复2,3次。</li><li><p>反义</p><blockquote><p>表3.常用的反义代码<br>代码/语法    说明<br>\W    匹配任意不是字母，数字，下划线，汉字的字符<br>\S    匹配任意不是空白符的字符<br>\D    匹配任意非数字的字符<br>\B    匹配不是单词开头或结束的位置<br>[^x]    匹配除了x以外的任意字符<br>[^aeiou]    匹配除了aeiou这几个字母以外的任意字符</p></blockquote></li><li><p>后向引用 可以给分组命名 通过”\1”或”\name”再次匹配这个分组</p><blockquote><p>表4.常用分组语法<br>分类    代码/语法    说明<br>捕获    (exp)    匹配exp,并捕获文本到自动命名的组里<br>(?<name>exp)    匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)<br>(?:exp)    匹配exp,不捕获匹配的文本，也不给此分组分配组号<br>零宽断言    (?=exp)    匹配exp前面的位置<br>(?&lt;=exp)    匹配exp后面的位置<br>(?!exp)    匹配后面跟的不是exp的位置<br>(?&lt;!exp)    匹配前面不是exp的位置<br>注释    (?#comment)    这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</name></p></blockquote></li><li><p>懒惰匹配<br>默认情况下 “h.<em>p” 匹配最长的开头为h尾部为p的中间为任意个字符的字符串 称贪婪匹配<br>“happy” =&gt; “happ”<br>如果使用”h.</em>?p” 将匹配得到的最短的字符串。称为懒惰匹配<br>“happy” =&gt; “hap”<br><code>?</code>可以放在任意限定符的后面比如</p><blockquote><p>表5.懒惰限定符<br>代码/语法    说明<br>*?    重复任意次，但尽可能少重复<br>+?    重复1次或更多次，但尽可能少重复<br>??    重复0次或1次，但尽可能少重复<br>{n,m}?    重复n到m次，但尽可能少重复<br>{n,}?    重复n次以上，但尽可能少重复</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;“regex” 精确的匹配 regex这个词&lt;/li&gt;
&lt;li&gt;上面可能会把”regex2”这种词的前面也匹配到。此时需要”\bregex\b” &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
      <category term="vim" scheme="http://youthyblog.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vimscript笔记</title>
    <link href="http://youthyblog.com/2016/05/06/vimscript%E7%AC%94%E8%AE%B0/"/>
    <id>http://youthyblog.com/2016/05/06/vimscript笔记/</id>
    <published>2016-05-06T07:33:21.000Z</published>
    <updated>2018-10-17T08:46:23.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Remeber <code>:help</code> always be with you  – albert einstein<br>记住<code>:help</code>　与你同在</p></blockquote><a id="more"></a><!-- toc --><h3 id="First-of-all"><a href="#First-of-all" class="headerlink" title="First of all"></a>First of all</h3><p>首先<code>:help echo/function/....</code>　help可以查看一个关键词的帮助.首先要习惯使用它</p><h3 id="echo-echom-打印信息帮助调试"><a href="#echo-echom-打印信息帮助调试" class="headerlink" title="echo echom  打印信息帮助调试"></a>echo echom  打印信息帮助调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:echo &quot;test&quot;</span><br><span class="line">:echo &quot;test2&quot;</span><br><span class="line">:messages</span><br></pre></td></tr></table></figure><p>test2在message中，而test不在。<br>echom 主要用来调试。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; 这是注释</span><br></pre></td></tr></table></figure><h3 id="布尔-选项"><a href="#布尔-选项" class="headerlink" title="(布尔)选项"></a>(布尔)选项</h3><p><code>:set</code> 用于设置内置的选项。有的是布尔选项，有的不是 see <code>:help set</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:set number</span><br><span class="line">:set nonumber</span><br><span class="line">:set number!</span><br><span class="line">:set number?</span><br><span class="line">:set number numberwidth=4</span><br><span class="line">:set omnifunc=XXX#complete</span><br></pre></td></tr></table></figure></p><p>number是一个布尔选项。任何布尔选项都可以通过<code>set</code> ,<code>set no(Bool)</code>, 设置开启关闭<code>set Bool!</code>切换开关状态.<br><code>set {Option}?</code> 用来查看当前值.<br>有些选项可以赋值.多选项用空格隔开一次赋值<br>number是用来显示行号的布尔值<br>omnifunc 是补全函数<br>在脚本中如果要引用某个选项使用<code>&amp;</code>, 比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if &amp;filetype == &quot;vim&quot;</span><br></pre></td></tr></table></figure></p><p>判断当前文件类型是否是vimscript</p><h3 id="map-映射-映射"><a href="#map-映射-映射" class="headerlink" title="map 映射!映射!"></a>map 映射!映射!</h3><p><code>:help map-commands</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:map - x  //  任何模式下将&apos;-&apos;映射为&apos;x&apos;</span><br><span class="line">:map &lt;space&gt; x</span><br><span class="line">:map &lt;c-d&gt; x</span><br><span class="line">:nmap - x</span><br><span class="line">:vmap - x</span><br><span class="line">:imap - x</span><br><span class="line">:noremap - x</span><br><span class="line">:noremap \ -</span><br></pre></td></tr></table></figure></p><p>map通用于所有模式下。nmap,vmap, imap分别映射在不同的模式下。<br>noremap不存在递归风险。任何时候都应该使用这种方式。<strong>对，任何时候</strong></p><h3 id="leader按键"><a href="#leader按键" class="headerlink" title="leader按键"></a>leader按键</h3><p><code>:help mapleader</code><br>很多插件中存在各种映射都用的<leader>这个按键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:let mapleader=&quot;-&quot;</span><br><span class="line">:nnoremap &lt;leader&gt;d dd</span><br><span class="line">let maplocalleader = &quot;\\&quot;</span><br><span class="line">:noremap &lt;buffer&gt; &lt;localleader&gt;d dd</span><br></pre></td></tr></table></figure></leader></p><p>leader 默认为<code>\</code>, 如果修改可以通过<code>echo mapleader</code>查看<br>localleader 只针对某个buffer</p><blockquote><p>除了map 还有各种其他地方指定<code>&lt;buffer&gt;</code>的设置。比如autocmd,加上buffer比较安全。</p></blockquote><p>同样有的选项也支持<code>:setlocal number</code></p><h3 id="iabbrev"><a href="#iabbrev" class="headerlink" title="iabbrev"></a>iabbrev</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:iabbrev waht what</span><br></pre></td></tr></table></figure><p>自动替换。　可以将ｗａｈｔ　替换为ｗｈａｔ<br>iabbrev是结束insert mode时发生的。 如果what前后有别的则不会发生替换.这点与<code>inoremap waht what</code>不同<br>同样可以接受<code>:iabbrev &lt;buffer&gt; XXXX</code>　只对当前buffer生效</p><h3 id="autocmd-自动命令"><a href="#autocmd-自动命令" class="headerlink" title="autocmd 自动命令"></a>autocmd 自动命令</h3><p><code>:help autocmd</code><br><code>:help Event</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:autocmd BufNewFild,BufRead *.html :normal gg=G</span><br><span class="line">         事件                模式   执行命令</span><br></pre></td></tr></table></figure></p><p><code>autocmd Event File Command</code>  对File文件接收到event事件后　触发command</p><p>Event后面的模式每个pattern不一样。<br>比如 <code>:autocmd FileType vim call SomeFun()</code><br><strong>这里有个危险的地方</strong><br>单纯的<code>autocmd</code> 并不会覆盖之前的命令。如果同一个<code>autocmd</code>加载多次他们会同时存在也就是可能对于同一个事件执行多次<code>SomeFun()</code>.<br>这里vim有一种自动命令组的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:augroup testgroup</span><br><span class="line">:    autocmd BufWrite * :echom &quot;Foo&quot;</span><br><span class="line">:    autocmd BufWrite * :echom &quot;Bar&quot;</span><br><span class="line">:augroup END</span><br></pre></td></tr></table></figure></p><p>上面将”Foo”, “Bar”两个事件归到testgroup组中。这时testgroup相当于一个<code>autocmd</code>　同样多次执行testgroup也会造成上面的情况。同样，如果之后在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:augroup testgroup</span><br><span class="line">:    autocmd BufWrite * :echom &quot;Baz&quot;</span><br><span class="line">:augroup END</span><br></pre></td></tr></table></figure></p><p>“Foo”, “Bar”并没有清除.而是将”Baz”合并到了testgroup中.这样没有解决多次读取事件造成重复调用的问题。<br>解决的办法是在组开始的地方调用 <code>autocmd!</code>来清除这个组的事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:augroup testgroup</span><br><span class="line">:    autocmd!</span><br><span class="line">:    autocmd BufWrite * :echom &quot;Cats&quot;</span><br><span class="line">:    autocmd XXXXX....</span><br><span class="line">:augroup END</span><br></pre></td></tr></table></figure></p><p>这样解决了多次重复调用的问题</p><h3 id="operator-pending"><a href="#operator-pending" class="headerlink" title="operator_pending"></a>operator_pending</h3><p><code>:onoremap p ic</code></p><p>w, p, t 各种定位词　ｏｎｏｒｅｍａｐ可以修改定位词映射</p><h3 id="normal"><a href="#normal" class="headerlink" title=":normal"></a>:normal</h3><p><code>:normal gg</code><br><code>:normal</code> 后面会跟一个字符串。相当于在ｎｏｒｍａｌ模式下按下这些按键</p><p>当然永远不要用normal 而是用<code>normal!</code> 后者无视映射。因为你永远不知道用户把按键映射成了什么</p><h3 id="execute"><a href="#execute" class="headerlink" title=":execute"></a>:execute</h3><p>`:execute “:normal!  gg”</p><p>execute 后面跟脚本。</p><p>为什么不直接用normal!,而是用execute呢<br>因为normal不能识别特殊字符。比如<cr>回车符等所以一般要包个execute命令。<br>比如<code>:normal! a\&lt;cr&gt;</code> 我们设想先按下a进入insert模式然后输出回车符换行.但是实际上这个命令进入插入模式后，直<br>接将<code>\&lt;cr&gt;</code>输入到了buffer中.我们可以用`execute “normal! a\<cr>“完成这个动作</cr></cr></p><h3 id="set-statusline"><a href="#set-statusline" class="headerlink" title="set statusline"></a>set statusline</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:set statusline=%f\ -\ %y</span><br><span class="line">:set statusline+=%=</span><br><span class="line">:set statusline+=%L</span><br></pre></td></tr></table></figure><p>修改状态条显示内容。类似printf %f 是文件名%y是文件类型 %=表示后面的右对齐%L显示总行数。</p><h3 id="let-变量"><a href="#let-变量" class="headerlink" title="let  变量"></a>let  变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:let foo=&quot;bar&quot;</span><br><span class="line">:echo foo  //显示ｂａｒ</span><br><span class="line">:set number</span><br><span class="line">:echo &amp;number //1</span><br><span class="line">:let number = 100</span><br><span class="line">:echo number //100</span><br><span class="line">:let &amp;number=&amp;number-1</span><br><span class="line">:echo &amp;number //0　number是是否显示行号的布尔值</span><br></pre></td></tr></table></figure><p>let 用来定义一个变量,这个变量可以与某个选项同名(set), 只不过选项的引用需要前面加<code>&amp;</code><br>set 只能给选项赋值常量值<br>而let 可以用变量给变量赋值,如上面的<code>&amp;number</code><br><code>:let &amp;l:number = 100</code>可以给本地变量赋值而不影响其他buffer</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><code>:register</code> 查看所有寄存器内容<br><code>&quot;ap</code> a是寄存器名字. 表示将a中的内容粘贴到此处<br><code>echo @a</code> 打印a中的内容<br><code>let @a=&quot;test&quot;</code> 修改a中内容<br><code>&quot;</code>寄存器是为指定寄存器所有为指定寄存器的复制操作,内容都会写入这里</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p><code>:echo &quot;haha&quot; | echo &quot;heihei</code></p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:if &quot;20haha&quot;</span><br><span class="line">:   echo &quot;true&quot;</span><br><span class="line">:endif</span><br><span class="line"></span><br><span class="line">:if &quot;haha20&quot;</span><br><span class="line">:   echo &quot;true&quot;</span><br><span class="line">:else</span><br><span class="line">:   echo &quot;false&quot;</span><br><span class="line">:endif</span><br></pre></td></tr></table></figure><p>第一个会显示ｔｒｕｅ　第二个是ｆａｌｓｅ　<br>因为字符串在强制转换时第一个是数字会转化为相应的数字。否则是０</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>不能完全信任<code>==</code><br>因为vim的大小写敏感时用户设置的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set ignorecase</span><br><span class="line">:if &quot;foo&quot; == &quot;FOO&quot;</span><br></pre></td></tr></table></figure></p><p>这个语句真假取决于ignorecase的设置。<br>替代品<br><code>==?</code> 大小写不敏感比较<br><code>==#</code> 大小写敏感比较</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:function Test()</span><br><span class="line">:   XXXXX</span><br><span class="line">:endfunction</span><br><span class="line">:function s:testb()</span><br><span class="line">:   echom &quot;script test&quot;</span><br><span class="line">:endfunction</span><br><span class="line">:call Test()</span><br></pre></td></tr></table></figure><p><strong>没有限制作用域的函数必须以大写字母开头</strong><br>脚本内的私有函数以<code>s:</code>开头<br>函数没有显示指定<code>return XX</code>则默认返回0</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:function EchoTest(name)</span><br><span class="line">:   echo a:name</span><br><span class="line">:endfunction</span><br></pre></td></tr></table></figure><p>函数的参数总要加a这个作用域否则会提示找不到</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:function Test(...)  // 假如 call Test(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">:   echo a:0         // 3 参数个数</span><br><span class="line">:   echo a:1         // &quot;a&quot;</span><br><span class="line">:   echo a:000       // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;] 000指参数列表.不能用echom输出只能用echo</span><br><span class="line">:endfunction</span><br></pre></td></tr></table></figure><p><code>:call Test(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code><br>a:0 指的是参数数量。 a:1 是 “a”.以此类推</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><blockquote><p>|buffer-variable|    b:      Local to the current buffer.<br>|window-variable|    w:      Local to the current window.<br>|tabpage-variable|   t:      Local to the current tab page.<br>|global-variable|    g:      Global.<br>|local-variable|     l:      Local to a function.<br>|script-variable|    s:      Local to a |:source|’ed Vim script.<br>|function-argument|  a:      Function argument (only inside a function).<br>|vim-variable|         v:      Global, predefined by Vim.</p></blockquote><p>命名空间可以当做dict使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for k in keys(b:)</span><br><span class="line">    unlet b:[k]</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></p><p>可以混合可变参数和固定参数<br><code>:function Test(a, ...)</code></p><p>不能对函数的参数改变赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:function Test(foo)</span><br><span class="line">:   let a:foo=&quot;change&quot; //这样做会报错</span><br><span class="line">:   let tmp=a:foo      // 这样才可以</span><br><span class="line">:   let tmp=&quot;change&quot;</span><br><span class="line">:endfunction</span><br></pre></td></tr></table></figure></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:echo &quot;haha&quot;.&quot;heihei&quot;</span><br></pre></td></tr></table></figure><p>上面输出”hahaheihei”</p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p><code>:help function-list</code> 查看所有函数分类列表</p><p><code>strlen(&quot;string&quot;)</code><br><code>len(&quot;string&quot;)</code><br><code>echo split(&quot;one two&quot;)</code><br><code>echo split(&quot;one,two&quot;,&quot;,&quot;)</code><br><code>echo join([&quot;one&quot;,&quot;two&quot;], &quot;,&quot;)</code><br><code>echo tolower(&quot;BIG&quot;)</code><br><code>echo toupper(&quot;low&quot;)</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li>有序，异质</li><li><p>索引从0开始 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:echo [1,2,3][0] // 1</span><br><span class="line">:echo [1,2,3][-1] //3</span><br><span class="line">:echo &quot;abc&quot;[1] // b</span><br><span class="line">:echo &quot;abc&quot;[-1] // 无效。</span><br></pre></td></tr></table></figure></li><li><p>切割</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:echo [1,2,3][:1] // [1,2]</span><br><span class="line">:echo [1,2,3][1:] // [2,3]</span><br><span class="line">:echo [1,2,3][:1000] // [1,2,3] 可以越界</span><br><span class="line">:echo [1,2,3,4][-2:-1] //[3,4]</span><br><span class="line">:echo [1,2,3,4][-2:1] // []</span><br><span class="line">:echo &quot;abc&quot;[-2:-1] // bc。上面的负数索引无效。切割却有效。。。</span><br></pre></td></tr></table></figure></li></ol><p>4.连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:echo [&apos;a&apos;,&apos;b&apos;] + [&apos;c&apos;] // [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">:echo [1,2] + [3]//[1,2,3]</span><br><span class="line">:echo [a,b] + [c] // 错误。</span><br><span class="line">:echo &quot;ab&quot;.&quot;c&quot; //&quot;abc&quot;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>列表函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:echo add([1,2],3) // [1,2,3]</span><br><span class="line">:echo get([1,2,3], 0, &apos;default&apos;) // 1</span><br><span class="line">:echo get([1,2,3], 4, &apos;default&apos;) // default</span><br><span class="line">:echo index([1,2,3], 1) // 0</span><br><span class="line">:echo index([1,2,3], 4) // -1 不存在返回-1</span><br><span class="line">:echo join([1,2], &quot;-&quot;) // 1-2</span><br><span class="line">:echo reverse([1,2]) //[2,1]</span><br></pre></td></tr></table></figure></li></ol><p>更多阅读<code>:help List</code> <code>:help functions</code></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:for i in [1,2,3,4]</span><br><span class="line">:   let c += i</span><br><span class="line">:endfor</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:let c=1</span><br><span class="line">:while c &lt; 3</span><br><span class="line">: let t += c</span><br><span class="line">: let c += 1</span><br><span class="line">:endwhile</span><br></pre></td></tr></table></figure><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p><code>{&#39;a&#39;:1, 2:&quot;two&quot;,}</code> 字典的key总是会自动转为字符串.  应该总是结尾留一个<code>,</code> (个人很讨厌这种语法)<br>索引可以用.来索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:echo &#123;&apos;a&apos;:1, 2:&quot;two&quot;,&#125;[&apos;a&apos;] // 1</span><br><span class="line">:echo &#123;&apos;a&apos;:1, 2:&quot;two&quot;,&#125;[2] // two</span><br><span class="line">:echo &#123;&apos;a&apos;:1, 2:&quot;two&quot;,&#125;.a // 1</span><br></pre></td></tr></table></figure></p><p>增加键值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:let dic=&#123;&apos;a&apos;:1,&#125;</span><br><span class="line">:let dic.b=2</span><br><span class="line">:echo dic // &#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:let tmp=remove(dic, &apos;a&apos;) //移除dic中a，但是把a的值赋值给tmp</span><br><span class="line">:unlet dic.b //移除b。但是不返回值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:echo has_key(&#123;&apos;a&apos;:1&#125;, &apos;a&apos;) // 1</span><br><span class="line">:echo has_key(&#123;&apos;a&apos;:1&#125;, &apos;b&apos;) //0</span><br><span class="line">:echo items(&#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;) // [[&apos;a&apos;,1],[&apos;b&apos;,2]] items返回是无序的。因为dict本身是无序的</span><br><span class="line">:echo keys(&#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;) // [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line">:echo values(&#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;) //[1,2]</span><br></pre></td></tr></table></figure><p>list中的get函数同样可以用于dict</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ol><li>在函数内部赋值传入的参数。已达到不影响外部变量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function! Reversed(l)</span><br><span class="line">    let new_list = deepcopy(a:l)</span><br><span class="line">    call reverse(new_list)</span><br><span class="line">    return new_list</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure></li></ol><h4 id="deepcopy-与copy"><a href="#deepcopy-与copy" class="headerlink" title="deepcopy 与copy"></a>deepcopy 与copy</h4><p> 区别如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let a=[1,2]</span><br><span class="line">let b=[a,3,4] // [[1,2],3,4]</span><br><span class="line">let c=copy(b) // [[1,2],3,4]</span><br><span class="line">let d=deepcopy(b) //[[1,2],3,4]</span><br><span class="line">let b[0][0]=5</span><br><span class="line">let b[1]=6</span><br><span class="line">echo a  //[5,2]</span><br><span class="line">echo b  //[[5,2],6,4]</span><br><span class="line">echo c  //[[5,2],3,4]</span><br><span class="line">echo d  //[[1,2],3,4]</span><br></pre></td></tr></table></figure></p><ol start="2"><li>将函数赋值给变量。变量名字首字母大写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:let Myfunc = function(&quot;add&quot;)</span><br><span class="line">:echo Myfunc([1,2],3) // [1,2,3]</span><br><span class="line">:let funclist=[function(&quot;add&quot;), function(&quot;reverse&quot;)]</span><br><span class="line">:echo funclist[0]([1,2],3) // [1,2,3]</span><br></pre></td></tr></table></figure></li></ol><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:echo expand(&apos;%&apos;) // filename  相对路径</span><br><span class="line">:echo expand(&apos;%:p&apos;) // /home/.../filename 绝对路径</span><br><span class="line">:echo fnamemodify(&apos;test.erl&apos;, &apos;:p&apos;) // /home/youthy/.../test.erl 无论文件test是否存在</span><br><span class="line">:echo globpath(&apos;.&apos;, &apos;*.erl&apos;) // 显示当前目录下所有erl文件的路径</span><br><span class="line">:echo split(globpath(&apos;.&apos;,&apos;*.erl&apos;), &apos;\n&apos;) //将上述结果分割成列表</span><br></pre></td></tr></table></figure><p><code>:set runtimepath=/XX/XXX</code> 修改运行时路径。</p><h3 id="Regex-正则表达式"><a href="#Regex-正则表达式" class="headerlink" title="Regex 正则表达式"></a>Regex 正则表达式</h3><p>for starters <code>:help user_27</code></p><p>所有的search 受大小写设置的影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:set ignorecase // 忽略</span><br><span class="line">:set noignorecase // 不忽略大小写</span><br><span class="line">:set ingorecase smartcase //智能模式。 小写时match所有。有一个大写字母时精确匹配。</span><br></pre></td></tr></table></figure></p><p><code>\c</code>, <code>\C</code> 无视ignorecase设置。用于自己某个特殊的匹配。前者 表示ignorecase 后者是noignorecase</p><blockquote><p>   pattern            matches    ~<br>    \Cword            word<br>    \CWord            Word<br>    \cword            word, Word, WORD, WoRd, etc.<br>    \cWord            word, Word, WORD, WoRd, etc.</p></blockquote><p><code>*</code> 0至多个<br><code>\+</code> 1至多个<br><code>\=</code> 0至1个<br><code>&#39;\{n, m}&#39;</code> 重复n至m次<br><code>&#39;\\|&#39;</code> 或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;ab*&apos;   // a, ab, abb, abbb...</span><br><span class="line">&apos;c\(ab\)*&apos; // c, cab, cabab, cababab...  需用括号括起，但是需要转义</span><br><span class="line">&apos;c\(ab\)\&#123;2, 3&#125;&apos; // cabab, cababab</span><br><span class="line">&apos;ab\+&apos; // ab, abb, abbb...</span><br><span class="line">&apos;ab\=&apos; // a, ab</span><br></pre></td></tr></table></figure></p><blockquote><p>   item    matches            equivalent ~<br>    \d    digit            [0-9]<br>    \D    non-digit        [^0-9]<br>    \x    hex digit        [0-9a-fA-F]<br>    \X    non-hex digit        [^0-9a-fA-F]<br>    \s    white space        [     ]     (<tab> and <space>)<br>    \S    non-white characters    [^     ]     (not <tab> and <space>)<br>    \l    lowercase alpha        [a-z]<br>    \L    non-lowercase alpha    [^a-z]<br>    \u    uppercase alpha        [A-Z]<br>    \U    non-uppercase alpha    [^A-Z]<br>    \h [A-Za-z_]<br>    \w [A-Za-z0-9_]</space></tab></space></tab></p></blockquote><p>以上不能用于<code>[]</code>里面</p><p>注意　<code>&#39;</code>, <code>&quot;</code>的影响。<code>&quot;</code>会转义<code>\</code>, 导致<code>&#39;\w\+&#39;</code>这种变成<code>&quot;\\w\\+&quot;</code></p><p><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="noopener">笨方法学vimscript</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Remeber &lt;code&gt;:help&lt;/code&gt; always be with you  – albert einstein&lt;br&gt;记住&lt;code&gt;:help&lt;/code&gt;　与你同在&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://youthyblog.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ssh登陆远程主机</title>
    <link href="http://youthyblog.com/2015/11/04/ssh%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/"/>
    <id>http://youthyblog.com/2015/11/04/ssh登陆远程主机/</id>
    <published>2015-11-04T03:36:41.000Z</published>
    <updated>2018-10-17T08:46:23.202Z</updated>
    
    <content type="html"><![CDATA[<p>###方法一：<br>将.ssh/id_rsa.pub内容加入到远程主机<strong>.ssh/authorized_keys</strong>下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ scp .ssh/id_rsa.pub user@remote_host:~</span><br><span class="line">输入密码</span><br><span class="line">ssh user@remote_host</span><br><span class="line">输入密码</span><br><span class="line">[root@li1166-59 ~] cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>注意文件是<strong>authorized_keys</strong> 不是authorize_keys</p><p>###方法二:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_rsa.pub user@remote_host</span><br></pre></td></tr></table></figure></p><p>将id_rsa.pub自动添加到authorized_keys尾部.</p><p><strong>文件名必须是id_rsa.pub</strong></p><p>###attention<br>.ssh文件夹权限必须是700</p><p>.ssh/authorized_keys必须是600</p><p>无效时清理下主机.ssh/known_hosts　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###方法一：&lt;br&gt;将.ssh/id_rsa.pub内容加入到远程主机&lt;strong&gt;.ssh/authorized_keys&lt;/strong&gt;下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="linux" scheme="http://youthyblog.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://youthyblog.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>makefile笔记</title>
    <link href="http://youthyblog.com/2015/09/29/makefile%E7%AC%94%E8%AE%B0/"/>
    <id>http://youthyblog.com/2015/09/29/makefile笔记/</id>
    <published>2015-09-29T11:33:58.000Z</published>
    <updated>2018-10-17T08:46:23.201Z</updated>
    
    <content type="html"><![CDATA[<p>Makefile<br><!-- toc --></p><a id="more"></a><h2 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h2><blockquote><p>target (目标) : prerequisites (依赖文件)<br>     command (命令,生成规则）</p></blockquote><p>依赖比目标新，command执行</p><h2 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>变量声明<br>Name = sth<br>类似宏，$(Name)等同于等号右边的</li><li><code>#</code>为注释，\可以转义</li><li>命令需要<strong>Tab</strong>键开始</li><li>文件名一般为makefile，Makefile。也可通过<code>make -f/--file FileName</code> 指定</li><li>include <filename> 用filename替换当前内容<ul><li>include不能已Tab开始。</li><li>没指定路径<ul><li>从当前目录</li><li><code>make -I/--include-dir</code>指定的路径</li><li>/usr/local/bin, /usr/include</li><li>-include 加上<code>-</code>可以让其忽略错误</li></ul></li></ul></filename></li><li>变量声明通配符不起作用。<br>object = <em>.erl 指的就是”</em>.erl”, 可以使用<code>$(wildcard *.erl)</code>, 匹配所有erl文件.</li><li>搜寻路径<ul><li>VPATH = DIR1:DIR2… (VPATH = /usr/lib:…)</li><li>vpath FileName DIR1:DIR2 (vpath %.erl ../src:../deps)</li></ul></li><li>伪目标 .PHONY:target 伪目标是标签。它并不生成。</li><li>静态规则： target：目标匹配：依赖匹配 . 通过匹配筛选出target中满足 目标匹配的，然后再进行依赖匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objects=$(wildcard *.o)</span><br><span class="line">all: $(objects)</span><br><span class="line">$(objects):h?.o : h?.c</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>@command 不会输出命令内容 ex:<code>@echo haha</code></li><li><code>make -n/--just-print</code> 只显示，不执行</li><li><code>make -s/--silent</code> 全部禁止显示 </li><li>当命令依赖前一条命令时应该用分号隔开。 <code>cd test;pwd</code> ,如果写到两行里会不起作用</li><li>同指定路径，<code>-</code>可以让命令忽略错误，而不至于因为一个命令的错误而终止。</li><li>变量导出 export value1 =(:=) value2. MAKEFLAGS是make的参数与SHELL默认传递。</li><li>定义命令包: <code>define Name function() endef</code></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>字符，数字，下划线。可以数字开头，大小写敏感</li><li><code>A = $(B), B = somevalue</code> 变量定义可以用到后面定义的变量。</li><li>使用<code>:=</code>时，不可以使用后面的变量</li><li><code>A？= B</code> 用于当A前面没有定义时赋予它B，否则什么都不做。</li><li>替换： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo = a.erl b.erl c.erl </span><br><span class="line">beam = $(foo:.erl=.beam) </span><br><span class="line">beam2 = $(foo:%.erl=%.beam)</span><br></pre></td></tr></table></figure></li></ul><p>两种方式都将erl替换成beam</p><ul><li><code>+=</code> 追加变量</li><li><p>目标变量：target: 变量声明  将变量的赋值作用在某一规则里<br>ex:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all: DIR=./src</span><br><span class="line">all: a.erl</span><br><span class="line">   erl -pa $(DIR)</span><br></pre></td></tr></table></figure></li><li><p>模式变量 设置所有匹配的目标的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%.beam: DIR=./src</span><br></pre></td></tr></table></figure></li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li><code>ifeq (A, B) ... else ... endif</code></li><li><code>ifneq (A, B) ... else ... endif</code></li><li><code>ifdef A ... else ... endif</code></li><li><code>ifndef A ... else .... endif</code></li><li>不要把自动化变量<code>$@</code>等放入判断。因为判断实在加载Makefile时就计算出来的。运行时变量不能放入</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><ul><li><code>$(function, arguments),</code> 或者用<code>{</code>扩起来</li><li><code>$(subst, &lt;from&gt;, &lt;to&gt;, &lt;text&gt;)</code>  把text中的from替换成to</li><li><code>$(patsubst, &lt;pattern&gt;, &lt;replacement&gt;, &lt;text&gt;)</code></li><li><code>$(strip, &lt;string&gt;)</code> 去掉开头和结尾的空格</li><li><code>$(findstring, &lt;find&gt;, &lt;text&gt;)</code> 查找text中的find</li><li><code>$(filter, &lt;pattern&gt; ,&lt;text&gt;)</code> 过滤，取出符合pattern的</li><li><code>$(filter-out, &lt;pattern&gt; ,&lt;text&gt;)</code> 与上面相反</li><li><code>$(sort, &lt;list&gt;)</code> 排序并取出重复的词 </li><li><code>$(word, &lt;n&gt;, &lt;text&gt;)</code> 取出text第n个词</li><li><code>$(wordlist, &lt;begin&gt;, &lt;end&gt;, &lt;text&gt;)</code> 取出text中begin到end之间的单词</li><li><code>$(words, &lt;text&gt;)</code> 统计单词个数</li><li><code>$(firstword, &lt;text&gt;)</code>  取出第一个</li><li><code>$(lastword, &lt;text&gt;)</code></li></ul><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><ul><li><code>$(dir &lt;names&gt;)</code> 返回name所在目录</li><li><code>$(notdir &lt;names&gt;)</code> 返回非目录部分</li><li><code>$(suffix &lt;names&gt;) 后缀函数</code> <code>a.erl b.erl -&gt; &quot;.erl .erl&quot;</code></li><li><code>$(basename &lt;names&gt;)</code> 前缀函数 <code>a.cpp -&gt; a</code></li><li><code>$(addsuffix &lt;suffix&gt;, &lt;names&gt;)</code>  给name添加后缀  <code>addsuffix .erl, hello -&gt; hello.erl</code></li><li><code>$(addprefix &lt;prefix&gt;, &lt;names&gt;)</code><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4></li><li><code>$(join &lt;list1&gt;, &lt;list2&gt;)</code> 连接list1和list2中的单词`join aaa bbb, 11 22 33 -&gt; “aaa11, bbb33, 33”</li><li><code>$(foreach &lt;var&gt;, &lt;list&gt;, &lt;text&gt;)</code> 类似于lists:foreach(fun(H) -&gt; ….end, List), text就是fun, var是H,list是List</li><li><p><code>$(if &lt;condition&gt;, &lt;then&gt;, &lt;else&gt;)</code> else可省略</p></li><li><p><code>$(call &lt;expression&gt;, &lt;param1&gt;,&lt;param2&gt;...)</code><br>param1和param2就是$(1),$(2).expression是对这些变量的操作表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverse = $(2) $(1)</span><br><span class="line">$(call reverse, a,b) -&gt; &quot;b a&quot;</span><br></pre></td></tr></table></figure></li></ul><p>call的变量数量不限。</p><ul><li><code>$(origin &lt;variable&gt;)</code> </li><li><p><code>$(shell cmd)</code>   例如 <code>Files = $(shell ls)</code></p></li><li><p><code>$(error msg)</code> <code>$(warning msg)</code>  error会终止， warn不会 </p></li></ul><h3 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h3><p><a href="http://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:%E9%9A%90%E5%90%AB%E8%A7%84%E5%88%99" target="_blank" rel="noopener">ubuntu社区</a><br><a href="https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules" target="_blank" rel="noopener">GUN make</a></p><h2 id="SomeMore"><a href="#SomeMore" class="headerlink" title="SomeMore"></a>SomeMore</h2><ul><li>递归调用make的时候一般使用的是<code>$(MAKE)</code>代替make。它的的展开其实就是调用make的路径，比如<code>/usr/bin/make</code><br>它有个特点就是不会传递<code>-t -q -n</code>参数。详见<br><a href="http://www.gnu.org/software/make/manual/html_node/MAKE-Variable.html#MAKE-Variable" target="_blank" rel="noopener">GUN MAKE variable</a></li><li><a href="http://www.gnu.org/software/make/manual/html_node/Options-Summary.html#Options-Summary" target="_blank" rel="noopener">make options summary</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Makefile&lt;br&gt;&lt;!-- toc --&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://youthyblog.com/categories/linux/"/>
    
    
      <category term="makefile" scheme="http://youthyblog.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>ranch笔记</title>
    <link href="http://youthyblog.com/2015/09/28/ranch%E7%AC%94%E8%AE%B0/"/>
    <id>http://youthyblog.com/2015/09/28/ranch笔记/</id>
    <published>2015-09-28T03:58:51.000Z</published>
    <updated>2018-10-17T08:46:23.202Z</updated>
    
    <content type="html"><![CDATA[<p>任何使用ranch的程序第一步需要启动ranch_app</p><h2 id="start-ranch-application"><a href="#start-ranch-application" class="headerlink" title="start ranch application"></a>start ranch application</h2><p>入口<br><code>ranch_app:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start(_, _) -&gt;</span><br><span class="line">_ = consider_profiling(), %% 是否启动eprof</span><br><span class="line">ranch_sup:start_link().</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>ranch_sup:</code><br>整个应用的最顶级sup， 它建立ranch_server ets,并启动ranch_server这个gen_server,将ranch_server这个ets归属于ranch_sup提高容错.防止数据丢失。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start_link() -&gt;</span><br><span class="line">supervisor:start_link(&#123;local, ?MODULE&#125;, ?MODULE, []).</span><br><span class="line"></span><br><span class="line">init([]) -&gt;</span><br><span class="line">ranch_server = ets:new(ranch_server, [</span><br><span class="line">ordered_set, public, named_table]),</span><br><span class="line">Procs = [</span><br><span class="line">&#123;ranch_server, &#123;ranch_server, start_link, []&#125;,</span><br><span class="line">permanent, 5000, worker, [ranch_server]&#125;</span><br><span class="line">],</span><br><span class="line">&#123;ok, &#123;&#123;one_for_one, 10, 10&#125;, Procs&#125;&#125;.</span><br></pre></td></tr></table></figure></p><p><code>ranch_server:</code><br>是一个gen_server,init中从ranch_server ets中恢复数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init([]) -&gt;</span><br><span class="line">Monitors = [&#123;&#123;erlang:monitor(process, Pid), Pid&#125;, Ref&#125; ||</span><br><span class="line">[Ref, Pid] &lt;- ets:match(?TAB, &#123;&#123;conns_sup, &apos;$1&apos;&#125;, &apos;$2&apos;&#125;)],</span><br><span class="line">&#123;ok, #state&#123;monitors=Monitors&#125;&#125;.</span><br></pre></td></tr></table></figure></p><p><strong>ranch初始化完成</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/ranch_1.png" alt=""></h2><p>至此ranch实际上没有做任何事情，它并没有监听任何端口，需要使用者在自己的app中显示的调用ranch:start_listener来启动acceptor_pool.</p><p>在作者的demo中是这样：</p><h3 id="tcp-echo-app"><a href="#tcp-echo-app" class="headerlink" title="tcp_echo_app:"></a>tcp_echo_app:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start(_Type, _Args) -&gt;</span><br><span class="line">&#123;ok, _&#125; = ranch:start_listener(tcp_echo, 1,</span><br><span class="line">ranch_tcp, [&#123;port, 5555&#125;], echo_protocol, []),</span><br><span class="line">tcp_echo_sup:start_link().</span><br></pre></td></tr></table></figure><p><code>ranch:start_listner</code>接受6个参数 </p><ol><li>名字: tcp_echo,</li><li>acceptor数量: 1<br><strong>此处不是connection的数量!! wiki说:</strong><blockquote><p>First of all, it should not be confused with the maximum number of connections. Acceptor processes are only used for accepting and have nothing else in common with connection processes. Therefore there is nothing to be gained from setting this number too high, in fact it can slow everything else down.</p></blockquote></li></ol><blockquote><p>Second, this number should be high enough to allow Ranch to accept connections concurrently. But the number of cores available doesn’t seem to be the only factor for choosing this number, as we can observe faster accepts if we have more acceptors than cores. It might be entirely dependent on the protocol, however.</p></blockquote><p>总之就是太少太多都不好，他们的观测得到100较为合适</p><ol start="3"><li>transport的方式: ranch_tcp</li><li>transport options: [{port, 5555}],<br><code>ranch_tcp:</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">listen(Opts) -&gt;</span><br><span class="line">Opts2 = ranch:set_option_default(Opts, backlog, 1024),</span><br><span class="line">Opts3 = ranch:set_option_default(Opts2, nodelay, true),</span><br><span class="line">Opts4 = ranch:set_option_default(Opts3, send_timeout, 30000),</span><br><span class="line">Opts5 = ranch:set_option_default(Opts4, send_timeout_close, true),</span><br><span class="line">gen_tcp:listen(0, ranch:filter_options(Opts5, listen_options(),</span><br><span class="line">[binary, &#123;active, false&#125;, &#123;packet, raw&#125;, &#123;reuseaddr, true&#125;])).</span><br></pre></td></tr></table></figure></li></ol><p>可以看出ranch_tcp代码中默认使用binary, {active,false}, 等设置，所以无法通过options更改。可以在start_listener之后的通过Transport:setopts/2更改.<br>但是backlog, nodelay等可以通过Opts在start的时候就设置好.<br><strong>port</strong>:未指定的话，则会随意一个端口.还有，不要设置1024以上的。原因如下</p><blockquote><p>Some systems limit access to ports below 1024 for security reasons.The methods for listening on privileged ports vary between systems, please refer to your system’s documentation for more information.</p></blockquote><p><strong>max_connections</strong>: {max_connections, Number|infinity}Number默认是1024.尽量不要infinity。<br>还可以通过<code>ranch:set_max_connections</code>设置.有时有个别进程是长链接，不希望它计入connections的计数。可以通过<code>ranch:remove_conections/1</code>移除1.</p><ol start="5"><li>protocol_handler mod: echo_protocol</li><li>protocol options: []</li></ol><h3 id="ranch"><a href="#ranch" class="headerlink" title="ranch:"></a>ranch:</h3><p>listener的实现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">start_listener(tcp_echo, 1, ranch_tcp, [&#123;port, 5555&#125;], echo_protocol, []) -&gt;</span><br><span class="line">    ...</span><br><span class="line">ChildSpec = &#123;&#123;ranch_listener_sup, tcp_echo&#125;, &#123;ranch_listener_sup, start_link, [</span><br><span class="line">tcp_echo, 1, ranch_tcp, [&#123;port, 5555&#125;], echo_protocol, [] </span><br><span class="line">]&#125;, permanent, infinity, supervisor, [ranch_listener_sup]&#125;.</span><br><span class="line">Res = supervisor:start_child(ranch_sup, ChildSpec),</span><br><span class="line">Socket = proplists:get_value(socket, [&#123;port, 5555&#125;]),</span><br><span class="line">case Res of</span><br><span class="line">&#123;ok, Pid&#125; when Socket =/= undefined -&gt;</span><br><span class="line">    %% 此处更改socket的拥有者,暂不管</span><br><span class="line">  Children = supervisor:which_children(Pid),</span><br><span class="line">  &#123;_, AcceptorsSup, _, _&#125;</span><br><span class="line">  = lists:keyfind(ranch_acceptors_sup, 1, Children),</span><br><span class="line">   catch Transport:controlling_process(Socket, AcceptorsSup);</span><br><span class="line">_ -&gt;</span><br><span class="line">ok</span><br><span class="line">end,</span><br><span class="line">Res</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>在未指定socket的情况，start_listener通过<code>supervisor:start_child/2</code>启动了<code>ranch_listener_sup</code></p><h3 id="ranch-listener-sup"><a href="#ranch-listener-sup" class="headerlink" title="ranch_listener_sup:"></a>ranch_listener_sup:</h3><p>listener_sup 仍然是个supervisor，它得到一个max_connections(默认1024）, 通知ranch_server储存max_connection,和Opts。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start_link(Ref, NbAcceptors, Transport, TransOpts, Protocol, ProtoOpts) -&gt;</span><br><span class="line">MaxConns = proplists:get_value(max_connections, TransOpts, 1024),</span><br><span class="line">ranch_server:set_new_listener_opts(Ref, MaxConns, ProtoOpts),</span><br><span class="line">%% 注意此处没有注册名字</span><br><span class="line">supervisor:start_link(?MODULE, &#123;</span><br><span class="line">Ref, NbAcceptors, Transport, TransOpts, Protocol</span><br><span class="line">&#125;).</span><br></pre></td></tr></table></figure></p><p><code>ranch_server:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handle_call(&#123;set_new_listener_opts, Ref, MaxConns, Opts&#125;, _, State) -&gt;</span><br><span class="line">    %% 将数据存入rank_server ets.</span><br><span class="line">ets:insert(rank_server, &#123;&#123;max_conns, Ref&#125;, MaxConns&#125;),</span><br><span class="line">ets:insert(rank_server, &#123;&#123;opts, Ref&#125;, Opts&#125;),</span><br><span class="line">&#123;reply, ok, State&#125;;</span><br></pre></td></tr></table></figure></p><p><code>ranch_listener_sup:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">init(&#123;tcp_echo, 1, ranch_tcp, [&#123;port, 5555&#125;], echo_protocol&#125;) -&gt;</span><br><span class="line">AckTimeout = proplists:get_value(ack_timeout, TransOpts, 5000),</span><br><span class="line">ConnType = proplists:get_value(connection_type, TransOpts, worker),</span><br><span class="line">Shutdown = proplists:get_value(shutdown, TransOpts, 5000),</span><br><span class="line">ChildSpecs = [</span><br><span class="line">&#123;ranch_conns_sup, &#123;ranch_conns_sup, start_link,</span><br><span class="line">[Ref, ConnType, Shutdown, Transport, AckTimeout, Protocol]&#125;,</span><br><span class="line">permanent, infinity, supervisor, [ranch_conns_sup]&#125;,</span><br><span class="line">&#123;ranch_acceptors_sup, &#123;ranch_acceptors_sup, start_link,</span><br><span class="line">[Ref, NbAcceptors, Transport, TransOpts]&#125;,</span><br><span class="line">permanent, infinity, supervisor, [ranch_acceptors_sup]&#125;</span><br><span class="line">],</span><br><span class="line">&#123;ok, &#123;&#123;rest_for_one, 10, 10&#125;, ChildSpecs&#125;&#125;.</span><br></pre></td></tr></table></figure></p><p>listener_sup 启动 conns_sup和acceptors_sup,这两个都是supervisor 所以shutdown都设置成infinity<br>但是其中conns_sup是个自定义的supervisor，作者解释是为了优化create和accept connection。</p><blockquote><p>Ranch uses a custom supervisor for managing connections. This supervisor keeps track of the number of connections and handles connection limits directly. While it is heavily optimized to perform the task of creating connection processes for accepted connections, it is still following the OTP principles and the usual sys and supervisor calls will work on it as expected.</p></blockquote><h3 id="Ranch-conns-sup"><a href="#Ranch-conns-sup" class="headerlink" title="Ranch_conns_sup:"></a>Ranch_conns_sup:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">start_link(Ref, ConnType, Shutdown, Transport, AckTimeout, Protocol) -&gt;</span><br><span class="line">proc_lib:start_link(?MODULE, init,</span><br><span class="line">[self(), Ref, ConnType, Shutdown, Transport, AckTimeout, Protocol]).</span><br><span class="line"></span><br><span class="line">init(Parent, Ref, ConnType, Shutdown, Transport, AckTimeout, Protocol) -&gt;</span><br><span class="line">process_flag(trap_exit, true),</span><br><span class="line">ok = ranch_server:set_connections_sup(Ref, self()),</span><br><span class="line">MaxConns = ranch_server:get_max_connections(Ref),</span><br><span class="line">Opts = ranch_server:get_protocol_options(Ref),</span><br><span class="line">ok = proc_lib:init_ack(Parent, &#123;ok, self()&#125;),</span><br><span class="line">loop(#state&#123;parent=Parent, ref=Ref, conn_type=ConnType,</span><br><span class="line">shutdown=Shutdown, transport=Transport, protocol=Protocol,</span><br><span class="line">opts=Opts, ack_timeout=AckTimeout, max_conns=MaxConns&#125;, 0, 0, []).</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">14&gt; rp(sys:get_status(ConnsSup)).</span><br><span class="line">&#123;status,&lt;0.43.0&gt;,</span><br><span class="line">        &#123;module,ranch_conns_sup&#125;,</span><br><span class="line">        [[&#123;&apos;$ancestors&apos;,[&lt;0.42.0&gt;,ranch_sup,&lt;0.34.0&gt;]&#125;,</span><br><span class="line">          &#123;&apos;$initial_call&apos;,&#123;ranch_conns_sup,init,7&#125;&#125;],</span><br><span class="line">         running,&lt;0.42.0&gt;,[],</span><br><span class="line">         &#123;&#123;state,&lt;0.42.0&gt;,tcp_echo,worker,5000,ranch_tcp,</span><br><span class="line">                 echo_protocol,[],5000,1024&#125;,</span><br><span class="line">          0,0,[]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>上面使用<code>sys:get_status(Name|Pid)</code>得到ranch_conns_sup的#state{}。</p><h3 id="Ranch-acceptor-sup"><a href="#Ranch-acceptor-sup" class="headerlink" title="Ranch_acceptor_sup:"></a>Ranch_acceptor_sup:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">start_link(Ref, NbAcceptors, Transport, TransOpts) -&gt;</span><br><span class="line">supervisor:start_link(?MODULE, [Ref, NbAcceptors, Transport, TransOpts]).</span><br><span class="line"></span><br><span class="line">init([Ref, NbAcceptors, Transport, TransOpts]) -&gt;</span><br><span class="line">ConnsSup = ranch_server:get_connections_sup(Ref),</span><br><span class="line">LSocket = case proplists:get_value(socket, TransOpts) of</span><br><span class="line">undefined -&gt;</span><br><span class="line">TransOpts2 = proplists:delete(ack_timeout,</span><br><span class="line">proplists:delete(connection_type,</span><br><span class="line">proplists:delete(max_connections,</span><br><span class="line">proplists:delete(shutdown,</span><br><span class="line">proplists:delete(socket, TransOpts))))),</span><br><span class="line">case Transport:listen(TransOpts2) of</span><br><span class="line">&#123;ok, Socket&#125; -&gt; Socket;</span><br><span class="line">&#123;error, Reason&#125; -&gt; listen_error(Ref, Transport, TransOpts2, Reason)</span><br><span class="line">end;</span><br><span class="line">Socket -&gt;</span><br><span class="line">Socket</span><br><span class="line">end,</span><br><span class="line">&#123;ok, Addr&#125; = Transport:sockname(LSocket),</span><br><span class="line">ranch_server:set_addr(Ref, Addr),</span><br><span class="line">Procs = [</span><br><span class="line">&#123;&#123;acceptor, self(), N&#125;, &#123;ranch_acceptor, start_link, [</span><br><span class="line">LSocket, Transport, ConnsSup</span><br><span class="line">]&#125;, permanent, brutal_kill, worker, []&#125;</span><br><span class="line">|| N &lt;- lists:seq(1, NbAcceptors)],</span><br><span class="line">&#123;ok, &#123;&#123;one_for_one, 10, 10&#125;, Procs&#125;&#125;.</span><br></pre></td></tr></table></figure><p>acceptor_sup完成了得到一个ListenSocket, 然后启动N个acceptor进程，这些acceptor的loop等待<code>gen_tcp:accept</code> | <code>ssl:transport_accept</code><br><code>Transport:listen</code>的本质就是<code>gen_tcp:listen</code>或者<code>ssl:listen</code> 它返回一个ListenSocket<br><code>Transport:sockname</code> :: <code>inet:sockname</code> | <code>ssl:sockname</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">13&gt; sys:get_status(AccepterSup).</span><br><span class="line">&#123;status,&lt;0.44.0&gt;,</span><br><span class="line">        &#123;module,gen_server&#125;,</span><br><span class="line">        [[&#123;&apos;$ancestors&apos;,[&lt;0.42.0&gt;,ranch_sup,&lt;0.34.0&gt;]&#125;,</span><br><span class="line">          &#123;&apos;$initial_call&apos;,&#123;supervisor,ranch_acceptors_sup,1&#125;&#125;],</span><br><span class="line">         running,&lt;0.42.0&gt;,[],</span><br><span class="line">         [&#123;header,&quot;Status for generic server &lt;0.44.0&gt;&quot;&#125;,</span><br><span class="line">          &#123;data,[&#123;&quot;Status&quot;,running&#125;,</span><br><span class="line">                 &#123;&quot;Parent&quot;,&lt;0.42.0&gt;&#125;,</span><br><span class="line">                 &#123;&quot;Logged events&quot;,[]&#125;]&#125;,</span><br><span class="line">          &#123;data,[&#123;&quot;State&quot;,</span><br><span class="line">                  &#123;state,&#123;&lt;0.44.0&gt;,ranch_acceptors_sup&#125;,</span><br><span class="line">                         one_for_one,</span><br><span class="line">                         [&#123;child,&lt;0.45.0&gt;,</span><br><span class="line">                                 &#123;acceptor,&lt;0.44.0&gt;,1&#125;,</span><br><span class="line">                                 &#123;ranch_acceptor,start_link,</span><br><span class="line">                                                 [#Port&lt;0.917&gt;,ranch_tcp,&lt;0.43.0&gt;]&#125;,</span><br><span class="line">                                 permanent,brutal_kill,worker,[]&#125;],</span><br><span class="line">                         undefined,10,10,[],ranch_acceptors_sup,</span><br><span class="line">                         [tcp_echo,1,ranch_tcp,[&#123;port,5555&#125;]]&#125;&#125;]&#125;]]&#125;</span><br></pre></td></tr></table></figure></p><p>demo中只启动了一个acceptor<br>至此完了了所有进程的启动。等待connection进来。<br><img src="/img/ranch_2.png" alt=""></p><h3 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor:"></a>Acceptor:</h3><p>acceptor的作用是<code>accept(ListenSocket) -&gt; Socket.</code> 通过<code>Transport:controlling_process</code>,将端口控制交给<code>conns_sup</code>, 然后向conns_sup发送<code>{ranch_conns_sup, start_protocol, AcceptorPid, Socket}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start_link(LSocket, Transport, ConnsSup) -&gt;</span><br><span class="line">Pid = spawn_link(?MODULE, loop, [LSocket, Transport, ConnsSup]),</span><br><span class="line">&#123;ok, Pid&#125;.</span><br><span class="line"></span><br><span class="line">-spec loop(inet:socket(), module(), pid()) -&gt; no_return().</span><br><span class="line">loop(LSocket, Transport, ConnsSup) -&gt;</span><br><span class="line">_ = case Transport:accept(LSocket, infinity) of</span><br><span class="line">&#123;ok, CSocket&#125; -&gt;</span><br><span class="line">case Transport:controlling_process(CSocket, ConnsSup) of</span><br><span class="line">ok -&gt;</span><br><span class="line">ranch_conns_sup:start_protocol(ConnsSup, CSocket);</span><br><span class="line">&#123;error, _&#125; -&gt;</span><br><span class="line">Transport:close(CSocket)</span><br><span class="line">end;</span><br><span class="line">&#123;error, emfile&#125; -&gt;</span><br><span class="line">receive after 100 -&gt; ok end;</span><br><span class="line">&#123;error, Reason&#125; when Reason =/= closed -&gt;</span><br><span class="line">ok</span><br><span class="line">end,</span><br><span class="line">flush(),</span><br><span class="line">?MODULE:loop(LSocket, Transport, ConnsSup).</span><br></pre></td></tr></table></figure><p><code>ranch_conns_sup</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start_protocol(SupPid, Socket) -&gt;</span><br><span class="line">SupPid ! &#123;?MODULE, start_protocol, self(), Socket&#125;,</span><br><span class="line">receive SupPid -&gt; ok end.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;?MODULE, start_protocol, To, Socket&#125; -&gt;</span><br><span class="line">try Protocol:start_link(Ref, Socket, Transport, Opts) of</span><br><span class="line">&#123;ok, Pid&#125; -&gt;</span><br><span class="line">shoot(State, CurConns, NbChildren, Sleepers, To, Socket, Pid, Pid);</span><br><span class="line">&#123;ok, SupPid, ProtocolPid&#125; when ConnType =:= supervisor -&gt;</span><br><span class="line">shoot(State, CurConns, NbChildren, Sleepers, To, Socket, SupPid, ProtocolPid);</span><br><span class="line">Ret -&gt;</span><br><span class="line">To ! self(),</span><br><span class="line">error_logger:error_msg(</span><br><span class="line">&quot;Ranch listener ~p connection process start failure; &quot;</span><br><span class="line">&quot;~p:start_link/4 returned: ~999999p~n&quot;,</span><br><span class="line">[Ref, Protocol, Ret]),</span><br><span class="line">Transport:close(Socket),</span><br><span class="line">loop(State, CurConns, NbChildren, Sleepers)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">shoot(State=#state&#123;ref=Ref, transport=Transport, ack_timeout=AckTimeout, max_conns=MaxConns&#125;,</span><br><span class="line">CurConns, NbChildren, Sleepers, To, Socket, SupPid, ProtocolPid) -&gt;</span><br><span class="line">case Transport:controlling_process(Socket, ProtocolPid) of</span><br><span class="line">ok -&gt;</span><br><span class="line">    %% 通知echo_protocol进程控制权已转移。</span><br><span class="line">ProtocolPid ! &#123;shoot, Ref, Transport, Socket, AckTimeout&#125;,</span><br><span class="line">put(SupPid, true),</span><br><span class="line">CurConns2 = CurConns + 1,</span><br><span class="line">if CurConns2 &lt; MaxConns -&gt;</span><br><span class="line">To ! self(),</span><br><span class="line">loop(State, CurConns2, NbChildren + 1, Sleepers);</span><br><span class="line">true -&gt;</span><br><span class="line">loop(State, CurConns2, NbChildren + 1, [To|Sleepers])</span><br><span class="line">end;</span><br><span class="line">&#123;error, _&#125; -&gt;</span><br><span class="line">Transport:close(Socket),</span><br><span class="line">%% Only kill the supervised pid, because the connection&apos;s pid,</span><br><span class="line">%% when different, is supposed to be sitting under it and linked.</span><br><span class="line">exit(SupPid, kill),</span><br><span class="line">loop(State, CurConns, NbChildren, Sleepers)</span><br><span class="line">end.</span><br></pre></td></tr></table></figure><h3 id="ranch-protocol"><a href="#ranch-protocol" class="headerlink" title="ranch_protocol:"></a>ranch_protocol:</h3><p>conns_sup在完成<code>controlling_process</code>后要通知protocol进程完成了转移。因为此时protocol的init还没有执行结束，一直在等着控制权转移。因为控制权没转移是不能进入loop的.spawn_link及时将自己的pid告诉了conns_sup.如果是gen_server等需要init结束才返回的进程需要特殊处理, 在下面分析.同时完成转移后conns_sup还给acceptor发送一条自己的pid，告诉acceptor转移完成。因为这之前acceptor一直处在receive状态，等待conns_sup完成工作。不完成他不会再次参与accept操作.<br><code>echo_protocol:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start_link(Ref, Socket, Transport, Opts) -&gt;</span><br><span class="line">Pid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),</span><br><span class="line">&#123;ok, Pid&#125;.</span><br><span class="line"></span><br><span class="line">init(Ref, Socket, Transport, _Opts = []) -&gt;</span><br><span class="line">  %% 必须调用 accept_ack，确保socket控制权</span><br><span class="line">ok = ranch:accept_ack(Ref),</span><br><span class="line">loop(Socket, Transport).</span><br></pre></td></tr></table></figure></p><p><code>ranch:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accept_ack(Ref) -&gt;</span><br><span class="line">receive &#123;shoot, Ref, Transport, Socket, AckTimeout&#125; -&gt;</span><br><span class="line">Transport:accept_ack(Socket, AckTimeout)</span><br><span class="line">end.</span><br></pre></td></tr></table></figure></p><p>链接套接字的逻辑进程都要有</p><ol><li>-behavior(ranch_protocol). 定义了一个start_link/4 callback而已。</li><li>在任何对端口的操作之前一定要确保执行过ranch:accept_ack(Ref)(确保端口控制权交给自己).在此之后可以运行ranch_tcp|ranch_ssl:setopts(Opt)完成自定义对端口的设置<br>如果同时他是个gen_server,gen_fsm等有自己的start_link, 会产生一个问题，因为init中放入ranch:accept_ack/1会形成死锁。(见上面，即<code>conns_sup</code> 在等待<code>ranch_protocol</code>进程的pid返回。而<code>ranch_protocol</code>在等待<code>conns_sup</code>将端口控制交给自己)见问题说明<br><a href="https://github.com/ninenines/ranch/blob/master/doc/src/guide/protocols.asciidoc" target="_blank" rel="noopener">ranch_protocol_doc</a>.<br>作者再上面给出了两种解决办法:</li><li>在start_link 中用proc_lib:start_link代替gen_server:start_link,然后在init中主动调用proc_lib：init_ack通知父进程初始化完毕，然后调用ranch:accept_ack，再之后手动用gen_server:enter_loop进入循环。在之前这里分析过gen_server的初始化过程。<br><a href="/2015/07/31/erlang-question-gen-server-and-init/">gen_server和init</a></li><li>作者在init中返回timeout为0，然后通过handle_info(timeout…)调用ranch:accept_ack。实际上最好不要这么用，原因还是见上面的文章。具体剖析过为什么不能这么用。还是用 self()!timeout替代这种方法吧。<br><img src="/img/ranch_3.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何使用ranch的程序第一步需要启动ranch_app&lt;/p&gt;
&lt;h2 id=&quot;start-ranch-application&quot;&gt;&lt;a href=&quot;#start-ranch-application&quot; class=&quot;headerlink&quot; title=&quot;start ranch application&quot;&gt;&lt;/a&gt;start ranch application&lt;/h2&gt;&lt;p&gt;入口&lt;br&gt;&lt;code&gt;ranch_app:&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start(_, _) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_ = consider_profiling(), %% 是否启动eprof&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ranch_sup:start_link().&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>gitnote</title>
    <link href="http://youthyblog.com/2015/09/19/gitnote/"/>
    <id>http://youthyblog.com/2015/09/19/gitnote/</id>
    <published>2015-09-19T04:22:10.000Z</published>
    <updated>2018-10-17T08:46:23.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>##startup</p><p>配置文件  </p><ol><li>/etc/.gitconfig 最顶级</li><li>/home/$USERNAME/.gitconfig 用户设定</li><li>project/.gitconfig 当前项目<br>下面会把上面的设定覆盖.</li></ol><p><code>git config --global user.name &quot;XXX&quot;</code><br>修改/home/username config<br><code>git config (--local) user.name &quot;YY&quot;</code><br>修改当前项目下的gitconfig<br><code>git config --system user.name &quot;ZZZ&quot;</code><br>系统通用配置文件</p><p><code>git config --global|system|local --get user.name  -&gt; XXX</code><br><code>git config user.name</code> 简写</p><a id="more"></a><p>##2nd<br><code>git init</code> -&gt; generate .git file<br><code>git add</code> -&gt; 可以跟踪新文件，也可以将修改文件放入暂存区</p><p>gitignore遵循glob匹配</p><ol><li><code>#</code>之后是注释</li><li>名字后面是/表示目录</li><li>!表示取反</li><li>*匹配一个或多个字符</li><li>[abc]匹配ａｂｃ中任意一个字符</li><li>？表示任意一个字符</li><li>[0-9], [a-z] 两个字符之间</li></ol><p><code>git diff</code> 比较暂存和未暂存的区别<br><code>git diff --cached</code>　比较暂存和上次提交的区别</p><p><code>git commit</code> 提交暂存区<br><code>git commit -a</code> 跳过git add 步骤，跳过暂存区, 直接提交<br><code>git rm</code> 删除跟踪的某个文件,如果文件已在暂存区需要<code>-f</code>,该命令同时删除文件<br><code>git rm --cached</code> 不删除文件,只删除暂存去或者跟踪<br><code>git mv</code> 重命名</p><p><code>git log</code>: <code>-p</code> 显示差异 <code>-2</code> 最近两次log <code>--name-status</code> 显示文件状态 <code>--relative-data</code>显示诸如几周前这种相对时间 <code>--pretty=oneline|short|full|fuller|format</code>定制显示格式<br><code>git log --since=2.weeks</code> 两周以内 <code>--since=&quot;2015-08-01&quot;</code> 指定日期之后 <code>--until=&quot;2015-08-01&quot;</code> 指定日期之前<br><code>git log　--author=XXX --grep= sometest --all-match(与关系)</code></p><p>###gitk　<br>git log 图形化界面</p><p><code>git --amend</code> 修改上一次提交,如果上一次commit落下了一些文件没有提交可以在commit之后 git add等操作之后amend，之产生一次提交</p><p><code>git reset HEAD &lt;filename&gt;</code> 移除暂存区<br><code>git checkout --&lt;filename&gt;</code> 撤销为加入暂存区的文件的修改</p><p><code>git remote -v</code> 显示远程仓库<br><code>git tag (-l &quot;0.4.*|[0-9]&quot;)</code> 显示特定标签 glob匹配</p><p>分支的原理<br><a href="http://git.oschina.net/progit/3-Git-%E5%88%86%E6%94%AF.html#3.1-%E4%BD%95%E8%B0%93%E5%88%86%E6%94%AF" target="_blank" rel="noopener">pro git</a><br>建立分支步骤：<br><code>git branch (-v)</code> 列出所有分支<br><code>git branch branchname</code> (建立） -&gt; <code>git checkout branchname</code> (跳到对应branch).<br>以上等同于<br><code>git checkout -b branchname</code><br><code>git branch -d branchname</code> 删除分支<br><code>git branch --merged(--no-merged)</code></p><p>##搭建git服务器<br>以下例子是在我自己的linode的vps上搭的步骤<br>由于买的vps自带ssh-server. 不需要安装ssh-server<br>如果是自己的需要执行(ubuntu下)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo /etc/init.d/ssh start(sshd start)</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>centos用yum安装<br>安装ssh_server. 客户端默认安装了ssh_client.<br>安装完成后可以通过shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip</span><br></pre></td></tr></table></figure></p><p>的方式登陆远程服务器<br>如果提示connect to host xxx.xxx.xxx.xxxport 22: Connection refused<br>说明openssh_server没安装成功或者没有start</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ ssh  root@XXX.XXX.XXX.XXX</span><br><span class="line">root@xxx.xxx.xxx.xxx&apos;s password: </span><br><span class="line">Last login: Sat Sep 19 07:09:43 2015 from xxx.xxx.xxx.xxx</span><br><span class="line">[root@li1166-59 ~]# adduser test</span><br><span class="line">[root@li1166-59 ~]# passwd test</span><br><span class="line">更改用户 test 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd： 所有的身份验证令牌已经成功更新。</span><br><span class="line">[root@li1166-59 ~]# su test</span><br><span class="line">[test@li1166-59 root]$</span><br></pre></td></tr></table></figure><p>输入exit退出ssh<br>接下来创建需要传到服务器上的文件(例子用是博客的源文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare https://github.com/youthy/youthy.github.io test.git</span><br><span class="line">youthy@youthy:~$ ls test.git/</span><br><span class="line">branches  config  description  HEAD  hooks  info  objects  packed-refs  refs</span><br></pre></td></tr></table></figure></p><p>–bare 用来创建裸版本库。<code>git clone --bare REPOS NAME.git</code> REPOS 可以为本地文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ scp -r test.git test@xxx.xxx.xxx.xxx:/home/test</span><br><span class="line">test@xxx.xxx.xxx.xxx&apos;s password: </span><br><span class="line">HEAD                                                                                                                                                                       100%   23     0.0KB/s   00:00    </span><br><span class="line">packed-refs                                                                                                                                                                100%   98     0.1KB/s   00:00    </span><br><span class="line">prepare-commit-msg.sample                                                                                                                                                  100% 1239     1.2KB/s   00:00    </span><br><span class="line">pre-rebase.sample                                                                                                                                                          100% 4898     4.8KB/s   00:00    </span><br><span class="line">commit-msg.sample                                                                                                                                                          100%  896     0.9KB/s   00:00    </span><br><span class="line">post-update.sample                                                                                                                                                         100%  189     0.2KB/s   00:00    </span><br><span class="line">pre-applypatch.sample                                                                                                                                                      100%  398     0.4KB/s   00:00    </span><br><span class="line">pre-push.sample                                                                                                                                                            100% 1352     1.3KB/s   00:00    </span><br><span class="line">applypatch-msg.sample                                                                                                                                                      100%  452     0.4KB/s   00:00    </span><br><span class="line">pre-commit.sample                                                                                                                                                          100% 1642     1.6KB/s   00:00    </span><br><span class="line">update.sample                                                                                                                                                              100% 3611     3.5KB/s   00:00    </span><br><span class="line">exclude                                                                                                                                                                    100%  240     0.2KB/s   00:00    </span><br><span class="line">description                                                                                                                                                                100%   73     0.1KB/s   00:00    </span><br><span class="line">pack-b7cb7743297b04547b0401b940914333ed2d513b.pack                                                                                                                         100% 3025KB 504.2KB/s   00:06</span><br></pre></td></tr></table></figure></p><p>此时所有安装git的用户可以通过输入密码的方式<code>git clone test@XXX.XXX.XXX.XXX:/home/test/test.git</code><br>克隆这个库和修改这个库，</p><p>####免密码<br>为了在不用每次提交都输入密码<br>需要将自己的.ssh/id_rsa.pub 公钥加入到test/.ssh/authorize_keys 中，如果没有需要自己建立。没有公钥的话，用<br><code>ssh-kegen (-t rsa|dsa)</code> 生成(默认时dsa加密方式)<br>但是需要注意以下两点<br><strong><em>authorize_keys</em></strong>需要权限是600 <code>chmod 600 test/.ssh/authorized_keys</code><br><strong><em>将自己的私钥</em></strong>加入到ssh_agent中：在客户端执行<code>ssh-add   ~/.ssh/id_rsa</code><br>否则会出现<code>Agent admitted failure to sign using the key.</code> 无法免密码登陆</p><p><strong>有时候github上面自己的项目虽然加入了公钥，但是每次push仍需要密码</strong><br>那是因为这个项目clone时用的时https方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~/hexoblog$ git remote -v</span><br><span class="line">originhttps://github.com/youthy/blogfiles.git (fetch)</span><br><span class="line">originhttps://github.com/youthy/blogfiles.git (push)</span><br></pre></td></tr></table></figure></p><p>通过<code>git remote rm origin</code>的方式删掉在添加ssh方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~/hexoblog$ git remote add origin git@github.com:youthy/blogfiles.git</span><br><span class="line">youthy@youthy:~/hexoblog$ git remote -v</span><br><span class="line">origingit@github.com:youthy/blogfiles.git (fetch)</span><br><span class="line">origingit@github.com:youthy/blogfiles.git (push)</span><br></pre></td></tr></table></figure></p><p>####安全措施：<br>以上完成之后参与者都可以通过<code>ssh test@XXX.XXX.XXX.XXX</code>登陆我的vps，可以通过以下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@li1166-59 ~]# which git-shell</span><br><span class="line">/usr/bin/git-shell</span><br><span class="line">[root@li1166-59 ~]# vim /etc/passwd</span><br></pre></td></tr></table></figure><p>passwd文件内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">NTP:X:38:38::/ETC/NTP:/SBIN/NOLOGIN</span><br><span class="line">test:x:500:500::/home/git:/bin/bash</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>将 test用户的bin/bash改为git-shell或者去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test:x:500:500::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p><p>这样就无法通过test登陆服务器<br>更多参考<br><a href="http://git.oschina.net/progit/4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git.html#" target="_blank" rel="noopener">pro git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h1&gt;&lt;p&gt;##startup&lt;/p&gt;
&lt;p&gt;配置文件  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/etc/.gitconfig 最顶级&lt;/li&gt;
&lt;li&gt;/home/$USERNAME/.gitconfig 用户设定&lt;/li&gt;
&lt;li&gt;project/.gitconfig 当前项目&lt;br&gt;下面会把上面的设定覆盖.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name &amp;quot;XXX&amp;quot;&lt;/code&gt;&lt;br&gt;修改/home/username config&lt;br&gt;&lt;code&gt;git config (--local) user.name &amp;quot;YY&amp;quot;&lt;/code&gt;&lt;br&gt;修改当前项目下的gitconfig&lt;br&gt;&lt;code&gt;git config --system user.name &amp;quot;ZZZ&amp;quot;&lt;/code&gt;&lt;br&gt;系统通用配置文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global|system|local --get user.name  -&amp;gt; XXX&lt;/code&gt;&lt;br&gt;&lt;code&gt;git config user.name&lt;/code&gt; 简写&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://youthyblog.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>github屏蔽百度爬虫的解决办法</title>
    <link href="http://youthyblog.com/2015/08/04/github%E5%B1%8F%E8%94%BD%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://youthyblog.com/2015/08/04/github屏蔽百度爬虫的解决办法/</id>
    <published>2015-08-04T06:57:55.000Z</published>
    <updated>2018-10-17T08:46:23.201Z</updated>
    
    <content type="html"><![CDATA[<p>google上可以搜到github博客的内容，但是百度是搜不到的。用百度的站长工具抓取也总是抓取失败。是因为github把百度爬虫给屏蔽了，而且将会长期下去。导致百度是无法收录自己的网站。<br><a id="more"></a><br><a href="http://www.zhihu.com/question/30898326" target="_blank" rel="noopener">如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题–知乎</a><br>google下github + 百度爬虫也有很多文章。<br>有几种方案 </p><ul><li>通过CDN加速，弊端是由于缓存的关系，会导致经常出现404的错误</li><li>用gitcafe镜像</li><li>用vps，让百度从自己的vps爬虫。</li></ul><p>虽然自己有vps，但是其实目前对我来说操作起来最简单的还是用gitcafe做镜像。我只需要修改下hexo的config文件添加一个deploy的对象就可以将博客部署到gitcafe和github两个地方，然后在dnspod上添加一条域名解析就可以了。</p><h2 id="创建gitcafe账号并建立一个repo，名字要和用户名一致"><a href="#创建gitcafe账号并建立一个repo，名字要和用户名一致" class="headerlink" title="创建gitcafe账号并建立一个repo，名字要和用户名一致"></a>创建gitcafe账号并建立一个repo，名字要和用户名一致</h2><p><img src="/img/gitcafe1.png" alt=""></p><p>默认分支这时候如果没有先不用管。等到之后在hexo的_config里面直接加就好了，之后再回来修改它为gitcafe-pages</p><p><img src="/img/gitcafe2.png" alt=""></p><p>在ssh公钥管理里面添加和github一样的内容就好了，我的在~/.ssh/rsa_pub文件里。<br>然后在<br><img src="/img/gitcafe3.png" alt=""><br>在hexo的_config.yml里面加入gitcafe的地址。并改成如上形式。之后hexo d就可以部署到github和gitcafe上了。</p><h2 id="到dnspod修改域名解析。"><a href="#到dnspod修改域名解析。" class="headerlink" title="到dnspod修改域名解析。"></a>到dnspod修改域名解析。</h2><p><img src="/img/gitcafe4.png" alt=""></p><p>在dnspod里面让百度走gitcafe，其他人还是走github。 也可以在细化让国内也走gitcafe，国外走github。</p><p>之后用百度站长工具看到百度可以成功抓取了<br><img src="/img/gitcafe5.png" alt=""></p><p>（无论在github还是gitcafe移动UA都是可以成功抓取的）。</p><h2 id="关于404-not-found"><a href="#关于404-not-found" class="headerlink" title="关于404 not found"></a>关于404 not found</h2><p>要确保</p><ul><li>gitcafe的项目名一定要和用户名一致，并且branch是gitcafe-pages，且为默认branch</li><li>如果绑定了域名，一定要在设置里加入域名，比如我的<br><img src="/img/gitcafe6.png" alt=""></li></ul><p>以上任意一项不足都可能导致404 not found。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;google上可以搜到github博客的内容，但是百度是搜不到的。用百度的站长工具抓取也总是抓取失败。是因为github把百度爬虫给屏蔽了，而且将会长期下去。导致百度是无法收录自己的网站。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://youthyblog.com/tags/hexo/"/>
    
      <category term="github" scheme="http://youthyblog.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[erlang_question]gen_server and init</title>
    <link href="http://youthyblog.com/2015/07/31/erlang-question-gen-server-and-init/"/>
    <id>http://youthyblog.com/2015/07/31/erlang-question-gen-server-and-init/</id>
    <published>2015-07-31T08:11:50.000Z</published>
    <updated>2018-10-17T08:46:23.199Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧?"></a>小技巧?</h2><p>这两天复习了一下<a href="http://zh.scribd.com/doc/87376094/Erlang-and-OTP-in-Action#scribd" target="_blank" rel="noopener">Erlang and OTP in action</a><br>其中讲到gen_server的时候，作者用了个小技巧。如下。<br><img src="http://storage4.static.itmages.com/i/15/0731/h_1438311976_3257184_46c6e8b7c0.png" alt=""></p><p><img src="http://storage1.static.itmages.com/i/15/0731/h_1438312022_8979746_d612eb6d7f.png" alt=""></p><p><img src="http://storage4.static.itmages.com/i/15/0731/h_1438311785_2601988_b290e0c784.png" alt=""></p><blockquote><p>第三章图片的引用里handle_call应该是handle_info,此处有错误</p></blockquote><p>作者的意思时如果在init的返回中设置了timeout参数为0，会在init结束后会立即向自己发送一个timeout参数。并且由handle_info(timeout…)处理。意思是可以让一些耗时高的初始化操作在handle_info(timeout。。）里面处理，而让init尽快返回。<br><strong>本以为是个不错的小技巧，结果却有些隐患</strong></p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>这两天的mailist正好有人遇到了这个问题。<br><a href="http://erlang.org/pipermail/erlang-questions/2015-July/085314.html" target="_blank" rel="noopener">[erlang_question]gen_server and init</a><br>问题如下：</p><blockquote><p><strong><em>Matthew Evans</em></strong>:<br>Hi,<br>We have used this pattern in gen_servers for a long time now:<br>init(_) -&gt;   %% Some stuff   {ok, #state{}, 0}.<br>%%%%%%<br>handle_info(timeout, State) -&gt;    %% Init stuff    {noreply,State}<br>Basically the idea is to prevent init from blocking and to have init/1 return with a timeout of 0 causing an immediate timeout message to be invoked in the handle_info.<br>Here’s what’s odd. Sometimes this timeout does not fire. It doesn’t appear that any message is getting sent, but I would imagine that since it’s a registered gen_server there is no way that can happen.<br>Does anyone have any ideas?<br>We are running vsn 17.1, and ntp is enabled on the host (Linux).<br>Thanks                           </p></blockquote><p>提问者与作者的思路一样，想要在timeout里面做些初始化操作。然而却没想到timeout并没有触发。<br>以下摘取一些回答。</p><h2 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h2><h3 id="Sergej-Jurecko"><a href="#Sergej-Jurecko" class="headerlink" title="Sergej Jurečko:"></a><strong><em>Sergej Jurečko</em></strong>:</h3><blockquote><p>If something is in the message queue before init is done executing, that timeout will never get called. Timeout means execute only if nothing else happens during. You should be using self() ! timeout<br>如果在init没有完成之前消息队列里面存在消息，timeout将永远不会调用。应该使用self()!timeout这种方式</p></blockquote><h3 id="Loic-Hoguin-cowboy-作者）"><a href="#Loic-Hoguin-cowboy-作者）" class="headerlink" title="Loïc Hoguin(cowboy 作者）"></a><strong><em>Loïc Hoguin</em></strong>(cowboy 作者）</h3><blockquote><p>This and sending yourself a message is a bad idea. It will usually work,<br>until it doesn’t, and you will have a very hard time figuring out why.<br>Instead, start the process using proc_lib:spawn_link or<br>proc_lib:start_link (depending on whether it needs to be synchronous or<br>not), then perform your initialization (calling proc_lib:init_ack where<br>appropriate), and finally calling gen_server:enter_loop.<br>What this gives you is pretty much the ability to customize the<br>initialization of your gen_server process.<br>This is the correct way to do it. Your solution can fail if you receive<br>a message. Sending yourself a message is subject to race conditions<br>where you receive a message before you could init.<br>大体意思说这个方式是bad idea。应该使用proc_lib:spawn_link, proc_lib:start_link, proc_lib:init_ack, gen_server:enter_loop等。</p></blockquote><h3 id="Max-Lapshin"><a href="#Max-Lapshin" class="headerlink" title="Max Lapshin"></a><strong><em>Max Lapshin</em></strong></h3><blockquote><p>Loic is right, but you should understand that you can receive message<br>before your  “self() ! init” message only if you explicitly tell your pid<br>someone in init()  because before the end of init your pid is unknown to<br>others.<br>Loic是对的～但是你应该明白除非你在init的过程中将自己的pid告诉其他进程才会在init返回之前接到消息，因为init没有完成之前，pid对其他是未知的。</p></blockquote><h3 id="Loic-Hoguin"><a href="#Loic-Hoguin" class="headerlink" title="Loïc Hoguin"></a><strong><em>Loïc Hoguin</em></strong></h3><blockquote><p>(Had problems pasting so hope it’s all OK!)</p></blockquote><blockquote><p>I’m not sure what you wrote there but I can give you two scenarios where<br>it can fail off the top of my head. The first is very unlikely and can<br>only fail if you use the 0 timeout, while the second is actually much<br>easier to observe and can fail with both methods:</p></blockquote><blockquote><p>P1 calls start_link<br>P2 init (returns 0 timeout)<br>P2 yields before calling receive<br>P1 returns from start_link and sends P2 a message<br>P2 receives message</p></blockquote><blockquote><p>And:</p></blockquote><blockquote><p>P1 calls start_link<br>P2 in init subscribes to some kind of pubsub PS<br>PS sends P2 message(s)<br>P2 returns from init and receive those messages</p></blockquote><blockquote><p>I’m not sure why your tool doesn’t catch the first case, Concuerror<br><em>definitely does</em>, and without needing to write all this weird code too. :-)</p></blockquote><blockquote><p>Here is the module:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-module(z).</span><br><span class="line">-behaviour(gen_server).</span><br><span class="line"></span><br><span class="line">-export([start_link/0]).</span><br><span class="line"></span><br><span class="line">%% Operational API</span><br><span class="line">-export([read/0]).</span><br><span class="line"></span><br><span class="line">%% gen_server API</span><br><span class="line">-export([</span><br><span class="line">          init/1,</span><br><span class="line">          handle_cast/2,</span><br><span class="line">          handle_call/3,</span><br><span class="line">          terminate/2,</span><br><span class="line">          code_change/3,</span><br><span class="line">          handle_info/2,</span><br><span class="line"> test/0</span><br><span class="line">]).</span><br><span class="line"></span><br><span class="line">test() -&gt;</span><br><span class="line">start_link(),</span><br><span class="line">ready = read(),</span><br><span class="line">stop().</span><br><span class="line"></span><br><span class="line">%% API</span><br><span class="line">start_link() -&gt;</span><br><span class="line">     gen_server:start(&#123;local, ?MODULE&#125;, ?MODULE, [], []).</span><br><span class="line"></span><br><span class="line">read() -&gt;</span><br><span class="line">     gen_server:call(?MODULE, read).</span><br><span class="line"></span><br><span class="line">stop() -&gt;</span><br><span class="line">gen_server:call(?MODULE, stop).</span><br><span class="line"></span><br><span class="line">%% Callbacks</span><br><span class="line">init([]) -&gt;</span><br><span class="line">     &#123;ok, initializing, 0&#125;.</span><br><span class="line"></span><br><span class="line">handle_call(read, _From, State) -&gt;</span><br><span class="line">     &#123;reply, State, State&#125;;</span><br><span class="line">handle_call(stop, _, State) -&gt;</span><br><span class="line">&#123;stop, normal, ok, stop&#125;.</span><br><span class="line"></span><br><span class="line">handle_cast(_M, State) -&gt;</span><br><span class="line">     &#123;noreply, State&#125;.</span><br><span class="line"></span><br><span class="line">handle_info(timeout, _State) -&gt;</span><br><span class="line">     &#123;noreply, ready&#125;.</span><br><span class="line"></span><br><span class="line">terminate(_How, _State) -&gt;</span><br><span class="line">     ok.</span><br><span class="line"></span><br><span class="line">code_change(_OldVsn, State, _Extra) -&gt;</span><br><span class="line">     &#123;ok, State&#125;.</span><br></pre></td></tr></table></figure></p></blockquote><p>（注：handle_call(stop, _, State)的State应该是_State, 否则编译不过).</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Loic给出了一个module，用concuerror进行了测试，这个模块的init中指定timeout为0，然后handle_info(timeout。。。）并没有触发。<br>concuerror是一个用来测试erlang中一些看起来没有问题的程序，但是在并行情况下可能发生的问题的工具。<br>参考<br><a href="http://concuerror.com/" target="_blank" rel="noopener">官网</a><br><a href="http://concuerror.com/tutorials/poolboy-example/" target="_blank" rel="noopener">concuerror tutorial</a><br><a href="https://github.com/parapluu/Concuerror" target="_blank" rel="noopener">github</a><br>以下是我运行的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~/code/Concuerror$ ./concuerror -f &quot;../etest/z.erl&quot; -m z -t test --after_timeout 1000 </span><br><span class="line">concuerror: WARNING: file ../etest/z.erl shadows the default ./z.beam</span><br><span class="line">Concuerror started at 31 Jul 2015 07:21:55</span><br><span class="line">Writing results in concuerror_report.txt</span><br><span class="line"></span><br><span class="line">Info: Instrumented z</span><br><span class="line">Info: Instrumented io_lib</span><br><span class="line">Info: Instrumented gen_server</span><br><span class="line">Info: Instrumented gen</span><br><span class="line">Info: Instrumented proc_lib</span><br><span class="line">Info: Instrumented erlang</span><br><span class="line">Info: Instrumented init</span><br><span class="line">Info: Instrumented sys</span><br><span class="line">Info: You can see pairs of racing instructions (in the report and --graph) with &apos;--show_races true&apos;</span><br><span class="line">Error: Stop testing on first error. (Check &apos;-h keep_going&apos;).</span><br><span class="line"></span><br><span class="line">Done! (Exit status: warning)</span><br><span class="line">  Summary: 1 errors, 4/4 interleavings explored</span><br><span class="line">youthy@youthy:~/code/Concuerror$ vim concuerror_report.txt</span><br></pre></td></tr></table></figure></p><p>concuerror_report.txt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Erroneous interleaving 1:</span><br><span class="line">* At step 23 process P exited abnormally</span><br><span class="line">    Reason:</span><br><span class="line">      &#123;&#123;badmatch,initializing&#125;,</span><br><span class="line">       [&#123;z,test,0,[&#123;file,&quot;../etest/z.erl&quot;&#125;,&#123;line,22&#125;]&#125;]&#125;</span><br><span class="line">    Stacktrace:</span><br><span class="line">      [&#123;z,test,0,[&#123;file,&quot;../etest/z.erl&quot;&#125;,&#123;line,22&#125;]&#125;]</span><br><span class="line">* Blocked at a &apos;receive&apos; (when all other processes have exited):</span><br><span class="line">    P.1 in gen_server.erl line 348</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Interleaving info:</span><br><span class="line">   1: P: undefined = erlang:whereis(z)</span><br><span class="line">    in gen.erl line 277</span><br><span class="line">   2: P: [] = erlang:process_info(P, registered_name)</span><br><span class="line">    in proc_lib.erl line 648</span><br><span class="line">   3: P: P.1 = erlang:spawn_opt(&#123;proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,self,&#123;local,z&#125;,z,[],[]]],[]&#125;)</span><br><span class="line">    in erlang.erl line 249</span><br><span class="line">   4: P.1: undefined = erlang:put(&apos;$ancestors&apos;, [P])</span><br><span class="line">    in proc_lib.erl line 221</span><br><span class="line">   5: P.1: undefined = erlang:put(&apos;$initial_call&apos;, &#123;z,init,1&#125;)</span><br><span class="line">    in proc_lib.erl line 222</span><br><span class="line">   6: P.1: true = erlang:register(z, P.1)</span><br><span class="line">    in gen.erl line 280</span><br><span class="line">   7: P.1: &#123;P.1,&#123;get_argument,generic_debug&#125;&#125; = init ! &#123;P.1,&#123;get_argument,generic_debug&#125;&#125;</span><br><span class="line">    in init.erl line 145</span><br><span class="line">   8: Message (&#123;P.1,&#123;get_argument,generic_debug&#125;&#125;) from P.1 reaches init</span><br><span class="line">   9: Message (&#123;init,error&#125;) from init reaches P.1</span><br><span class="line">  10: P.1: receives message (&#123;init,error&#125;)</span><br><span class="line">    in init.erl line 146</span><br><span class="line">  11: P.1: &#123;ack,P.1,&#123;ok,P.1&#125;&#125; = P ! &#123;ack,P.1,&#123;ok,P.1&#125;&#125;</span><br><span class="line">    in proc_lib.erl line 348</span><br><span class="line">  12: Message (&#123;ack,P.1,&#123;ok,P.1&#125;&#125;) from P.1 reaches P</span><br><span class="line">  13: P: receives message (&#123;ack,P.1,&#123;ok,P.1&#125;&#125;)</span><br><span class="line">    in proc_lib.erl line 321</span><br><span class="line">  14: P: P.1 = erlang:whereis(z)</span><br><span class="line">    in gen.erl line 154</span><br><span class="line">  15: P: #Ref&lt;0.0.0.176&gt; = erlang:monitor(process, P.1)</span><br><span class="line">    in gen.erl line 204</span><br><span class="line">  16: P: &#123;&apos;$gen_call&apos;,&#123;P,#Ref&lt;0.0.0.176&gt;&#125;,read&#125; = erlang:send(P.1, &#123;&apos;$gen_call&apos;,&#123;P,#Ref&lt;0.0.0.176&gt;&#125;,read&#125;, [noconnect])</span><br><span class="line">    in gen.erl line 215</span><br><span class="line">  17: Message (&#123;&apos;$gen_call&apos;,&#123;P,#Ref&lt;0.0.0.176&gt;&#125;,read&#125;) from P reaches P.1</span><br><span class="line">  18: P.1: receives message (&#123;&apos;$gen_call&apos;,&#123;P,#Ref&lt;0.0.0.176&gt;&#125;,read&#125;)</span><br><span class="line">    in gen_server.erl line 348</span><br><span class="line">  19: P.1: &#123;#Ref&lt;0.0.0.176&gt;,initializing&#125; = P ! &#123;#Ref&lt;0.0.0.176&gt;,initializing&#125;</span><br><span class="line">    in gen_server.erl line 214</span><br><span class="line">  20: Message (&#123;#Ref&lt;0.0.0.176&gt;,initializing&#125;) from P.1 reaches P</span><br><span class="line">  21: P: receives message (&#123;#Ref&lt;0.0.0.176&gt;,initializing&#125;)</span><br><span class="line">    in gen.erl line 217</span><br><span class="line">  22: P: true = erlang:demonitor(#Ref&lt;0.0.0.176&gt;, [flush])</span><br><span class="line">    in gen.erl line 219</span><br><span class="line">  23: P: exits abnormally (&#123;&#123;badmatch,initializing&#125;,[&#123;z,test,0,[&#123;file,[46,46,47,101,116,101,115,116,47|...]&#125;,&#123;line,22&#125;]&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>报告显示P进程（父进程)在第23步的时候崩溃了，错误原因时badmatch，z.erl的22行，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ready = read(),</span><br></pre></td></tr></table></figure></p><p>此处read()返回的不是ready而是intiallizing，也就是handle_info(timeout…)并没有执行。<br>上面的１～２３步显示了gen_server的创建过程.以及消息传递过程。十分详细。不过需要挖掘下gen_server的源码才能看懂。</p><h2 id="gen-server的创建过程"><a href="#gen-server的创建过程" class="headerlink" title="gen_server的创建过程"></a>gen_server的创建过程</h2><p>下面分析下gen_server的创建过程。假设我们创建一个{local, test}的进程，并传入Args作为初始化参数，Opts为进程的设置参数.</p><h3 id="gen-server"><a href="#gen-server" class="headerlink" title="gen_server:"></a>gen_server:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start_link(&#123;local, test&#125;, test, Args, Opts) -&gt;</span><br><span class="line">   gen:start(gen_server,  link, &#123;local, test&#125;, test, Args, Opts).</span><br></pre></td></tr></table></figure><h3 id="gen"><a href="#gen" class="headerlink" title="gen:"></a>gen:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start(gen_server, link, &#123;local, test&#125;, test, Args, Opts) -&gt;</span><br><span class="line">     case where(&#123;local, test&#125;) of %检测名字是否注册</span><br><span class="line">       undefined -&gt;</span><br><span class="line">          do_spawn(gen_server, link, &#123;local, test&#125;, test, Args, Opts);</span><br><span class="line">        Pid -&gt;</span><br><span class="line">           &#123;error, &#123;already_started, Pid&#125;&#125;</span><br><span class="line">      end.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do_spawn(gen_server, link, &#123;local, test&#125;, test, Args, Opts) -&gt;</span><br><span class="line">        Time = somefun(Opts) % 提取出Opt中的timeout参数, </span><br><span class="line">        proc_lib:start_link(gen, init_it, </span><br><span class="line">        [gen_server, self(), self(), &#123;local, test&#125;, test, Args, Opts], Time, spawn_opts(Opts)).</span><br></pre></td></tr></table></figure><blockquote><p>此处spawn_opts的作用时查找Opts中有没有spawn_opt这个选项，否则为[].</p></blockquote><h3 id="proc-lib"><a href="#proc-lib" class="headerlink" title="proc_lib:"></a>proc_lib:</h3><p>上面self()一般情况下为supervisor的Pid。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start_link(gen, init_it, [gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts], Timeout, Opts|[]) -&gt;</span><br><span class="line">  Pid = proc_lib:spawn_opt(gen, init_it, [gen_server, SelfPid, SelfPid, &#123;local, test&#125;, test, Args, Opts|[]], ensure_link(Opts|[])), %ensure_link尝试将link加入Opts</span><br><span class="line">  sync_wait(Pid, Timeout).</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spawn_opt(gen, init_it, [gen_server, selfPid, SelfPid, &#123;local, test&#125;, test, Args, Opts], [link]|[link, Opts]) -&gt;</span><br><span class="line">   Parent = ......%获取当前进程registername为父进程</span><br><span class="line">   Ancestors = ....% 获取进程字典中的$ancestors的值</span><br><span class="line">   check_for_monitor([link]|[link,Opts])....% 检测monitor这个参数在不在其中，在的话直接抛出错误。 </span><br><span class="line">   erlang:spawn_opt(proc_lib, init_p, [Parent, Ancestors, gen, init_it, [gen_server, SelfPid....Opts],[link]|[link, Opts]).</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sync_wait(Pid, TimeOut) -&gt;</span><br><span class="line">  receive </span><br><span class="line">  &#123;ack, Pid, Return&#125; -&gt;</span><br><span class="line">    Return;</span><br><span class="line">  &#123;&apos;EXIT&apos;, Pid, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, Reason&#125;</span><br><span class="line">  after TimeOut -&gt;</span><br><span class="line">    unlink(Pid),</span><br><span class="line">    exit(Pid, kill),</span><br><span class="line">    flush(Pid),</span><br><span class="line">    &#123;error, timeout&#125;</span><br><span class="line">   end.</span><br></pre></td></tr></table></figure><p>erlang:spawn_opt与spawn类似，只不过支持一些option。所以调用的还是proc_lib的init_p。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init_p(Parent, Ancestors, gen, init_it, [gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]], [link|[link, Opts]) -&gt;</span><br><span class="line">  put(&apos;ancestors&apos;, [Parent|Ancestors]),</span><br><span class="line">  put(&apos;initial_call&apos;, trans_init(gen, init_it, [gen_server, Sup.....])),</span><br><span class="line">  init_p_do_apply(gen, init_it, [gen_server, Sup, Sup....]).</span><br></pre></td></tr></table></figure></p><p>其中trans_init的结果返回为{Module, init, 1} 即 {test, init, 1}.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init_p_do_apply(gen, init_it, [gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]]) -&gt;</span><br><span class="line">    try</span><br><span class="line">apply(gen, init_it, [gen_server, Sup... Opts]) </span><br><span class="line">    catch</span><br><span class="line">Class:Reason -&gt;</span><br><span class="line">    exit_p(Class, Reason)</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>exit_p里面格式化一些错误信息，并用error_logger输出</p><h3 id="gen-1"><a href="#gen-1" class="headerlink" title="gen"></a>gen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init_it(gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]) -&gt;</span><br><span class="line">    case name_register(&#123;local, test&#125;) of</span><br><span class="line">true -&gt;</span><br><span class="line">    init_it2(gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]);</span><br><span class="line">&#123;false, Pid&#125; -&gt;</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;error, &#123;already_started, Pid&#125;&#125;)</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name_register(&#123;local, Name&#125; = LN) -&gt;</span><br><span class="line">    try register(Name, self()) of</span><br><span class="line">true -&gt; true</span><br><span class="line">    catch</span><br><span class="line">error:_ -&gt;</span><br><span class="line">    &#123;false, where(LN)&#125;</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init_it2(gen_server, Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]) -&gt;</span><br><span class="line">   gen_server:init_it(Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]).</span><br></pre></td></tr></table></figure><h3 id="gen-server-1"><a href="#gen-server-1" class="headerlink" title="gen_server:"></a>gen_server:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">init_it(Sup, Sup, &#123;local, test&#125;, test, Args, Opts|[]) -&gt;</span><br><span class="line">    test = name(&#123;local, test&#125;),</span><br><span class="line">    Debug = debug_options(Name, Opts|[]),</span><br><span class="line">    case catch test:init(Args) of</span><br><span class="line">&#123;ok, State&#125; -&gt;</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;ok, self()&#125;),     </span><br><span class="line">    loop(Sup, test, State, test, infinity, Debug);</span><br><span class="line">&#123;ok, State, Timeout&#125; -&gt;</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;ok, self()&#125;),     </span><br><span class="line">    loop(Sup, test, State, test, Timeout, Debug);</span><br><span class="line">&#123;stop, Reason&#125; -&gt;</span><br><span class="line">    unregister_name(test),</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;error, Reason&#125;),</span><br><span class="line">    exit(Reason);</span><br><span class="line">ignore -&gt;</span><br><span class="line">    unregister_name(test),</span><br><span class="line">    proc_lib:init_ack(Sup, ignore),</span><br><span class="line">    exit(normal);</span><br><span class="line">&#123;&apos;EXIT&apos;, Reason&#125; -&gt;</span><br><span class="line">    unregister_name(test),</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;error, Reason&#125;),</span><br><span class="line">    exit(Reason);</span><br><span class="line">Else -&gt;</span><br><span class="line">    Error = &#123;bad_return_value, Else&#125;,</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;error, Error&#125;),</span><br><span class="line">    exit(Error)</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><h3 id="proc-lib-1"><a href="#proc-lib-1" class="headerlink" title="proc_lib"></a>proc_lib</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init_ack(Sup, &#123;ok, Pid&#125;|&#123;error, already_exited&#125;) -&gt;</span><br><span class="line">    Parent ! &#123;ack, self(), &#123;ok, Pid&#125;&#125;|&#123;error, already_exited&#125;&#125;,</span><br><span class="line">    ok.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">loop(Sup, test, State, test, Timeout, Debug) -&gt;</span><br><span class="line">    Msg = receive</span><br><span class="line">      Input -&gt;</span><br><span class="line">    Input</span><br><span class="line">  after Time -&gt;</span><br><span class="line">  timeout</span><br><span class="line">  end,</span><br><span class="line">    decode_msg(Msg, Parent, Name, State, Mod, Time, Debug, false).</span><br></pre></td></tr></table></figure><p>至此gen_server初始化完成。<br>。<br>由此得知。gen_server再调用test：init之前，主要做了</p><ol><li>判断名字是否被占用，否则报{error, already_exited}</li><li>写入ancestors和initial call</li></ol><p>Opts中的timeout参数主要用来衡量创建进程的time，超时回结束进程并返回。而{ok， State， Timeout}的timeout参数用来参与loop循环，在进程创建后timeout时间内没有接到消息，就会像自己发送timeout这个消息。 而且这个参数在之后的handle_call, handle_cast,handle_info等回调中，使可以修改timeout的数值。参考源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">handle_msg(&#123;&apos;$gen_call&apos;, From, Msg&#125;, Parent, Name, State, Mod, Debug) -&gt;</span><br><span class="line">    case catch Mod:handle_call(Msg, From, State) of</span><br><span class="line">&#123;reply, Reply, NState&#125; -&gt;</span><br><span class="line">    Debug1 = reply(Name, From, Reply, NState, Debug),</span><br><span class="line">    loop(Parent, Name, NState, Mod, infinity, Debug1);</span><br><span class="line">&#123;reply, Reply, NState, Time1&#125; -&gt;</span><br><span class="line">    Debug1 = reply(Name, From, Reply, NState, Debug),</span><br><span class="line">    loop(Parent, Name, NState, Mod, Time1, Debug1);</span><br><span class="line">&#123;noreply, NState&#125; -&gt;</span><br><span class="line">    Debug1 = sys:handle_debug(Debug, fun print_event/3, Name,</span><br><span class="line">      &#123;noreply, NState&#125;),</span><br><span class="line">    loop(Parent, Name, NState, Mod, infinity, Debug1);</span><br><span class="line">&#123;noreply, NState, Time1&#125; -&gt;</span><br><span class="line">    Debug1 = sys:handle_debug(Debug, fun print_event/3, Name,</span><br><span class="line">      &#123;noreply, NState&#125;),</span><br><span class="line">    loop(Parent, Name, NState, Mod, Time1, Debug1);</span><br><span class="line">&#123;stop, Reason, Reply, NState&#125; -&gt;</span><br><span class="line">    &#123;&apos;EXIT&apos;, R&#125; = </span><br><span class="line">(catch terminate(Reason, Name, Msg, Mod, NState, Debug)),</span><br><span class="line">    reply(Name, From, Reply, NState, Debug),</span><br><span class="line">    exit(R);</span><br><span class="line">Other -&gt;</span><br><span class="line">    handle_common_reply(Other, Parent, Name, Msg, Mod, State, Debug)</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure></p><p>可见handle_call的返回值如果包含Time1，就会修改loop的Timeout参数。</p><h2 id="where-is-the-point"><a href="#where-is-the-point" class="headerlink" title="where is the point?"></a>where is the point?</h2><p>问题出现在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;ok, State, Timeout&#125; -&gt;</span><br><span class="line">    proc_lib:init_ack(Sup, &#123;ok, self()&#125;),     </span><br><span class="line">    loop(Sup, test, State, test, Timeout, Debug);</span><br></pre></td></tr></table></figure></p><p>Ｐ进程创建Ｐ.1进程，然后进入receive，期待一个{ack, Pid, Return}的回复。在init结束返回{ok, State, Timeout}后，proc_lib:init_ack完成了向P发送{ack, Pid, Return}的任务。然后进入ｌｏｏｐ循环。但这时Ｐ进程接到消息后立刻发送了read.导致timeout并没有发送出去。造成badmatch的结果。</p><p>在一种情况，其实在name_register的时候名字和Ｐｉｄ就已经注册好了。但此时甚至没有进入ｉｎｉｔ函数，如果有其他进程朝test名字的ｓｅｒｖｅｒ发送消息，自然会导致ｔｉｍｅｏｕｔ的失效。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下lamp(apache2+php5+mysql)搭建</title>
    <link href="http://youthyblog.com/2015/07/31/ubuntu-LAMP%E6%90%AD%E5%BB%BA/"/>
    <id>http://youthyblog.com/2015/07/31/ubuntu-LAMP搭建/</id>
    <published>2015-07-31T05:20:15.000Z</published>
    <updated>2018-10-17T08:46:23.203Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu下lamp(apache2+php5+mysql)搭建<br><a id="more"></a></p><!-- toc --><h2 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure><p>此时浏览器进入localhost会显示It works界面。</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5  </span><br><span class="line">sudo apt-get install libapache2-mod-php5  </span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/www/html/info.php</span><br></pre></td></tr></table></figure><p>输入下面的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开浏览器访问 (<a href="http://127.0.0.1/info.php)" target="_blank" rel="noopener">http://127.0.0.1/info.php)</a>:<br>你可以看到一些已经支持的模块。</p><blockquote><p>如果在www下没有html文件夹，info就建在www下。</p></blockquote><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>输入root用户密码。</p><h2 id="让apache、php支持mysql"><a href="#让apache、php支持mysql" class="headerlink" title="让apache、php支持mysql"></a>让apache、php支持mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-auth-mysql  </span><br><span class="line">sudo apt-get install php5-mysql  </span><br><span class="line">sudo apt-get install php5-mcrypt</span><br><span class="line">sudo php5enmod mcrypt</span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>可选（apt-get install php5-mysqlnd<br>sudo apt-get install php5 libapache2-mod-php5 php5-cgi php5-cli php5-common php5-curl php5-gd php5-mysql php5-pgsql）</p><h2 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install phpmyadmin</span><br></pre></td></tr></table></figure><p>选择apache2.<br>安装完成后，建立软链。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/share/phpmyadmin /var/www/html</span><br></pre></td></tr></table></figure></p><p>此时可以进入localhost/phpmyadmin</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/php5/apache2/php.ini</span><br></pre></td></tr></table></figure><p>找到default_charset改为utf-8<br><code>default_charset = “UTF-8″</code></p><h3 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p>结尾添加<br><code>AddDefaultCharset UTF-8</code><br><code>ServerName 127.0.0.1</code></p><p>完成。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.2cto.com/os/201211/165190.html" target="_blank" rel="noopener">http://www.2cto.com/os/201211/165190.html</a><br><a href="http://www.jb51.net/article/39127.htm" target="_blank" rel="noopener">http://www.jb51.net/article/39127.htm</a><br><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=251355" target="_blank" rel="noopener">http://forum.ubuntu.org.cn/viewtopic.php?t=251355</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu下lamp(apache2+php5+mysql)搭建&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://youthyblog.com/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="http://youthyblog.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>erl命令和参数</title>
    <link href="http://youthyblog.com/2015/07/22/erl%E5%91%BD%E4%BB%A4%E5%92%8C%E5%8F%82%E6%95%B0/"/>
    <id>http://youthyblog.com/2015/07/22/erl命令和参数/</id>
    <published>2015-07-22T02:11:37.000Z</published>
    <updated>2018-10-17T08:46:23.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h2><p>先拿mochiweb生成的一个例子说起，这是start-dev.sh脚本中的内容。启动一个mochiweb应用调用的就是这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec erl \</span><br><span class="line">    -pa ebin deps/*/ebin \</span><br><span class="line">    -boot start_sasl \</span><br><span class="line">    -sname helloworld_dev \</span><br><span class="line">    -s helloworld \</span><br><span class="line">    -s reloader</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通用形式就是</p><blockquote><p>erl -a b –sth -c d +f g -extra abc</p></blockquote><p>erl后面的都是参数arguments<br>arguments可以分为<strong>emulator flags</strong>，<strong>flags</strong>，<strong>plain arguments</strong></p><pre><code>* 任何已+开始的参数会被解释为emulator flags* 任何以-开始的参数会被解释为flags，并传入交给了init模块。* 在--之后到任何-或者+符号之间的所有flags以及-extra之后所有的flags都是plain arguments，这些参数不会发生解释行为，只不过被储存起来。同样交给init模块。</code></pre><p>init:boot(Args)函数接受上面的flags和plain arguments。</p><blockquote><p><strong>boot(BootArgs) -&gt; no_return()<br>Types:<br>BootArgs = [binary()]</strong><br>Starts the Erlang runtime system. This function is called when the emulator is started and coordinates system start-up.<br>BootArgs are all command line arguments except the emulator flags, that is, flags and plain arguments. See erl(1).<br>init itself interprets some of the flags, see Command Line Flags below. The remaining flags (“user flags”) and plain arguments are passed to the init loop and can be retrieved by callingget_arguments/0 and get_plain_arguments/0, respectively.</p></blockquote><p>flags会被boot函数分为 init flags和user flags。user flags可以通过init:get_arguments()得到，plain arguments通过init:get_plain_arguments()得到。值得注意的是一小部分的“-”后面的flags现在是属于emulator flags。后面提到。</p><!-- toc --><h2 id="Init-Flags"><a href="#Init-Flags" class="headerlink" title="Init Flags"></a>Init Flags</h2><h3 id="–-两个横杠"><a href="#–-两个横杠" class="headerlink" title="–(两个横杠)"></a>–(两个横杠)</h3><p>任何在–到下一个-或者+之间的都是plain arguments，可以通过init:get_plain_arguments()取到.</p><h3 id="extra"><a href="#extra" class="headerlink" title="-extra"></a>-extra</h3><p>和–的作用一样，extra后面的flags都是plain arguments</p><h3 id="code-path-choice-Choice-strict-relexed"><a href="#code-path-choice-Choice-strict-relexed" class="headerlink" title="-code_path_choice Choice::strict|relexed"></a>-code_path_choice Choice::strict|relexed</h3><blockquote><p>When the choice of directories in the code path is strict, the directory that ends up in the code path will be exactly the stated one. This means that if for example the directory \$OTPROOT/lib/mnesia-4.4.7/ebin is explicitly added to the code path, the code server will not load files from $OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin and vice versa.</p></blockquote><blockquote><p>This behavior can be controlled via the command line flag -code_path_choice Choice. If the flag is set to relaxed, the code server will instead choose a suitable directory depending on the actual file structure. If there exists a regular application ebin directory,situation it will be chosen. But if it does not exist, the ebin directory in the archive is chosen if it exists. If neither of them exists the original directory will be chosen.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;/home/yuyouqi/Erlang/lib/snmp-5.1.1/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/sasl-2.4.1/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/runtime_tools-1.8.15/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/reltool-0.6.6/ebin&quot;,</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &quot;/home/yuyouqi/Erlang/lib/ssh-3.1/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/snmp-5.1.1/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/sasl-2.4.1.ez/sasl-2.4.1/ebin&quot;,</span><br><span class="line"> &quot;/home/yuyouqi/Erlang/lib/runtime_tools-1.8.15/ebin&quot;,</span><br><span class="line"> 3&gt; code:lib_dir(sasl, ebin).</span><br><span class="line">&quot;/home/yuyouqi/Erlang/lib/sasl-2.4.1.ez/sasl-2.4.1/ebin&quot;</span><br></pre></td></tr></table></figure><h3 id="eval-Expr"><a href="#eval-Expr" class="headerlink" title="-eval Expr"></a>-eval Expr</h3><p>Expr是个函数，在erl初始化时按顺序执行，如果fail的，则初始化失败。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -eval &apos;&#123;X,Y,Z&#125; = now(), random:seed(X,Y,Z).&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>官方文档Z}旁边多了‘符号，需要去掉</p></blockquote><h3 id="run-Mod-Func-Arg1-Arg2…-ArgN"><a href="#run-Mod-Func-Arg1-Arg2…-ArgN" class="headerlink" title="-run Mod Func Arg1 Arg2….ArgN"></a>-run Mod Func Arg1 Arg2….ArgN</h3><p>调用Mod:Func([“Arg1”, “Arg2”, …”ArgN”]),<br>所有参数都是以string方式传入的。同样按顺序执行，前一个执行完才会执行下一个。但是貌似并不会阻塞shell。</p><h3 id="s-Mod-Func-Arg1-Arg2-…-ArgN"><a href="#s-Mod-Func-Arg1-Arg2-…-ArgN" class="headerlink" title="-s Mod Func Arg1 Arg2 … ArgN"></a>-s Mod Func Arg1 Arg2 … ArgN</h3><p>与run完成同样的功能，但是Arg都是atom的形式传入，值得注意的是数字也会变成atom,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -s test time 5000 atom</span><br></pre></td></tr></table></figure></p><p>就是test:time([‘5000’, atom]).<br>一般数字需要atom_to_list, list_to_integer转换。</p><p>##User flags</p><h3 id="ApplicationName-Par-Val"><a href="#ApplicationName-Par-Val" class="headerlink" title="-ApplicationName Par Val"></a>-ApplicationName Par Val</h3><p>指定应用的名字，属性名称和值，可以将应用的某个参数设置成Val。<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> erl -pa ./ebin -s helloworld -helloworld par haha</span><br><span class="line"> 1&gt; application:get_all_key(helloworld).</span><br><span class="line">&#123;ok,[&#123;description,&quot;helloworld&quot;&#125;,</span><br><span class="line">     &#123;id,[]&#125;,</span><br><span class="line">     &#123;vsn,&quot;0.1&quot;&#125;,</span><br><span class="line">     &#123;modules,[helloworld,helloworld_app,helloworld_deps,</span><br><span class="line">               helloworld_dtl,helloworld_sup,helloworld_web]&#125;,</span><br><span class="line">     &#123;maxP,infinity&#125;,</span><br><span class="line">     &#123;maxT,infinity&#125;,</span><br><span class="line">     &#123;registered,[]&#125;,</span><br><span class="line">     &#123;included_applications,[]&#125;,</span><br><span class="line">     &#123;applications,[kernel,stdlib,crypto]&#125;,</span><br><span class="line">     &#123;env,[&#123;par,haha&#125;,&#123;included_applications,[]&#125;]&#125;,</span><br><span class="line">     &#123;mod,&#123;helloworld_app,[]&#125;&#125;,</span><br><span class="line">     &#123;start_phases,undefined&#125;]&#125;</span><br><span class="line">2&gt; application:get_all_env(helloworld).</span><br><span class="line">[&#123;par,haha&#125;,&#123;included_applications,[]&#125;]</span><br></pre></td></tr></table></figure></p><p>启动了一个helloworld应用，并将par参数设置成haha。</p><h3 id="args-file-FileName"><a href="#args-file-FileName" class="headerlink" title="-args_file FileName"></a>-args_file FileName</h3><p>直接从FileName读取erl所用的参数。例如在agrsfile的文件中写入如下</p><blockquote><p>-eval ‘io:format(“read from file~n”)’ -extra hello -pa ./ebin</p></blockquote><p>实际结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">erl -args_file argsfile</span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; read from file</span><br><span class="line">1&gt; init:get_arguments().</span><br><span class="line">[&#123;root,[&quot;/usr/local/lib/erlang&quot;]&#125;,</span><br><span class="line"> &#123;progname,[&quot;erl&quot;]&#125;,</span><br><span class="line"> &#123;home,[&quot;/home/yuyouqi&quot;]&#125;]</span><br><span class="line">2&gt; init:get_plain_arguments().</span><br><span class="line">[&quot;hello&quot;,&quot;-pa&quot;,&quot;./ebin&quot;]</span><br></pre></td></tr></table></figure></p><p>可以看到启动的时候执行了io:format函数，但是-extra这个参数是特殊的，正常情况下-extra到下一个-或者+之间的参数才会被认为是plain arguments，可是如果写在文件中就变成-extra后面所有的参数，都会当成plain arguments.只有这点不同。</p><h3 id="async-shell-start"><a href="#async-shell-start" class="headerlink" title="-async_shell_start"></a>-async_shell_start</h3><p>名字上来说是异步启动shell</p><h3 id="boot-File"><a href="#boot-File" class="headerlink" title="-boot File"></a>-boot File</h3><p>试用File.boot启动erl系统,除非File是个绝对路径，否则在当前文件夹和$ROOT/bin下面找（我的:/usr/local/lib/erlang/bin,  $ROOT可以通过code:root_dir()查看),<br>默认情况下是-boot start<br><a href="http://www.erlang.org/doc/man/script.html" target="_blank" rel="noopener">script</a></p><blockquote><p>The command erl -boot Name starts the system with a boot file called Name.boot, which is generated from the Name.script file, using systools:script2boot/1.<br>The .script file is generated by systools from a .rel file and .app files.</p></blockquote><p>.boot文件是用systools产生的，打开后是乱码.<br>文件的生成顺序 .rel -&gt; .script -&gt; .boot<br><a href="http://erlang.org/doc/man/systools.html" target="_blank" rel="noopener">systools</a><br>systools里面提供了生成rel,script, boot等方法。可以在<code>/usr/local/lib/erlang/releases/R15B</code>下找到几个官方的rel，script，boot<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu@desktop:/usr/local/lib/erlang/releases/R15B$ ls</span><br><span class="line">start_all_example.rel  start_clean.boot  start_clean.script  start_sasl.rel     start.script</span><br><span class="line">start.boot             start_clean.rel   start_sasl.boot     start_sasl.script</span><br></pre></td></tr></table></figure></p><p>打开start_sasl.rel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%注释....</span><br><span class="line">&#123;release, &#123;&quot;OTP  APN 181 01&quot;,&quot;R15B&quot;&#125;, &#123;erts, &quot;5.9&quot;&#125;,</span><br><span class="line"> [&#123;kernel,&quot;2.15&quot;&#125;,</span><br><span class="line">  &#123;stdlib,&quot;1.18&quot;&#125;,</span><br><span class="line">  &#123;sasl, &quot;2.2&quot;&#125;]&#125;.</span><br></pre></td></tr></table></figure></p><p>具体格式在上面的systools链接中有说明<br>仿照它这个样子写一个test<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;release, &#123;&quot;test_rel&quot;,&quot;0.1&quot;&#125;, &#123;erts, &quot;5.9&quot;&#125;,</span><br><span class="line"> [&#123;kernel,&quot;2.15&quot;&#125;,</span><br><span class="line">  &#123;stdlib,&quot;1.18&quot;&#125;,</span><br><span class="line">  &#123;sasl, &quot;2.2&quot;&#125;,</span><br><span class="line">  &#123;crypto, &quot;2.1&quot;&#125;,</span><br><span class="line">  &#123;helloworld,&quot;0.1&quot;&#125;]&#125;.</span><br></pre></td></tr></table></figure></p><p>helloworld使用mochiweb生成的简单框架,用到了crypto，所以讲crypto加入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; systools:make_script(&quot;test&quot;).       </span><br><span class="line">helloworld: File not found: &quot;helloworld.app&quot;</span><br><span class="line"></span><br><span class="line">error</span><br><span class="line">2&gt; systools:make_script(&quot;test&quot;, [&#123;path, [&quot;ebin&quot;]&#125;]).</span><br><span class="line">ok</span><br></pre></td></tr></table></figure></p><p>由于helloworld不在默认的ebin下，所以下加上当前路径中的ebin。否则找不到helloworld.app<br>如果是使用systools的make_script命令省的script会自动生成.boot。打开test.script<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">%% script generated at &#123;2015,7,1&#125; &#123;12,5,26&#125;</span><br><span class="line">&#123;script,</span><br><span class="line">    &#123;&quot;test_rel&quot;,&quot;0.1&quot;&#125;,</span><br><span class="line">    [&#123;preLoaded,</span><br><span class="line">         [erl_prim_loader,erlang,init,otp_ring0,prim_file,prim_inet,prim_zip,</span><br><span class="line">          zlib]&#125;,</span><br><span class="line">     &#123;progress,preloaded&#125;,</span><br><span class="line">     &#123;path,[&quot;$ROOT/lib/kernel-2.15/ebin&quot;,&quot;$ROOT/lib/stdlib-1.18/ebin&quot;]&#125;,</span><br><span class="line">     &#123;primLoad,[error_handler]&#125;,</span><br><span class="line">     &#123;kernel_load_completed&#125;,</span><br><span class="line">     &#123;progress,kernel_load_completed&#125;,</span><br><span class="line">     &#123;path,[&quot;$ROOT/lib/kernel-2.15/ebin&quot;]&#125;,</span><br><span class="line">     &#123;primLoad,</span><br><span class="line">         [application,application_controller,application_master,</span><br><span class="line">          application_starter,auth,code,code_server,disk_log,disk_log_1,</span><br><span class="line">          disk_log_server,disk_log_sup,dist_ac,dist_util,erl_boot_server,</span><br><span class="line">          erl_ddll,erl_distribution,erl_epmd,erl_reply,error_logger,</span><br><span class="line">          erts_debug,file,file_io_server,file_server,gen_sctp,gen_tcp,gen_udp,</span><br><span class="line">          global,global_group,global_search,group,heart,hipe_unified_loader,</span><br><span class="line">          inet,inet6_sctp,inet6_tcp,inet6_tcp_dist,inet6_udp,inet_config,</span><br><span class="line">          inet_db,inet_dns,inet_gethost_native,inet_hosts,inet_parse,inet_res,</span><br><span class="line">          inet_sctp,inet_tcp,inet_tcp_dist,inet_udp,kernel,kernel_config,net,</span><br><span class="line">          net_adm,net_kernel,os,packages,pg2,ram_file,rpc,seq_trace,</span><br><span class="line">          standard_error,user,user_drv,user_sup,wrap_log_reader]&#125;,</span><br><span class="line">     &#123;path,[&quot;$ROOT/lib/stdlib-1.18/ebin&quot;]&#125;,</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>有了.boot文件后就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/helloworld$ erl -pa ebin deps/*/ebin -boot test</span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,sasl_safe_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.35.0&gt;&#125;,</span><br><span class="line">                       &#123;name,alarm_handler&#125;,</span><br><span class="line">                       &#123;mfargs,&#123;alarm_handler,start_link,[]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,2000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,sasl_safe_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.36.0&gt;&#125;,</span><br><span class="line">                       &#123;name,overload&#125;,</span><br><span class="line">                       &#123;mfargs,&#123;overload,start_link,[]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,2000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,sasl_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.34.0&gt;&#125;,</span><br><span class="line">                       &#123;name,sasl_safe_sup&#125;,</span><br><span class="line">                       &#123;mfargs,</span><br><span class="line">                           &#123;supervisor,start_link,</span><br><span class="line">                               [&#123;local,sasl_safe_sup&#125;,sasl,safe]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,infinity&#125;,</span><br><span class="line">                       &#123;child_type,supervisor&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,sasl_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.37.0&gt;&#125;,</span><br><span class="line">                       &#123;name,release_handler&#125;,</span><br><span class="line">                       &#123;mfargs,&#123;release_handler,start_link,[]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,2000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">         application: sasl</span><br><span class="line">          started_at: nonode@nohost</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,crypto_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.43.0&gt;&#125;,</span><br><span class="line">                       &#123;name,crypto_server&#125;,</span><br><span class="line">                       &#123;mfargs,&#123;crypto_server,start_link,[]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,2000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">         application: crypto</span><br><span class="line">          started_at: nonode@nohost</span><br><span class="line">** Found 0 name clashes in code paths </span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">          supervisor: &#123;local,helloworld_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.48.0&gt;&#125;,</span><br><span class="line">                       &#123;name,helloworld_web&#125;,</span><br><span class="line">                       &#123;mfargs,</span><br><span class="line">                           &#123;helloworld_web,start,</span><br><span class="line">                               [[&#123;ip,&#123;0,0,0,0&#125;&#125;,</span><br><span class="line">                                 &#123;port,8080&#125;,</span><br><span class="line">                                 &#123;docroot,</span><br><span class="line">                                     &quot;/home/yuyouqi/Erlang/helloworld/priv/www&quot;&#125;]]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,5000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">=PROGRESS REPORT==== 1-Jul-2015::12:10:49 ===</span><br><span class="line">         application: helloworld</span><br><span class="line">          started_at: nonode@nohost</span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt;</span><br></pre></td></tr></table></figure></p><h3 id="boot-var-Var-Dir"><a href="#boot-var-Var-Dir" class="headerlink" title="-boot_var Var Dir"></a>-boot_var Var Dir</h3><p>指定一个变量Var的路径为Dir，主要用于systools:make_script的{variables, [{“Var”, “Prefix”}]},<br>因为默认的script路径都是在$ROOT/lib下寻找，当在make_script中加入variables选项时，</p><h3 id="code-path-cache"><a href="#code-path-cache" class="headerlink" title="-code_path_cache"></a>-code_path_cache</h3><p>使用codepath的缓存，这样做的好处是加载模块更快，而且可以在常数时间找到模块，如果没加则需要search这个codepath才能找到对应模块，在模块数量很多时，可以使用。</p><h3 id="compile-Mod1-Mod2-…"><a href="#compile-Mod1-Mod2-…" class="headerlink" title="-compile Mod1 Mod2 …"></a>-compile Mod1 Mod2 …</h3><p>编译Mod1 Mod2 … 如果失败会返回非零的错误码 默认同时使用了-noinput参数.<strong>不推荐使用，推荐erlc</strong></p><h3 id="connect-all-true-false"><a href="#connect-all-true-false" class="headerlink" title="connect_all true|false"></a>connect_all true|false</h3><p>是否全联通（N1-N2， N2-N3 -&gt; N1-N2-N3），如果是false那么global模块的注册名字的相关机制无法使用</p><h3 id="config-Config"><a href="#config-Config" class="headerlink" title="-config Config"></a>-config Config</h3><p>读取Config文件，名字为AppName.config.<br>格式</p><blockquote><p>[{AppName, [{Key1, Value1}…]}, {AppName2, […]}].</p></blockquote><p>见<a href="http://www.erlang.org/doc/man/config.html" target="_blank" rel="noopener">config file</a>.<br>例如新建helloworld.config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;helloworld, [&#123;key1, val1&#125;, &#123;key2, val2&#125;]&#125;].</span><br></pre></td></tr></table></figure></p><p>并在start脚本中加入-config helloworld.config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec erl \</span><br><span class="line">    -pa ebin deps/*/ebin \</span><br><span class="line">    -boot start_sasl \</span><br><span class="line">    -sname helloworld_dev \</span><br><span class="line">    -s helloworld \</span><br><span class="line">    -s reloader \</span><br><span class="line">    -config helloworld.config</span><br></pre></td></tr></table></figure></p><p>如下看到在env中多了写入的config值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(helloworld_dev@Ubuntu-desktop)1&gt; application:get_all_key(helloworld).</span><br><span class="line">&#123;ok,[&#123;description,&quot;helloworld&quot;&#125;,</span><br><span class="line">     &#123;id,[]&#125;,</span><br><span class="line">     &#123;vsn,&quot;0.1&quot;&#125;,</span><br><span class="line">     &#123;modules,[helloworld,helloworld_app,helloworld_deps,</span><br><span class="line">               helloworld_dtl,helloworld_sup,helloworld_web]&#125;,</span><br><span class="line">     &#123;maxP,infinity&#125;,</span><br><span class="line">     &#123;maxT,infinity&#125;,</span><br><span class="line">     &#123;registered,[]&#125;,</span><br><span class="line">     &#123;included_applications,[]&#125;,</span><br><span class="line">     &#123;applications,[kernel,stdlib,crypto]&#125;,</span><br><span class="line">     &#123;env,[&#123;included_applications,[]&#125;,&#123;key2,val2&#125;,&#123;key1,val1&#125;]&#125;,</span><br><span class="line">     &#123;mod,&#123;helloworld_app,[]&#125;&#125;,</span><br><span class="line">     &#123;start_phases,undefined&#125;]&#125;</span><br></pre></td></tr></table></figure><h3 id="cookie-Cookie"><a href="#cookie-Cookie" class="headerlink" title="-cookie Cookie"></a>-cookie Cookie</h3><p>过时的没有任何效果的标志，是setcookie的错误拼写，用setcookie代替。</p><h3 id="setcookie-Cookie"><a href="#setcookie-Cookie" class="headerlink" title="-setcookie Cookie"></a>-setcookie Cookie</h3><p>和erlang:set_cookie(Node, Cookie)的效果一样。给本地结点设置需要给本地结点起个名字-name/sname</p><h3 id="detached"><a href="#detached" class="headerlink" title="-detached"></a>-detached</h3><p>以background的形式运行erl，与当前shell分离开，但是需要知道如何停止这个系统<br><a href="http://stackoverflow.com/questions/15464606/erlang-kill-all-processes-running-in-background" target="_blank" rel="noopener">How to stop</a>.</p><h3 id="emu-args"><a href="#emu-args" class="headerlink" title="-emu_args"></a>-emu_args</h3><p>打印传给emulator的参数，比如在start-dev.sh脚本中加入它，可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ./start-dev.sh </span><br><span class="line">Executing: /usr/local/lib/erlang/erts-5.9/bin/beam.smp /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -pa ebin deps/erlydtl/ebin deps/eunit_formatters/ebin deps/merl/ebin deps/mochiweb/ebin -boot start_sasl -sname helloworld_dev -s helloworld -s reloader</span><br><span class="line"></span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br></pre></td></tr></table></figure></p><h3 id="env-Variable-Value"><a href="#env-Variable-Value" class="headerlink" title="-env Variable Value"></a>-env Variable Value</h3><p>设置OS模块的环境变量Variable为Value.<br>通过os:getenv/0 getenv/1可以得到</p><h3 id="heart"><a href="#heart" class="headerlink" title="-heart"></a>-heart</h3><p>开启心跳检测，尽管erlang有各种supervisor监管机制，但是如果emulator down掉了就完了，-heart会开启一个heart进程监控整个emulator，在规定时间内如果没有收到心跳，这个进程就会执行HEART_COMMAND参数，如果这个参数没有设定，那么只会弹出警告，而不会重启。一般HEART_COMMAND就是重启emulator。麻烦的是如果设定了heart，但是没有用-sname，是无法回到这个erlang shell的，也就是无法调用init：stop()来终止heart的监控策略。</p><p>在没有开启任何erl shell的情况下调用<code>ps -ef|grep erl</code>看到跟erl有关的进程如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef |grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3329  2862  0 10:58 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>启动一个erl emulator,然后Ctrl + z放到挂起<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl </span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; </span><br><span class="line">[1]+  已停止               erl</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef |grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3333  2862  0 11:01 pts/2    00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi --</span><br><span class="line">yuyouqi   3346  2862  0 11:01 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>可以看到3333这个进程后面的命令是开启一个erl emulator的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ kill -9 3333</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef | grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3366  2862  0 11:04 pts/2    00:00:00 grep --color=auto erl</span><br><span class="line">[1]+  已杀死               erl</span><br></pre></td></tr></table></figure></p><p>可以看到将他kill掉是没问题的<br>下面启动一个-heart erl shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test1 -heart -env HEART_COMMAND &quot;erl -sname test1 -heart&quot;</span><br><span class="line">heart_beat_kill_pid = 3369</span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test1@yuyouqi-desktop)1&gt; </span><br><span class="line">[1]+  已停止               erl -sname test1 -heart -env HEART_COMMAND &quot;erl -sname test1 -heart&quot;</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef | grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3369  2862  1 11:05 pts/2    00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test1 -heart</span><br><span class="line">yuyouqi   3376  2219  0 11:05 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3387  2862  0 11:06 pts/2    00:00:00 grep --color=auto erl</span><br><span class="line"></span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ heart: Fri Jul  3 11:06:57 2015: heart-beat time-out.</span><br><span class="line">heart_beat_kill_pid = 3390</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef | grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3376  2219  0 11:05 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3389  3383  0 11:06 ?        00:00:00 sh -c erl -sname test1 -heart</span><br><span class="line">yuyouqi   3390  3389  0 11:06 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test1 -heart</span><br><span class="line">yuyouqi   3410  2862  0 11:07 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>上面命令是我用-heart启动一个erl shell，可以看到多了3369 和3376这两个进程，把erl shell挂起，一段时间后，由于heart进程没有接收到“心跳”，重启了erl shell,pid变为3390。而且多出了一个3389这个进程，而3390这个erl shell是3389的子进程。可以看到3389就是执行我们的HEART_COMMAND<br>如果不指定HEART_COMMAND<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test2 -heart</span><br><span class="line">heart_beat_kill_pid = 3685</span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test2@yuyouqi-desktop)1&gt; </span><br><span class="line">[1]+  已停止               erl -sname test2 -heart</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef|grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3376  2219  0 11:05 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3389  3383  0 11:06 ?        00:00:00 sh -c erl -sname test1 -heart</span><br><span class="line">yuyouqi   3390  3389  0 11:06 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test1 -heart</span><br><span class="line">yuyouqi   3685  2862  2 12:15 pts/2    00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test2 -heart</span><br><span class="line">yuyouqi   3703  2862  0 12:15 pts/2    00:00:00 grep --color=auto erl</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ jobs</span><br><span class="line">[1]+  已停止               erl -sname test2 -heart</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ fg</span><br><span class="line">erl -sname test2 -heart</span><br><span class="line"></span><br><span class="line">(test2@yuyouqi-desktop)1&gt; </span><br><span class="line">User switch command</span><br><span class="line"> --&gt; q</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ heart: Fri Jul  3 12:16:10 2015: Erlang has closed.</span><br><span class="line">heart: Fri Jul  3 12:16:10 2015: Would reboot. Terminating.</span><br><span class="line"></span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef|grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3376  2219  0 11:05 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3389  3383  0 11:06 ?        00:00:00 sh -c erl -sname test1 -heart</span><br><span class="line">yuyouqi   3390  3389  0 11:06 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test1 -heart</span><br><span class="line">yuyouqi   3705  2862  0 12:16 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>新建一个test2 shell，不设置HEART_COMMAND，<br>可以看到如果没有设置HEART_COMMAND 使用ctrl g退出后不会重启，但是test1是会重启的。<br>而且新建节点后发现-daemon进程并没有增加，我猜测-daemon有可能是heart监控进程。<br>但是无论怎样kill都是无效的，依然会重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ kill -9 3376 3389 3390</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ heart: Fri Jul  3 12:21:15 2015: Executed &quot;erl -sname test1 -heart&quot;. Terminating.</span><br><span class="line">heart: Fri Jul  3 12:21:15 2015: Erlang has closed.</span><br><span class="line">heart_beat_kill_pid = 3716</span><br><span class="line"></span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef|grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3715  3404  0 12:21 ?        00:00:00 sh -c erl -sname test1 -heart</span><br><span class="line">yuyouqi   3716  3715  3 12:21 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/beam.smp -- -root /usr/local/lib/erlang -progname erl -- -home /home/yuyouqi -- -sname test1 -heart</span><br><span class="line">yuyouqi   3723  2219  0 12:21 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3734  2862  0 12:21 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>这时就需要进入test1，调用init:stop()来结束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test2</span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test2@yuyouqi-desktop)1&gt; </span><br><span class="line">User switch command</span><br><span class="line"> --&gt; r &apos;test1@yuyouqi-desktop&apos;</span><br><span class="line"> --&gt; c</span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test1@yuyouqi-desktop)1&gt; init:stop().</span><br><span class="line">*** ERROR: Shell process terminated! (^G to start new job) ***</span><br><span class="line">heart: Fri Jul  3 12:23:40 2015: Executed &quot;erl -sname test1 -heart&quot;. Terminating.</span><br><span class="line"></span><br><span class="line">User switch command</span><br><span class="line"> --&gt; j</span><br><span class="line">   1  &#123;shell,start,[init]&#125;</span><br><span class="line"> --&gt; c 1</span><br><span class="line"></span><br><span class="line">(test2@yuyouqi-desktop)1&gt;        </span><br><span class="line">User switch command</span><br><span class="line"> --&gt; q</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ ps -ef|grep erl</span><br><span class="line">yuyouqi   2475  2345  0 10:23 ?        00:00:01 /usr/bin/perl /usr/bin/shutter --min_at_startup</span><br><span class="line">yuyouqi   3723  2219  0 12:21 ?        00:00:00 /usr/local/lib/erlang/erts-5.9/bin/epmd -daemon</span><br><span class="line">yuyouqi   3760  2862  0 12:24 pts/2    00:00:00 grep --color=auto erl</span><br></pre></td></tr></table></figure></p><p>这样才能将heart监控的shell关闭(或者使用rpc)<br>参考<a href="http://stackoverflow.com/questions/7217892/is-there-a-way-to-kill-the-erlang-vm-when-it-is-running-with-heart" target="_blank" rel="noopener">Is there a way to kill the erlang vm when it is running with -heart</a></p><h3 id="hidden"><a href="#hidden" class="headerlink" title="-hidden"></a>-hidden</h3><p>已hidden启动的结点在于其他结点连接时，他的连接时隐藏的，不会再nodes()中得到自己的名字。只有与自己同属于一个<a href="http://www.erlang.org/doc/man/global_group.html#type-group_name" target="_blank" rel="noopener">global_group</a>的其他结点才能知道自己。<br>比如建立一个kernel.config,定义一个global_group<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;kernel, [&#123;global_groups, [&#123;test, [&apos;test1@yuyouqi-desktop&apos;, &apos;test2@yuyouqi-desktop&apos;]&#125;]&#125;]&#125;].</span><br></pre></td></tr></table></figure></p><p>然后启动3个结点test1，test2，test3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test1 -config kernel.config </span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test1@yuyouqi-desktop)1&gt; global_group:global_groups().</span><br><span class="line">&#123;test,[]&#125;</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test2 -hidden -config kernel.config </span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test2@yuyouqi-desktop)1&gt; global_group:global_groups().</span><br><span class="line">&#123;test,[]&#125;</span><br><span class="line">yuyouqi@yuyouqi-desktop:~/Erlang/mochiweb/helloworld$ erl -sname test3 -config kernel.config </span><br><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(test3@yuyouqi-desktop)1&gt; global_group:global_groups().</span><br><span class="line">&#123;no_name,[test]&#125;</span><br></pre></td></tr></table></figure></p><p>其中test2已hidden形式启动，test3不在global_group中，可以看到test1和test2返回自己的global_group为test。<br>用<code>net_kernel:connect</code>将它们互联。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(test2@yuyouqi-desktop)2&gt; net_kernel:connect(&apos;test1@yuyouqi-desktop&apos;).</span><br><span class="line">true</span><br><span class="line">(test2@yuyouqi-desktop)3&gt; nodes().</span><br><span class="line">[&apos;test1@yuyouqi-desktop&apos;]</span><br><span class="line">(test2@yuyouqi-desktop)5&gt; net_kernel:connect(&apos;test3@yuyouqi-desktop&apos;).</span><br><span class="line">true</span><br><span class="line">(test2@yuyouqi-desktop)6&gt; nodes().</span><br><span class="line">[&apos;test1@yuyouqi-desktop&apos;]</span><br><span class="line">(test1@yuyouqi-desktop)2&gt; nodes().</span><br><span class="line">[&apos;test2@yuyouqi-desktop&apos;]</span><br><span class="line">(test3@yuyouqi-desktop)2&gt; nodes().</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>test1和test2是可以互相看到的，而test3的nodes()返回的是空</p><h3 id="init-debug"><a href="#init-debug" class="headerlink" title="-init_debug"></a>-init_debug</h3><p>启动的时候打印调试参数。可以尝试下<code>erl -init_debug</code> 然后对照着<code>/usr/local/lib/erlang/releases/RXXB/start.script</code></p><h3 id="make"><a href="#make" class="headerlink" title="-make"></a>-make</h3><p>相当于make:all(),见<br><a href="http://www.erlang.org/doc/man/make.html" target="_blank" rel="noopener">make</a></p><h3 id="man-Module"><a href="#man-Module" class="headerlink" title="-man Module"></a>-man Module</h3><p>查询某个模块的手册，首先需要去官网下载相应的手册</p><h3 id="mode-interactive-embedded"><a href="#mode-interactive-embedded" class="headerlink" title="-mode interactive|embedded"></a>-mode interactive|embedded</h3><p>erlang system载入代码的方式，interactive模式下，系统只载入一部分代码，当使用为载入的代码时，会尝试自动载入这个模块。如果是embeded模式，实在系统初始化时，根据启动的script文件载入所有代码，如果文件上没有提到，不会载入，如果调用为载入模块的函数，会报exception error</p><h3 id="name-sname-NAME"><a href="#name-sname-NAME" class="headerlink" title="-name/sname NAME"></a>-name/sname NAME</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erl -sname test1</span><br><span class="line">erl -name test2@192.168.1.10</span><br></pre></td></tr></table></figure><p>sname 与name之间的结点不能通信，必须命名方式相同才可以。 sname只能用于同一子网内的机器。</p><h3 id="noinput"><a href="#noinput" class="headerlink" title="-noinput"></a>-noinput</h3><p>erl不读入任何参数</p><h3 id="noshell"><a href="#noshell" class="headerlink" title="-noshell"></a>-noshell</h3><p>常用，不显示erl shell。一般都是执行一系列的-eval，-s，-ran，然后init:stop().</p><h3 id="pa-pz"><a href="#pa-pz" class="headerlink" title="-pa/-pz"></a>-pa/-pz</h3><p>添加code路径，没什么可说的同code:addpathsa/addpathsz</p><h3 id="remsh-Node"><a href="#remsh-Node" class="headerlink" title="-remsh Node"></a>-remsh Node</h3><p>远程链接一个节点。例如在shell1中启动一个mochiweb例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~/code/helloworld$ ./start-dev.sh </span><br><span class="line">...=PROGRESS REPORT==== 17-Jul-2015::12:20:43 ===</span><br><span class="line">          supervisor: &#123;local,kernel_safe_sup&#125;</span><br><span class="line">             started: [&#123;pid,&lt;0.74.0&gt;&#125;,</span><br><span class="line">                       &#123;id,timer_server&#125;,</span><br><span class="line">                       &#123;mfargs,&#123;timer,start_link,[]&#125;&#125;,</span><br><span class="line">                       &#123;restart_type,permanent&#125;,</span><br><span class="line">                       &#123;shutdown,1000&#125;,</span><br><span class="line">                       &#123;child_type,worker&#125;]</span><br><span class="line"></span><br><span class="line">(helloworld_dev@youthy)1&gt;</span><br></pre></td></tr></table></figure></p><p>然后在shell2中链接这个节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ erl -sname test2 -remsh helloworld_dev@youthy</span><br><span class="line">Erlang R15B (erts-5.9) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V7.0  (abort with ^G)</span><br><span class="line">(helloworld_dev@youthy)1&gt; helloworld_web:</span><br><span class="line">loop/2         module_info/0  module_info/1  start/1        stop/0         </span><br><span class="line"></span><br><span class="line">(helloworld_dev@youthy)1&gt; helloworld_web:module_info().</span><br><span class="line">[&#123;module,helloworld_web&#125;,</span><br><span class="line"> &#123;exports,[&#123;start,1&#125;,</span><br><span class="line">           &#123;stop,0&#125;,</span><br><span class="line">           &#123;loop,2&#125;,</span><br><span class="line">           &#123;module_info,0&#125;,</span><br><span class="line">           &#123;module_info,1&#125;]&#125;,</span><br><span class="line"> &#123;attributes,[&#123;vsn,[243820355007545606700617893262330487884]&#125;,</span><br><span class="line">              &#123;author,&quot;Mochi Media &lt;dev@mochimedia.com&gt;&quot;&#125;]&#125;,</span><br><span class="line"> &#123;compile,[&#123;options,[&#123;outdir,&quot;ebin&quot;&#125;,</span><br><span class="line">                     debug_info,debug_info,</span><br><span class="line">                     &#123;i,&quot;include&quot;&#125;]&#125;,</span><br><span class="line">           &#123;version,&quot;6.0&quot;&#125;,</span><br><span class="line">           &#123;time,&#123;2015,7,17,4,17,8&#125;&#125;,</span><br><span class="line">           &#123;source,&quot;/home/youthy/code/helloworld/src/helloworld_web.erl&quot;&#125;]&#125;,</span><br><span class="line"> &#123;native,false&#125;,</span><br><span class="line"> &#123;md5,&lt;&lt;183,110,23,159,102,166,62,91,144,171,107,229,135,</span><br><span class="line">        128,228,76&gt;&gt;&#125;]</span><br><span class="line">(helloworld_dev@youthy)2&gt; </span><br><span class="line">User switch command</span><br><span class="line"> --&gt; q</span><br><span class="line">youthy@youthy:~$</span><br></pre></td></tr></table></figure></p><p>值得注意的是1 必须给节点一个名字且命名方式需要一致。2退出时，不要用q()之类的，否则退出的时对面的节点。需要用ctrl+G然后q的方式。</p><h3 id="rsh-Program"><a href="#rsh-Program" class="headerlink" title="-rsh Program"></a>-rsh Program</h3><p>一般用来启用slave节点时用到。下面例子一开始我们进程中没有erl shell先启动一个master节点。然后在master节点里调用slave:start_link(Host, Name, Args)的方式。启动一个slave节点。这时我们看到进程里面有了两个erl shell。其中一个是已-noshell, noinput等方式启动的。这个就是slave启动的奴隶节点。我们可以用rpc调用一个功能，然后结果会返回给master节点。<br>因为我只有一台机器，如果不用”-rsh ssh”也是可以成功的。但是如果真是在其他机器上还是要加上ssh。两台节点环境，erl版本需一致。master节点退出后，不管时start_link启动还是start启动的slave节点都会退出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ ps -ef | grep erl</span><br><span class="line">youthy   13884  2086  0 14:47 ?        00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/epmd -daemon</span><br><span class="line">youthy   23280 13177  0 15:19 pts/0    00:00:00 grep --color=auto erl</span><br><span class="line">youthy@youthy:~$ erl -sname master</span><br><span class="line">Erlang R15B (erts-5.9) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">(master@youthy)1&gt; </span><br><span class="line">[1]+  已停止               erl -sname master</span><br><span class="line">youthy@youthy:~$ ps -ef | grep erl</span><br><span class="line">youthy   13884  2086  0 14:47 ?        00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/epmd -daemon</span><br><span class="line">youthy   23299 13177  1 15:19 pts/0    00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/beam.smp -- -root /home/youthy/erls/R15B -progname erl -- -home /home/youthy -- -sname master</span><br><span class="line">youthy   23336 13177  0 15:19 pts/0    00:00:00 grep --color=auto erl</span><br><span class="line">youthy@youthy:~$ fg</span><br><span class="line">erl -sname master</span><br><span class="line"></span><br><span class="line">(master@youthy)1&gt; slave:start_link(&apos;youthy&apos;, &apos;slave&apos;, &quot;-rsh ssh&quot;).</span><br><span class="line">&#123;ok,slave@youthy&#125;</span><br><span class="line">(master@youthy)2&gt; </span><br><span class="line">[1]+  已停止               erl -sname master</span><br><span class="line">youthy@youthy:~$ ps -ef | grep erl</span><br><span class="line">youthy   13884  2086  0 14:47 ?        00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/epmd -daemon</span><br><span class="line">youthy   23299 13177  0 15:19 pts/0    00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/beam.smp -- -root /home/youthy/erls/R15B -progname erl -- -home /home/youthy -- -sname master</span><br><span class="line">youthy   23546  2086  0 15:20 ?        00:00:00 /home/youthy/erls/R15B/erts-5.9/bin/beam.smp -- -root /home/youthy/erls/R15B -progname erl -- -home /home/youthy -- -noshell -noinput -noshell -noinput -master master@youthy -sname slave@youthy -s slave slave_start master@youthy slave_waiter_0 -rsh ssh</span><br><span class="line">youthy   23587 13177  0 15:20 pts/0    00:00:00 grep --color=auto erl</span><br><span class="line">youthy@youthy:~$ fg</span><br><span class="line">erl -sname master</span><br><span class="line"></span><br><span class="line">(master@youthy)2&gt; rpc:call(&apos;slave@youthy&apos;, lists, sum, [[2,3,4]]).</span><br><span class="line">9</span><br><span class="line">(master@youthy)3&gt;</span><br></pre></td></tr></table></figure></p><h3 id="set-cookie-Cookie"><a href="#set-cookie-Cookie" class="headerlink" title="-set_cookie Cookie"></a>-set_cookie Cookie</h3><p>等同于erlang:set_cookie/2</p><h3 id="shutdown-time-Time"><a href="#shutdown-time-Time" class="headerlink" title="-shutdown_time Time"></a>-shutdown_time Time</h3><p>Time是ms毫秒。设置关闭erl节点的时间，如果时间到了还没有结束完，就强制结束掉还存在的进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">youthy@youthy:~$ erl -shutdown_time 1000</span><br><span class="line">Erlang R15B (erts-5.9) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; q().</span><br><span class="line">ok</span><br><span class="line">2&gt; &#123;init,shutdown_timeout&#125;</span><br><span class="line">youthy@youthy:~$ </span><br><span class="line">youthy@youthy:~$ erl -shutdown_time 4000</span><br><span class="line">Erlang R15B (erts-5.9) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; q().</span><br><span class="line">ok</span><br><span class="line">2&gt; youthy@youthy:~$</span><br></pre></td></tr></table></figure></p><p>如上，1秒的时间看来时不够用的。</p><h3 id="smp-enable-auto-disable"><a href="#smp-enable-auto-disable" class="headerlink" title="-smp enable/auto/disable"></a>-smp enable/auto/disable</h3><p>是否启用smp，默认时auto。auto自动检测。如果符合会自动开启smp。<br><a href="http://www.cnblogs.com/me-sa/archive/2012/02/01/erlang0035.html" target="_blank" rel="noopener">关于smp</a>.</p><h3 id="version"><a href="#version" class="headerlink" title="-version"></a>-version</h3><p>打印version信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Startup&quot;&gt;&lt;a href=&quot;#Startup&quot; class=&quot;headerlink&quot; title=&quot;Startup&quot;&gt;&lt;/a&gt;Startup&lt;/h2&gt;&lt;p&gt;先拿mochiweb生成的一个例子说起，这是start-dev.sh脚本中的内容。启动一个mochiweb应用调用的就是这个&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exec erl \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -pa ebin deps/*/ebin \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -boot start_sasl \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -sname helloworld_dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -s helloworld \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -s reloader&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的toc</title>
    <link href="http://youthyblog.com/2015/06/15/%E5%85%B3%E4%BA%8Ehexo%E7%9A%84toc/"/>
    <id>http://youthyblog.com/2015/06/15/关于hexo的toc/</id>
    <published>2015-06-15T04:53:16.000Z</published>
    <updated>2018-10-17T08:46:23.204Z</updated>
    
    <content type="html"><![CDATA[<p>15.7.20更新</p><p>###hexo 3.1.1 以上时<br>当我换到hexo3.1.1以上时，修改article.ejs的方式不在奇效果，甚至会导致文章乱码。<br>这时需要用到hexo-toc插件。<a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="noopener">hexo-toc</a><br>不过要注意hexo-toc识别title的形式是<code>### title</code>, 不是<code>###title</code>。<br>安装完后只需要在想要放置的地方加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure></p><p>就可以了。</p><hr><p>以下用于2.x版本</p><p>  前几天换了下blog的主题，发现以前用的YesLandscape里面的TOC还是蛮好用的。但是新的主题没有。想把这个功能加进来。不过没看过node.js的东西。勉勉强强算是弄过来了。<br>  首先，tommy351给出了toc的一些使用帮助。如下<br>  <a href="https://github.com/hexojs/hexo/issues/408" target="_blank" rel="noopener">toc helper</a></p><a id="more"></a><blockquote><p>&lt;%- toc(str, [options]) %&gt;<br>str - Input string<br>options - Options<br>class - Class name<br>list_number - Display list number</p></blockquote><p>  我现在用的是yilia主题，找到layout/_partial/article.ejs文件，在如下地方加入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">&lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;</span><br><span class="line">  &lt;%- post.excerpt %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;!-- 此处插入 --&gt; </span><br><span class="line">&lt;% if(post.toc !== false)&#123; %&gt;</span><br><span class="line">&lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">   &lt;%- toc(post.content) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 结束插入 --&gt; </span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">        &lt;%- post.content %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>toc_article是一个css类，我把原来主题的css用了下，即在source/css/_partial/里面建立一个toc.styl文件，这个是toc需要的css样式。<br>我在里面用来原来的样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.toc-article </span><br><span class="line">  background #2D2D2D</span><br><span class="line">  margin 0.5em</span><br><span class="line">  border-left 10px solid color-border</span><br><span class="line">  padding 0.5em</span><br><span class="line">  strong</span><br></pre></td></tr></table></figure></p><p><code>post.content</code>根据情况使用post或者page，上下文中用的post就用post，用page的就用page。<br>这样生成出来的是这样子。<br><img src="../../../../img/082.png" alt=""></p><p>发现有两种数字在每个标题的左边。其中黑色的数字是由css中控制的，可以在.toc-child中设置list-style none取消这个数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">line-height 1.2em</span><br><span class="line">font-size 1em</span><br><span class="line">float right</span><br><span class="line">.toc </span><br><span class="line">  padding 0</span><br><span class="line">  li</span><br><span class="line">    list-style-type none</span><br><span class="line">.toc-child </span><br><span class="line">  list-style none</span><br><span class="line">  padding-left 1.0em</span><br></pre></td></tr></table></figure></p><p><img src="../../../../img/084.png" alt=""><br>后面的数字需要修改下article,将上面的插入代码加上list_number:false.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(post.toc !== false)&#123; %&gt;</span><br><span class="line">     &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">        &lt;%- toc(post.content, &#123;list_number:false&#125;) %&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="../../../../img/083.png" alt=""><br>这样就没有后面的数字了。 post.toc!== false 可以让我们决定哪些文章需要显示toc。如果不需要，只需在文章开头属性的地方加上一条<code>toc:false</code>就可以了。<br>css我直接将Yeslandscape的复制了一下而已。省事。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//toc</span><br><span class="line">.toc-article </span><br><span class="line">  background #2D2D2D</span><br><span class="line">  margin 0.5em</span><br><span class="line">  border-left 10px solid color-border</span><br><span class="line">  padding 0.5em</span><br><span class="line">  strong</span><br><span class="line"></span><br><span class="line">#toc</span><br><span class="line">  line-height 1.2em</span><br><span class="line">  font-size 1em</span><br><span class="line">  float right</span><br><span class="line">  .toc </span><br><span class="line">    padding 0</span><br><span class="line">    li</span><br><span class="line">      list-style-type none</span><br><span class="line">  .toc-child </span><br><span class="line">    list-style none</span><br><span class="line">    padding-left 1.0em</span><br><span class="line"></span><br><span class="line">#toc.toc-aside</span><br><span class="line">  display none</span><br><span class="line">  width 13%</span><br><span class="line">  position fixed</span><br><span class="line">  right 2%</span><br><span class="line">  top 320px</span><br><span class="line">  overflow hidden</span><br><span class="line">  line-height 1.5em</span><br><span class="line">  font-size 1em</span><br><span class="line">  color color-heading</span><br><span class="line">  opacity .6</span><br><span class="line">  transition opacity 1s ease-out</span><br><span class="line">  strong</span><br><span class="line">    padding 0.3em 0</span><br><span class="line">    color color-font</span><br><span class="line">  &amp;:hover</span><br><span class="line">    transition opacity .3s ease-out</span><br><span class="line">    opacity 1</span><br><span class="line">  a</span><br><span class="line">    transition color 1s ease-out</span><br><span class="line">    &amp;:hover</span><br><span class="line">      color color-theme</span><br><span class="line">      transition color .3s ease-out</span><br><span class="line">.active</span><br><span class="line">  </span><br><span class="line">  color color-theme !important</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;15.7.20更新&lt;/p&gt;
&lt;p&gt;###hexo 3.1.1 以上时&lt;br&gt;当我换到hexo3.1.1以上时，修改article.ejs的方式不在奇效果，甚至会导致文章乱码。&lt;br&gt;这时需要用到hexo-toc插件。&lt;a href=&quot;https://github.com/bubkoo/hexo-toc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-toc&lt;/a&gt;&lt;br&gt;不过要注意hexo-toc识别title的形式是&lt;code&gt;### title&lt;/code&gt;, 不是&lt;code&gt;###title&lt;/code&gt;。&lt;br&gt;安装完后只需要在想要放置的地方加上&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- toc --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下用于2.x版本&lt;/p&gt;
&lt;p&gt;  前几天换了下blog的主题，发现以前用的YesLandscape里面的TOC还是蛮好用的。但是新的主题没有。想把这个功能加进来。不过没看过node.js的东西。勉勉强强算是弄过来了。&lt;br&gt;  首先，tommy351给出了toc的一些使用帮助。如下&lt;br&gt;  &lt;a href=&quot;https://github.com/hexojs/hexo/issues/408&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;toc helper&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://youthyblog.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://youthyblog.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>erlang_mysql_driver源码分析(三)</title>
    <link href="http://youthyblog.com/2015/06/10/erlang_mysql_driver%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%89)/"/>
    <id>http://youthyblog.com/2015/06/10/erlang_mysql_driver源码分析(三)/</id>
    <published>2015-06-10T07:37:35.000Z</published>
    <updated>2018-10-17T08:46:23.199Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>#mysql_recv:start_link</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init(Host, Port, User, Password, Database, LogFun, Encoding, PoolId, Parent) -&gt;</span><br><span class="line">    case mysql_recv:start_link(Host, Port, LogFun, self()) of</span><br><span class="line">&#123;ok, RecvPid, Sock&#125; -&gt;</span><br><span class="line">    case mysql_init(Sock, RecvPid, User, Password, LogFun) of</span><br><span class="line">&#123;ok, Version&#125; -&gt;</span><br></pre></td></tr></table></figure><p>上次在mysql_conn:init里面调用了mysql_recv:start_link,我们知道返回一个RecvPid接收进程的Pid和Sock套接字。mysql_recv:start_link过程如下<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">start_link(Host, Port, LogFun, Parent) when is_list(Host), is_integer(Port) -&gt;</span><br><span class="line">    RecvPid =</span><br><span class="line">spawn_link(fun () -&gt;</span><br><span class="line">   init(Host, Port, LogFun, Parent)</span><br><span class="line">   end),</span><br><span class="line">    %% wait for the socket from the spawned pid</span><br><span class="line">    receive</span><br><span class="line">&#123;mysql_recv, RecvPid, init, &#123;error, E&#125;&#125; -&gt;</span><br><span class="line">    &#123;error, E&#125;;</span><br><span class="line">&#123;mysql_recv, RecvPid, init, &#123;ok, Socket&#125;&#125; -&gt;</span><br><span class="line">    &#123;ok, RecvPid, Socket&#125;</span><br><span class="line">    after ?CONNECT_TIMEOUT -&gt;</span><br><span class="line">    catch exit(RecvPid, kill),</span><br><span class="line">    &#123;error, &quot;timeout&quot;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><p>与mysql_conn大体相同，同样spawn一个进程，将mysql_conn的Pid传入当做Parent父进程，然后mysql_conn等待receive消息，如果spawn的mysql_recv进程返回{mysql_recv, RecvPid, init, {ok, Socket}},就代表创建成功，然后将RecvPid, Socket这些有用的变量返回，以便于mysql_init进行,<br>如果超过?CONNECT_TIMEOUT的时间，则会调用exit(RecvPid, kill)关闭mysql_recv进程，并返回{error, “timeout”}.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">init(Host, Port, LogFun, Parent) -&gt;</span><br><span class="line">    case gen_tcp:connect(Host, Port, [binary, &#123;packet, 0&#125;]) of</span><br><span class="line">&#123;ok, Sock&#125; -&gt;</span><br><span class="line">    Parent ! &#123;mysql_recv, self(), init, &#123;ok, Sock&#125;&#125;,</span><br><span class="line">    State = #state&#123;socket  = Sock,</span><br><span class="line">   parent  = Parent,</span><br><span class="line">   log_fun = LogFun,</span><br><span class="line">   data    = &lt;&lt;&gt;&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">    loop(State);</span><br><span class="line">E -&gt;</span><br><span class="line">    LogFun(?MODULE, ?LINE, error,</span><br><span class="line">   fun() -&gt;</span><br><span class="line">   &#123;&quot;mysql_recv: Failed connecting to ~p:~p : ~p&quot;,</span><br><span class="line">    [Host, Port, E]&#125;</span><br><span class="line">   end),</span><br><span class="line">    Msg = lists:flatten(io_lib:format(&quot;connect failed : ~p&quot;, [E])),</span><br><span class="line">    Parent ! &#123;mysql_recv, self(), init, &#123;error, Msg&#125;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><p>init里面通过gen_tcp:connect连接了端口，返回套接字，将这个套接字发送给父进程也就是在上面receive的地方，之后进入loop。如果连接失败，打印错误，并通知父进程。</p><blockquote><p>state{socket,   %套接字<br>        parent,   %父进程pid<br>        log_fun,  %打印日志函数<br>        data,     %端口发来的数据<br>}</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">loop(State) -&gt;</span><br><span class="line">    Sock = State#state.socket,</span><br><span class="line">    receive</span><br><span class="line">&#123;tcp, Sock, InData&#125; -&gt;</span><br><span class="line">    NewData = list_to_binary([State#state.data, InData]),</span><br><span class="line">    %% send data to parent if we have enough data</span><br><span class="line">    Rest = sendpacket(State#state.parent, NewData),</span><br><span class="line">    loop(State#state&#123;data = Rest&#125;);</span><br><span class="line">&#123;tcp_error, Sock, Reason&#125; -&gt;</span><br><span class="line">    LogFun = State#state.log_fun,</span><br><span class="line">    LogFun(?MODULE, ?LINE, error,</span><br><span class="line">   fun() -&gt;</span><br><span class="line">   &#123;&quot;mysql_recv: Socket ~p closed : ~p&quot;,</span><br><span class="line">    [Sock, Reason]&#125;</span><br><span class="line">   end),</span><br><span class="line">    State#state.parent ! &#123;mysql_recv, self(), closed, &#123;error, Reason&#125;&#125;,</span><br><span class="line">    error;</span><br><span class="line">&#123;tcp_closed, Sock&#125; -&gt;</span><br><span class="line">    LogFun = State#state.log_fun,</span><br><span class="line">    LogFun(?MODULE, ?LINE, debug,</span><br><span class="line">   fun() -&gt;</span><br><span class="line">   &#123;&quot;mysql_recv: Socket ~p closed&quot;, [Sock]&#125;</span><br><span class="line">   end),</span><br><span class="line">    State#state.parent ! &#123;mysql_recv, self(), closed, normal&#125;,</span><br><span class="line">    error</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><p>gen_tcp:connect没有指定{active, false},这样的话，端口可以主动发给recv进程消息。实际上在在gen_tcp:connect之后我们得到Socket的同时，mysql_recv进程的消息队列里已经有Socket的发来的消息了。我们在shell里面可以试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1&gt; gen_tcp:connect(&quot;localhost&quot;, 3306, [binary, &#123;packet, 0&#125;]).</span><br><span class="line">&#123;ok,#Port&lt;0.595&gt;&#125;</span><br><span class="line">2&gt; rp(process_info(self())).</span><br><span class="line">[&#123;current_function,&#123;erl_eval,do_apply,6&#125;&#125;,</span><br><span class="line"> &#123;initial_call,&#123;erlang,apply,2&#125;&#125;,</span><br><span class="line"> &#123;status,running&#125;,</span><br><span class="line"> &#123;message_queue_len,2&#125;,</span><br><span class="line"> &#123;messages,[&#123;tcp,#Port&lt;0.595&gt;,</span><br><span class="line">                 &lt;&lt;91,0,0,0,10,53,46,53,46,51,55,45,48,117,98,117,110,116,</span><br><span class="line">                   117,48,46,49,52,46,48,52,46,49,0,187,1,0,0,57,98,97,67,</span><br><span class="line">                   104,98,52,123,0,255,247,8,2,0,15,128,21,0,0,0,0,0,0,0,</span><br><span class="line">                   0,0,0,50,36,92,38,67,96,59,67,125,112,59,115,0,109,121,</span><br><span class="line">                   115,113,108,95,110,97,116,105,118,101,95,112,97,115,</span><br><span class="line">                   115,119,111,114,100,0&gt;&gt;&#125;,</span><br><span class="line">            &#123;tcp_closed,#Port&lt;0.595&gt;&#125;]&#125;,</span><br><span class="line"> &#123;links,[&lt;0.26.0&gt;]&#125;,</span><br><span class="line"> &#123;dictionary,[]&#125;,</span><br><span class="line"> &#123;trap_exit,false&#125;,</span><br><span class="line"> &#123;error_handler,error_handler&#125;,</span><br><span class="line"> &#123;priority,normal&#125;,</span><br><span class="line"> &#123;group_leader,&lt;0.25.0&gt;&#125;,</span><br><span class="line"> &#123;total_heap_size,3571&#125;,</span><br><span class="line"> &#123;heap_size,987&#125;,</span><br><span class="line"> &#123;stack_size,37&#125;,</span><br><span class="line"> &#123;reductions,4070&#125;,</span><br><span class="line"> &#123;garbage_collection,[&#123;min_bin_vheap_size,46368&#125;,</span><br><span class="line">                      &#123;min_heap_size,233&#125;,</span><br><span class="line">                      &#123;fullsweep_after,65535&#125;,</span><br><span class="line">                      &#123;minor_gcs,5&#125;]&#125;,</span><br><span class="line"> &#123;suspending,[]&#125;]</span><br><span class="line">ok</span><br></pre></td></tr></table></figure></p><p>我们所做的操作以mysql_recv:init里面是一样的。打开了3306端口。这是shell的messagebox里面已经有了两天Socket发来的消息。loop函数将这段消息交给了sendpacket处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sendpacket(Parent, Data) -&gt;</span><br><span class="line">    case Data of</span><br><span class="line">&lt;&lt;Length:24/little, Num:8, D/binary&gt;&gt; -&gt;</span><br><span class="line">    if</span><br><span class="line">Length =&lt; size(D) -&gt;</span><br><span class="line">    &#123;Packet, Rest&#125; = split_binary(D, Length),</span><br><span class="line">    Parent ! &#123;mysql_recv, self(), data, Packet, Num&#125;,</span><br><span class="line">    sendpacket(Parent, Rest);</span><br><span class="line">true -&gt;</span><br><span class="line">    Data</span><br><span class="line">    end;</span><br><span class="line">_ -&gt;</span><br><span class="line">    Data</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure><p>packet头3个字节表示数据长度，第四个字节是帧序号，之后所有的是数据。那么这段数据头三个&lt;&lt;91,0,0&gt;&gt;代表数据长度是91字节（小端存储），之后的0代表这个帧序号是0，&lt;&lt;10….&gt;&gt;就是真正的数据。sendpacket将这段数据发给了parent。在如下的地方匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">init(Host, Port, User, Password, Database, LogFun, Encoding, PoolId, Parent) -&gt;</span><br><span class="line">    case mysql_recv:start_link(Host, Port, LogFun, self()) of</span><br><span class="line">&#123;ok, RecvPid, Sock&#125; -&gt;</span><br><span class="line">    case mysql_init(Sock, RecvPid, User, Password, LogFun) of</span><br><span class="line">&#123;ok, Version&#125; -&gt;</span><br><span class="line">------</span><br><span class="line">mysql_init(Sock, RecvPid, User, Password, LogFun) -&gt;</span><br><span class="line">    case do_recv(LogFun, RecvPid, undefined) of</span><br><span class="line">&#123;ok, Packet, InitSeqNum&#125; -&gt;</span><br><span class="line">    &#123;Version, Salt1, Salt2, Caps&#125; = greeting(Packet, LogFun),</span><br><span class="line">-----</span><br><span class="line">do_recv(LogFun, RecvPid, SeqNum)  when is_function(LogFun);</span><br><span class="line">       LogFun == undefined,</span><br><span class="line">       SeqNum == undefined -&gt;</span><br><span class="line">    receive</span><br><span class="line">        &#123;mysql_recv, RecvPid, data, Packet, Num&#125; -&gt;</span><br><span class="line">    &#123;ok, Packet, Num&#125;;</span><br><span class="line">&#123;mysql_recv, RecvPid, closed, _E&#125; -&gt;</span><br><span class="line">    &#123;error, &quot;mysql_recv: socket was closed&quot;&#125;</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure></p><p>在mysql_conn的do_recv完成对消息的匹配。<br>上面的数据其实就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=INFO REPORT==== 10-Jun-2015::11:59:21 ===</span><br><span class="line">I(&lt;0.116.0&gt;:mysql_conn:620) : greeting packet &lt;&lt;10,53,46,53,46,51,55,45,48,117,</span><br><span class="line">                                                98,117,110,116,117,48,46,49,52,</span><br><span class="line">                                                46,48,52,46,49,0,173,1,0,0,100,</span><br><span class="line">                                                44,77,124,75,63,60,78,0,255,</span><br><span class="line">                                                247,8,2,0,15,128,21,0,0,0,0,0,</span><br><span class="line">                                                0,0,0,0,0,84,60,110,54,95,93,</span><br><span class="line">                                                55,57,88,46,122,66,0,109,121,</span><br><span class="line">                                                115,113,108,95,110,97,116,105,</span><br><span class="line">                                                118,101,95,112,97,115,115,119,</span><br><span class="line">                                                111,114,100,0&gt;&gt; version &quot;5.5.37-0ubuntu0.14.04.1&quot; (protocol 10) salt &quot;d,M|K?&lt;N&quot; caps 63487 serverchar &lt;&lt;8,2,0,</span><br><span class="line">                                                                                                                                                        15,128,</span><br><span class="line">                                                                                                                                                        21,0,0,</span><br><span class="line">                                                                                                                                                        0,0,0,0,</span><br><span class="line">                                                                                                                                                        0,0,0,0&gt;&gt;salt2 &quot;T&lt;n6_]79X.zB&quot;</span><br></pre></td></tr></table></figure></p><p>greeting函数用来转化为版本号，salt等参数的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">greeting(Packet, LogFun) -&gt;</span><br><span class="line">    &lt;&lt;Protocol:8, Rest/binary&gt;&gt; = Packet,</span><br><span class="line">    &#123;Version, Rest2&#125; = asciz(Rest),</span><br><span class="line">    &lt;&lt;_TreadID:32/little, Rest3/binary&gt;&gt; = Rest2,</span><br><span class="line">    &#123;Salt, Rest4&#125; = asciz(Rest3),</span><br><span class="line">    &lt;&lt;Caps:16/little, Rest5/binary&gt;&gt; = Rest4,</span><br><span class="line">    &lt;&lt;ServerChar:16/binary-unit:8, Rest6/binary&gt;&gt; = Rest5,</span><br><span class="line">    &#123;Salt2, _Rest7&#125; = asciz(Rest6),</span><br><span class="line">    ?Log2(LogFun, debug,</span><br><span class="line">  &quot;greeting packet ~p version ~p (protocol ~p) salt ~p caps ~p serverchar ~p&quot;</span><br><span class="line">  &quot;salt2 ~p&quot;,</span><br><span class="line">  [Packet, Version, Protocol, Salt, Caps, ServerChar, Salt2]),</span><br><span class="line">    &#123;normalize_version(Version, LogFun), Salt, Salt2, Caps&#125;.</span><br><span class="line">------------------------------------------</span><br><span class="line">asciz(Data) when is_binary(Data) -&gt;</span><br><span class="line">    mysql:asciz_binary(Data, []).</span><br><span class="line">-----------------------------------------</span><br><span class="line">asciz_binary(&lt;&lt;&gt;&gt;, Acc) -&gt;</span><br><span class="line">    &#123;lists:reverse(Acc), &lt;&lt;&gt;&gt;&#125;;</span><br><span class="line">asciz_binary(&lt;&lt;0:8, Rest/binary&gt;&gt;, Acc) -&gt;</span><br><span class="line">    &#123;lists:reverse(Acc), Rest&#125;;</span><br><span class="line">asciz_binary(&lt;&lt;C:8, Rest/binary&gt;&gt;, Acc) -&gt;</span><br><span class="line">    asciz_binary(Rest, [C | Acc]).</span><br></pre></td></tr></table></figure></p><p>Packet第一个字节是protocol,之后asciz函数将剩下的二进制以0位分界点分开。那么<br>Packet被分成了</p><blockquote><p>Protocol : &lt;<10>&gt;<br>Version:&lt;&lt;53,46,53,46,51,55,45,48,117,98,117,110,116,117,48,46,49,52,46,48,52,46,49&gt;&gt;,<br>Salt:&lt;&lt;100,44,77,124,75,63,60,78&gt;&gt;<br>Caps:&lt;&lt;255,247&gt;&gt;<br>ServerChar:&lt;&lt;15,128,21,0,0,0,0,0,0,0,0,0,0,84,60,110&gt;&gt;(ServerChar是16个字节不是16个bit)<br>Salt2:&lt;&lt;97,116,105,118,101,95,112,97,115,115,119,111,114,100&gt;&gt;</10></p></blockquote><p>在shell中检测下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4&gt; &lt;&lt;53,46,53,46,51,55,45,48,117,98,117,110,116,117,48,46,49,52,46,48,52,46,49&gt;&gt;.</span><br><span class="line">&lt;&lt;&quot;5.5.37-0ubuntu0.14.04.1&quot;&gt;&gt;</span><br><span class="line">5&gt; &lt;&lt;100,44,77,124,75,63,60,78&gt;&gt;.</span><br><span class="line">&lt;&lt;&quot;d,M|K?&lt;N&quot;&gt;&gt;</span><br><span class="line">6&gt; &lt;&lt;Caps:16/little&gt;&gt; = &lt;&lt;255,247&gt;&gt;.</span><br><span class="line">&lt;&lt;&quot;ÿ÷&quot;&gt;&gt;</span><br><span class="line">7&gt; Caps.</span><br><span class="line">63487</span><br></pre></td></tr></table></figure></p><p>和上面打印的log是一样的。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;#mysql_recv:start_link&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;init(Host, Port, User, Password, Database, LogFun, Encoding, PoolId, Parent) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case mysql_recv:start_link(Host, Port, LogFun, self()) of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;ok, RecvPid, Sock&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    case mysql_init(Sock, RecvPid, User, Password, LogFun) of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;ok, Version&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上次在mysql_conn:init里面调用了mysql_recv:start_link,我们知道返回一个RecvPid接收进程的Pid和Sock套接字。mysql_recv:start_link过程如下&lt;br&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>erlang_mysql_driver　源码分析(二)</title>
    <link href="http://youthyblog.com/2015/06/09/erlang_mysql_driver%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%8C)/"/>
    <id>http://youthyblog.com/2015/06/09/erlang_mysql_driver源码分析(二)/</id>
    <published>2015-06-09T09:21:15.000Z</published>
    <updated>2018-10-17T08:46:23.200Z</updated>
    
    <content type="html"><![CDATA[<p>#mysql_conn:start<br>回到mysql:start_link这个最开始这个地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LogFun1 = if LogFun == undefined -&gt; fun log/4; true -&gt; LogFun end,</span><br><span class="line">   case mysql_conn:start(Host, Port, User, Password, Database, LogFun1,</span><br><span class="line">  Encoding, PoolId) of</span><br><span class="line">&#123;ok, ConnPid&#125; -&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>起初为了不断开gen_server的创建，我们没有进入mysql_conn里面。现在可以进去一窥究竟啦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start(Host, Port, User, Password, Database, LogFun, Encoding, PoolId) -&gt;</span><br><span class="line">    ConnPid = self(),</span><br><span class="line">    Pid = spawn(fun () -&gt;</span><br><span class="line">init(Host, Port, User, Password, Database,</span><br><span class="line">     LogFun, Encoding, PoolId, ConnPid)</span><br><span class="line">end),</span><br><span class="line">    post_start(Pid, LogFun).</span><br><span class="line">    --------------------</span><br><span class="line">post_start(Pid, LogFun) -&gt;</span><br><span class="line">    receive</span><br><span class="line">&#123;mysql_conn, Pid, ok&#125; -&gt;</span><br><span class="line">    &#123;ok, Pid&#125;;</span><br><span class="line">&#123;mysql_conn, Pid, &#123;error, Reason&#125;&#125; -&gt;</span><br><span class="line">    &#123;error, Reason&#125;;</span><br><span class="line">Unknown -&gt;</span><br><span class="line">    ?Log2(LogFun, error,</span><br><span class="line"> &quot;received unknown signal, exiting: ~p&quot;, [Unknown]),</span><br><span class="line">    &#123;error, &quot;unknown signal received&quot;&#125;</span><br><span class="line">    after 5000 -&gt;</span><br><span class="line">    &#123;error, &quot;timed out&quot;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>这里作者将post_start抽出来了，因为与start类似还有个start_link也需要这块代码，但是值得注意的是<br>post_start里面的receive仍然是由mysql:start_link生成的my_sql_game这个gen_server 在调用，而且<code>ConnPid = self()</code>这句代码很有歧义，因为这个ConnPid与mysql中的<code>{ok, ConnPid}</code>明显不是同一个意思。这里的ConnPid实际就是gen_server的Pid，用来传给init作为父进程参数，在子进程可以给父进程发消息,我觉得把这段post_start放到mysql中更容易理解一点。<br>这里我们可以看出来，start函数spawn一个mysql_conn:init这个进程，然后等待消息，如果成功的话，会返回{ok, Pid}，这个Pid是真正意义的ConnPid，用来生成#conn加入my_sql_game的#state里面的。其他情况会返回{error, Reason}.<br>然后看一下init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">init(Host, Port, User, Password, Database, LogFun, Encoding, PoolId, Parent) -&gt;</span><br><span class="line">    case mysql_recv:start_link(Host, Port, LogFun, self()) of</span><br><span class="line">&#123;ok, RecvPid, Sock&#125; -&gt;</span><br><span class="line">    case mysql_init(Sock, RecvPid, User, Password, LogFun) of</span><br><span class="line">&#123;ok, Version&#125; -&gt;</span><br><span class="line">    Db = iolist_to_binary(Database),</span><br><span class="line">    case do_query(Sock, RecvPid, LogFun,</span><br><span class="line">  &lt;&lt;&quot;use &quot;, Db/binary&gt;&gt;,</span><br><span class="line">  Version) of</span><br><span class="line">&#123;error, MySQLRes&#125; -&gt;</span><br><span class="line">    ?Log2(LogFun, error,</span><br><span class="line"> &quot;mysql_conn: Failed changing to database &quot;</span><br><span class="line"> &quot;~p : ~p&quot;,</span><br><span class="line"> [Database,</span><br><span class="line">  mysql:get_result_reason(MySQLRes)]),</span><br><span class="line">    Parent ! &#123;mysql_conn, self(),</span><br><span class="line">      &#123;error, failed_changing_database&#125;&#125;;</span><br><span class="line"></span><br><span class="line">%% ResultType: data | updated</span><br><span class="line">&#123;_ResultType, _MySQLRes&#125; -&gt;</span><br><span class="line">    Parent ! &#123;mysql_conn, self(), ok&#125;,</span><br><span class="line">    case Encoding of</span><br><span class="line">undefined -&gt; undefined;</span><br><span class="line">_ -&gt;</span><br><span class="line">    EncodingBinary = list_to_binary(atom_to_list(Encoding)),</span><br><span class="line">    do_query(Sock, RecvPid, LogFun,</span><br><span class="line">     &lt;&lt;&quot;set names &apos;&quot;, EncodingBinary/binary, &quot;&apos;&quot;&gt;&gt;,</span><br><span class="line">     Version)</span><br><span class="line">    end,</span><br><span class="line">    State = #state&#123;mysql_version=Version,</span><br><span class="line">   recv_pid = RecvPid,</span><br><span class="line">   socket   = Sock,</span><br><span class="line">   log_fun  = LogFun,</span><br><span class="line">   pool_id  = PoolId,</span><br><span class="line">   data     = &lt;&lt;&gt;&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">    loop(State)</span><br><span class="line">    end;</span><br><span class="line">&#123;error, _Reason&#125; -&gt;</span><br><span class="line">    Parent ! &#123;mysql_conn, self(), &#123;error, login_failed&#125;&#125;</span><br><span class="line">    end;</span><br><span class="line">E -&gt;</span><br><span class="line">    ?Log2(LogFun, error,</span><br><span class="line"> &quot;failed connecting to ~p:~p : ~p&quot;,</span><br><span class="line"> [Host, Port, E]),</span><br><span class="line">    Parent ! &#123;mysql_conn, self(), &#123;error, connect_failed&#125;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>这个init比较长，而且里面又调了mysql_recv:start_link，之前之所以没有直接分析这里面也是这个原因，在start_link里面重复调用各个模块的start_link很容易绕进去。<br>同样，我们根据case语句，知道mysql_recv:start_link建了一个新的进程，并且返回RecvPid和一个Sock，可知创建进程的同时监听了某个端口。如果没有成功会返回{error， Reason}</p><p>之后进入mysql_init函数。我们先不要进入mysql_init，这个函数完成了用户名和密码的认证，认证成功会返回{ok, Version}</p><p>接下来要做的是<br><code>case do_query(Sock, RecvPid, LogFun,                  &lt;&lt;&quot;use &quot;, Db/binary&gt;&gt;,                  Version) of</code><br>通知端口我们要使用哪个数据库，打印出来是这段文字<br><code>fetch &lt;&lt;&quot;use aries_game&quot;&gt;&gt;</code><br>返回结果{error, MysqlRes}或者{ResultType, MysqlRes}.<br>MysqlRes是一个record</p><blockquote><p>-record(mysql_result,<br>    {fieldinfo=[],<br>     rows=[],<br>     affectedrows=0,<br>     error=””}).</p></blockquote><p>在do_query的里面，将端口返回来的结果构造成#mysql_result的样子，他包含了需要的rows，或者操作所影响的affetedrows，fieldinfo以及如果出错的错误信息error.<br>如果返回{error, MysqlRes}, 我们调用接口mysql:get_result_reason(MysqlRes)获取错误原因。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_result_reason(#mysql_result&#123;error=Reason&#125;) -&gt;</span><br><span class="line">    Reason.</span><br></pre></td></tr></table></figure></p><p>并通知父进程出错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent ! &#123;mysql_conn, self(), &#123;error, failed_changing_database&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>相反<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;_ResultType, _MySQLRes&#125; -&gt;</span><br><span class="line">    Parent ! &#123;mysql_conn, self(), ok&#125;,</span><br></pre></td></tr></table></figure></p><p>如果没有出错，我们就告诉父进程ok。<br>还记得post_start里面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_start(Pid, LogFun) -&gt;</span><br><span class="line">    receive</span><br><span class="line">&#123;mysql_conn, Pid, ok&#125; -&gt;</span><br><span class="line">    &#123;ok, Pid&#125;;</span><br><span class="line">&#123;mysql_conn, Pid, &#123;error, Reason&#125;&#125; -&gt;</span><br><span class="line">    &#123;error, Reason&#125;;</span><br></pre></td></tr></table></figure></p><p>这就是receive我们这些消息的地方。<br>后面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EncodingBinary = list_to_binary(atom_to_list(Encoding)),</span><br><span class="line">    do_query(Sock, RecvPid, LogFun,</span><br><span class="line">     &lt;&lt;&quot;set names &apos;&quot;, EncodingBinary/binary, &quot;&apos;&quot;&gt;&gt;,</span><br><span class="line">     Version)</span><br></pre></td></tr></table></figure></p><p>用来设定我们的编码方式，目前用的utf8.<br>下面了解下do_query的细节，因为之后我们要做的查询，插入等操作也经过它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">do_query(Sock, RecvPid, LogFun, Query, Version) -&gt;</span><br><span class="line">    Query1 = iolist_to_binary(Query),</span><br><span class="line">    ?Log2(LogFun, debug, &quot;fetch ~p (id ~p)&quot;, [Query1,RecvPid]),</span><br><span class="line">    Packet =  &lt;&lt;?MYSQL_QUERY_OP, Query1/binary&gt;&gt;,</span><br><span class="line">    case do_send(Sock, Packet, 0, LogFun) of</span><br><span class="line">ok -&gt;</span><br><span class="line">    get_query_response(LogFun,RecvPid,</span><br><span class="line">    Version);</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    Msg = io_lib:format(&quot;Failed sending data &quot;</span><br><span class="line">&quot;on socket : ~p&quot;,</span><br><span class="line">[Reason]),</span><br><span class="line">    &#123;error, Msg&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>Query是我们的sql语句，比如上面的&lt;&lt;&lt;”use aries_game”&gt;&gt;,<br>Query1使我们给Query加上一个字节的3(?MYSQL_QUERY_OP是3）.<br>do_send将packet打包并发送，头三个字节是packet大小，第4个字节是序列号，之后是packet内容，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do_send(Sock, Packet, SeqNum, _LogFun) when is_binary(Packet), is_integer(SeqNum) -&gt;</span><br><span class="line">    Data = &lt;&lt;(size(Packet)):24/little, SeqNum:8, Packet/binary&gt;&gt;,</span><br><span class="line">    gen_tcp:send(Sock, Data).</span><br></pre></td></tr></table></figure></p><p>这时候向端口发送了请求,get_query_response等待回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">get_query_response(LogFun, RecvPid, Version) -&gt;</span><br><span class="line">    case do_recv(LogFun, RecvPid, undefined) of</span><br><span class="line">&#123;ok, &lt;&lt;Fieldcount:8, Rest/binary&gt;&gt;, _&#125; -&gt;</span><br><span class="line">    case Fieldcount of</span><br><span class="line">0 -&gt;</span><br><span class="line">    %% No Tabular data</span><br><span class="line">            &lt;&lt;AffectedRows:8, _Rest2/binary&gt;&gt; = Rest,</span><br><span class="line">            ?Log2(LogFun, debug, &quot;updated ~p&quot;, [AffectedRows]),</span><br><span class="line">    &#123;updated, #mysql_result&#123;affectedrows=AffectedRows&#125;&#125;;</span><br><span class="line">255 -&gt;</span><br><span class="line">    &lt;&lt;_Code:16/little, Message/binary&gt;&gt;  = Rest,</span><br><span class="line">    &#123;error, #mysql_result&#123;error=Message&#125;&#125;;</span><br><span class="line">_ -&gt;</span><br><span class="line">    %% Tabular data received</span><br><span class="line">    case get_fields(LogFun, RecvPid, [], Version) of</span><br><span class="line">&#123;ok, Fields&#125; -&gt;</span><br><span class="line">    case get_rows(Fields, LogFun, RecvPid, []) of</span><br><span class="line">&#123;ok, Rows&#125; -&gt;</span><br><span class="line">                    ?Log2(LogFun, debug, &quot;data: field:~p, rows:~p&quot;, [Fields, Rows]),</span><br><span class="line">                    &#123;data, #mysql_result&#123;fieldinfo=Fields,</span><br><span class="line">                            rows=Rows&#125;&#125;;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, #mysql_result&#123;error=Reason&#125;&#125;</span><br><span class="line">    end;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, #mysql_result&#123;error=Reason&#125;&#125;</span><br><span class="line">    end</span><br><span class="line">    end;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, #mysql_result&#123;error=Reason&#125;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>第一句do_recv主要用来对第三个参数帧序列号的不同做匹配，这里是undefined，意在接受任何帧，如果指定一个帧号A，那么do_recv只接受A+1的消息。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> do_recv(LogFun, RecvPid, SeqNum)  when is_function(LogFun);</span><br><span class="line">       LogFun == undefined,</span><br><span class="line">       SeqNum == undefined -&gt;</span><br><span class="line">    receive</span><br><span class="line">        &#123;mysql_recv, RecvPid, data, Packet, Num&#125; -&gt;</span><br><span class="line">    &#123;ok, Packet, Num&#125;;</span><br><span class="line">&#123;mysql_recv, RecvPid, closed, _E&#125; -&gt;</span><br><span class="line">    &#123;error, &quot;mysql_recv: socket was closed&quot;&#125;</span><br><span class="line">    end;</span><br><span class="line">do_recv(LogFun, RecvPid, SeqNum) when is_function(LogFun);</span><br><span class="line">      LogFun == undefined,</span><br><span class="line">      is_integer(SeqNum) -&gt;</span><br><span class="line">    ResponseNum = SeqNum + 1,</span><br><span class="line">    receive</span><br><span class="line">        &#123;mysql_recv, RecvPid, data, Packet, ResponseNum&#125; -&gt;</span><br><span class="line">    &#123;ok, Packet, ResponseNum&#125;;</span><br><span class="line">&#123;mysql_recv, RecvPid, closed, _E&#125; -&gt;</span><br><span class="line">    &#123;error, &quot;mysql_recv: socket was closed&quot;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>这个函数将端口返回的Packet和帧序号返回，或者帧序号+1返回。<br>回到<code>case do_recv(LogFun, RecvPid, undefined) of</code><br>接下来是对结果的匹配，Fieldcount为0表示执行的是update操作，而不是请求某些数据。如果为255则表示出错，返回{error, #mysql_result{error = Message}}.<br>其他数值时，会执行get_field().<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">%% Support for MySQL 4.1.x and 5.x:</span><br><span class="line">get_fields(LogFun, RecvPid, Res, ?MYSQL_4_1) -&gt;</span><br><span class="line">    case do_recv(LogFun, RecvPid, undefined) of</span><br><span class="line">&#123;ok, Packet, _Num&#125; -&gt;</span><br><span class="line">        ?Log2(LogFun, debug, &quot;get_field: packet ~p&quot;, [Packet]),</span><br><span class="line">    case Packet of</span><br><span class="line">&lt;&lt;254:8&gt;&gt; -&gt;</span><br><span class="line">    &#123;ok, lists:reverse(Res)&#125;;</span><br><span class="line">&lt;&lt;254:8, Rest/binary&gt;&gt; when size(Rest) &lt; 8 -&gt;</span><br><span class="line">    &#123;ok, lists:reverse(Res)&#125;;</span><br><span class="line">_ -&gt;</span><br><span class="line">    &#123;_Catalog, Rest&#125; = get_with_length(Packet),</span><br><span class="line">    &#123;_Database, Rest2&#125; = get_with_length(Rest),</span><br><span class="line">    &#123;Table, Rest3&#125; = get_with_length(Rest2),</span><br><span class="line">    %% OrgTable is the real table name if Table is an alias</span><br><span class="line">    &#123;_OrgTable, Rest4&#125; = get_with_length(Rest3),</span><br><span class="line">    &#123;Field, Rest5&#125; = get_with_length(Rest4),</span><br><span class="line">    %% OrgField is the real field name if Field is an alias</span><br><span class="line">    &#123;_OrgField, Rest6&#125; = get_with_length(Rest5),</span><br><span class="line"></span><br><span class="line">    &lt;&lt;_Metadata:8/little, _Charset:16/little,</span><br><span class="line">     Length:32/little, Type:8/little,</span><br><span class="line">     _Flags:16/little, _Decimals:8/little,</span><br><span class="line">     _Rest7/binary&gt;&gt; = Rest6,</span><br><span class="line">    </span><br><span class="line">    This = &#123;Table,</span><br><span class="line">    Field,</span><br><span class="line">    Length,</span><br><span class="line">    get_field_datatype(Type)&#125;,</span><br><span class="line">    get_fields(LogFun, RecvPid, [This | Res], ?MYSQL_4_1)</span><br><span class="line">    end;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, Reason&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>这里提供了两个版本的get_field,我的mysql是5.5所以会匹配到这个函数上。<br>get_field一开始仍然是do_recv，用来提取一个Packet。case Packet告诉我们这个包第一个字节是254的时候表示结果已经全部告诉我们了，这时候会将Res（result）翻转，返回。<br>get_with_length用来将Packet切割，用来得到Table， Field， Length等参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get_with_length(&lt;&lt;251:8, Rest/binary&gt;&gt;) -&gt;</span><br><span class="line">    &#123;null, Rest&#125;;</span><br><span class="line">get_with_length(&lt;&lt;252:8, Length:16/little, Rest/binary&gt;&gt;) -&gt;</span><br><span class="line">    split_binary(Rest, Length);</span><br><span class="line">get_with_length(&lt;&lt;253:8, Length:24/little, Rest/binary&gt;&gt;) -&gt;</span><br><span class="line">    split_binary(Rest, Length);</span><br><span class="line">get_with_length(&lt;&lt;254:8, Length:64/little, Rest/binary&gt;&gt;) -&gt;</span><br><span class="line">    split_binary(Rest, Length);</span><br><span class="line">get_with_length(&lt;&lt;Length:8, Rest/binary&gt;&gt;) when Length &lt; 251 -&gt;</span><br><span class="line">    split_binary(Rest, Length).</span><br></pre></td></tr></table></figure></p><p>这个函数的意思大致可以看出来，如果第一个字节是251，就直接返回null和Rest，如果第一个字节小于251，那么第一个字节表示长度，将Rest分割成{Value， Rest2}，Value是我们需要的，对应长度的值，如果第一个字节大于251，分不同的情况，接下来的2个4个或者8个字节表示长度，将Rest分割。举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql:fetch(mysql_game_pool, &quot;select name from player where id = 301&quot;).</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:426) : fetch &lt;&lt;&quot;select name from player where id = 301&quot;&gt;&gt; (id &lt;0.95.0&gt;)</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:726) : get_field: packet &lt;&lt;3,100,101,102,10,97,114,105,</span><br><span class="line">                                                 101,115,95,103,97,109,101,6,</span><br><span class="line">                                                 112,108,97,121,101,114,6,112,</span><br><span class="line">                                                 108,97,121,101,114,4,110,97,</span><br><span class="line">                                                 109,101,4,110,97,109,101,12,</span><br><span class="line">                                                 33,0,150,0,0,0,253,5,64,0,0,0&gt;&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:726) : get_field: packet &lt;&lt;254,0,0,2,0&gt;&gt;</span><br><span class="line">&#123;data,&#123;mysql_result,[&#123;&lt;&lt;&quot;player&quot;&gt;&gt;,&lt;&lt;&quot;name&quot;&gt;&gt;,150,</span><br><span class="line">                      &apos;VAR_STRING&apos;&#125;],</span><br><span class="line">                    [[&lt;&lt;&quot;aaaa&quot;&gt;&gt;]],</span><br><span class="line">                    0,[]&#125;&#125;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:770) : get_rows: packet &lt;&lt;4,97,97,97,97&gt;&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:770) : get_rows: packet &lt;&lt;254,0,0,2,0&gt;&gt;</span><br><span class="line">(aries_game@192.168.1.85)2&gt; </span><br><span class="line">=INFO REPORT==== 9-Jun-2015::16:43:29 ===</span><br><span class="line">I(&lt;0.94.0&gt;:mysql_conn:667) : data: field:[&#123;&lt;&lt;&quot;player&quot;&gt;&gt;,&lt;&lt;&quot;name&quot;&gt;&gt;,150,</span><br><span class="line">                                           &apos;VAR_STRING&apos;&#125;], rows:[[&lt;&lt;&quot;aaaa&quot;&gt;&gt;]]</span><br></pre></td></tr></table></figure></p><p>我们执行了一个sql语句，从player表中选出id为301的玩家的名字。<br>端口回复给我们的是get_field后面打印的二进制串。</p><ol><li>第一个字节是3，不是254。走get_with_length拆分。</li><li>将100,101,102提出，为CataLog,这个参数我们不需要。</li><li>10表示接下来取10个字节，一直到109，101.位Database，我们也不需要</li><li>接下来6，表示6个字节，&lt;&lt;112,108,97,121,101,114&gt;&gt;提取为Table，也就是我们的表名，我们在shell中打一下可以看到实际上就是&lt;&lt;”player”&gt;&gt;。表示我们是从player表取得。</li><li>接下来6个字节和上面一下，我们不需要。</li><li>下面4个字节&lt;&lt;110,97,109,101&gt;&gt;,就是&lt;&lt;”name”&gt;&gt;,表示字段名。</li><li>后面4个字节以上面一下，不需要。</li><li>从12开始一直到最后我们只需要&lt;&lt;150,0,0,0&gt;&gt;这四个表示长度,注意是小段存储，即长150，253，表示Type.</li><li>紧着着第一个packet到达，由于是254，告诉我们这个语句结果已返回。<br>这个时候我们只知道是player表的name字段，接下来get_rows将得到具体结果。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">get_rows(Fields, LogFun, RecvPid, Res) -&gt;</span><br><span class="line">    case do_recv(LogFun, RecvPid, undefined) of</span><br><span class="line">&#123;ok, Packet, _Num&#125; -&gt;</span><br><span class="line">        ?Log2(LogFun, debug, &quot;get_rows: packet ~p&quot;, [Packet]),</span><br><span class="line">    case Packet of</span><br><span class="line">&lt;&lt;254:8, Rest/binary&gt;&gt; when size(Rest) &lt; 8 -&gt;</span><br><span class="line">    &#123;ok, lists:reverse(Res)&#125;;</span><br><span class="line">_ -&gt;</span><br><span class="line">    &#123;ok, This&#125; = get_row(Fields, Packet, []),</span><br><span class="line">    get_rows(Fields, LogFun, RecvPid, [This | Res])</span><br><span class="line">    end;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    &#123;error, Reason&#125;</span><br><span class="line">    end.</span><br><span class="line"></span><br><span class="line">%% part of get_rows/4</span><br><span class="line">get_row([], _Data, Res) -&gt;</span><br><span class="line">    &#123;ok, lists:reverse(Res)&#125;;</span><br><span class="line">get_row([Field | OtherFields], Data, Res) -&gt;</span><br><span class="line">    &#123;Col, Rest&#125; = get_with_length(Data),</span><br><span class="line">    This = case Col of</span><br><span class="line">       null -&gt;</span><br><span class="line">   undefined;</span><br><span class="line">       _ -&gt;</span><br><span class="line">   convert_type(Col, element(4, Field))</span><br><span class="line">   end,</span><br><span class="line">    get_row(OtherFields, Rest, [This | Res]).</span><br></pre></td></tr></table></figure></li></ol><p>其中Field为[{&lt;&lt;”player”&gt;&gt;,&lt;&lt;”name”&gt;&gt;,150,’VAR_STRING’}],<br>与上面get_field大致相同，row的这个packet很简单，&lt;&lt;4,97,97,97,97&gt;&gt;，后面的4个字节就是我们要的结果就是&lt;&lt;”aaaa”&gt;&gt;.然后convert_type将结果转为对应的形式<br>convert_type不贴了，ｈｅｘｏ转码会有问题．<br>我们的类型是VAR_STRING，直接原样返回。<br>这样回到get_query_response，我们得到了需要的结果{data, #mysql_result{}}这种形式。<br>在往上回到init处，我们执行完&lt;&lt;”use XXX(数据库名)”&gt;&gt;, 返回成功后，执行&lt;&lt;”set names utf8”&gt;&gt;,<br>最后构造State<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">State = #state&#123;mysql_version=Version,</span><br><span class="line">   recv_pid = RecvPid,</span><br><span class="line">   socket   = Sock,</span><br><span class="line">   log_fun  = LogFun,</span><br><span class="line">   pool_id  = PoolId,</span><br><span class="line">   data     = &lt;&lt;&gt;&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">    loop(State)</span><br></pre></td></tr></table></figure></p><p>并开始loop。至此这个mysql_conn进程创建完毕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#mysql_conn:start&lt;br&gt;回到mysql:start_link这个最开始这个地方&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LogFun1 = if LogFun == undefined -&amp;gt; fun log/4; true -&amp;gt; LogFun end,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   case mysql_conn:start(Host, Port, User, Password, Database, LogFun1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  Encoding, PoolId) of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;ok, ConnPid&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>erlang_mysql_driver 源码分析(一)</title>
    <link href="http://youthyblog.com/2015/06/08/erlang_mysql_driver/"/>
    <id>http://youthyblog.com/2015/06/08/erlang_mysql_driver/</id>
    <published>2015-06-08T12:13:07.000Z</published>
    <updated>2018-10-17T08:46:23.199Z</updated>
    
    <content type="html"><![CDATA[<p>这两天抽时间看了看erlang_mysql_driver这个项目，用来建立管理服务器端mysql方面的处理。听说emysql也不错，过两天看看对比下。<br>这个项目主体有这么几个文件</p><blockquote><p>mysql.erl<br>mysql_auth.erl<br>mysql_conn.erl<br>mysql_recv.erl</p></blockquote><a id="more"></a><p>#mysql:start_link<br>主要接口在mysql里面。<br>mysql文件头有作者写的功能使用注释</p><blockquote><p>%%% Usage:<br>%%%<br>%%%<br>%%% Call one of the start-functions before any call to fetch/2<br>%%%<br>%%%   start_link(PoolId, Host, User, Password, Database)<br>%%%   start_link(PoolId, Host, Port, User, Password, Database)<br>%%%   start_link(PoolId, Host, User, Password, Database, LogFun)<br>%%%   start_link(PoolId, Host, Port, User, Password, Database, LogFun)<br>%%%<br>%%% (These functions also have non-linking coutnerparts.)</p></blockquote><p>让我们在使用任何fetch之前先start_link,如果不需要link，同时提供了start接口。<br>好，找到start_link.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start_link(PoolId, Host, User, Password, Database) -&gt;</span><br><span class="line">    start_link(PoolId, Host, ?PORT, User, Password, Database).</span><br><span class="line"></span><br><span class="line">start_link(PoolId, Host, Port, User, Password, Database) -&gt;</span><br><span class="line">    start_link(PoolId, Host, Port, User, Password, Database, undefined,</span><br><span class="line">       undefined).</span><br><span class="line"></span><br><span class="line">start_link(PoolId, Host, undefined, User, Password, Database, LogFun) -&gt;</span><br><span class="line">    start_link(PoolId, Host, ?PORT, User, Password, Database, LogFun,</span><br><span class="line">       undefined);</span><br><span class="line">start_link(PoolId, Host, Port, User, Password, Database, LogFun) -&gt;</span><br><span class="line">    start_link(PoolId, Host, Port, User, Password, Database, LogFun,</span><br><span class="line">       undefined).</span><br><span class="line"></span><br><span class="line">start_link(PoolId, Host, undefined, User, Password, Database, LogFun,</span><br><span class="line">   Encoding) -&gt;</span><br><span class="line">    start1(PoolId, Host, ?PORT, User, Password, Database, LogFun, Encoding,</span><br><span class="line">   start_link);</span><br><span class="line">start_link(PoolId, Host, Port, User, Password, Database, LogFun, Encoding) -&gt;</span><br><span class="line">    start1(PoolId, Host, Port, User, Password, Database, LogFun, Encoding,</span><br><span class="line">   start_link).</span><br></pre></td></tr></table></figure></p><p>start与start_link大致相同，只不过最后参数是start不是start_link<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">start(PoolId, Host, undefined, User, Password, Database, LogFun, Encoding) -&gt;</span><br><span class="line">    start1(PoolId, Host, ?PORT, User, Password, Database, LogFun, Encoding,</span><br><span class="line">   start);</span><br><span class="line">start(PoolId, Host, Port, User, Password, Database, LogFun, Encoding) -&gt;</span><br><span class="line">    start1(PoolId, Host, Port, User, Password, Database, LogFun, Encoding,</span><br><span class="line">   start).</span><br></pre></td></tr></table></figure></p><p>其中</p><blockquote><p>PoolId: 这个进程的id，随便起，比如my_sql_game.<br>Host: 目标ip, 本机写”127.0.0.1”<br>Port: 端口号，不改的话默认是3306<br>User: 数据库的用户名：比如 youthy<br>Password：密码<br>Database:数据库名<br>LogFun:日志输出函数，如果undefined则会用默认的输出<br>Encoding:编码方式，我们这里用utf8.</p></blockquote><p>然后转入start1这个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start1(PoolId, Host, Port, User, Password, Database, LogFun, Encoding,</span><br><span class="line">       StartFunc) -&gt;</span><br><span class="line">    crypto:start(),</span><br><span class="line">    gen_server:StartFunc(</span><br><span class="line">      &#123;local, ?SERVER&#125;, ?MODULE,</span><br><span class="line">      [PoolId, Host, Port, User, Password, Database, LogFun, Encoding], []).</span><br></pre></td></tr></table></figure></p><p>crypto是之后需要一些加密算法， 比如md5，sha等，使用前必须先start。<br>而后就是再熟悉不过的gen_server,这里面根据方式不同，分别调用start_link, start,然后找到init函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">init([PoolId, Host, Port, User, Password, Database, LogFun, Encoding]) -&gt;</span><br><span class="line">    erlang:process_flag(priority, high),</span><br><span class="line">    LogFun1 = if LogFun == undefined -&gt; fun log/4; true -&gt; LogFun end,</span><br><span class="line">    case mysql_conn:start(Host, Port, User, Password, Database, LogFun1,</span><br><span class="line">  Encoding, PoolId) of</span><br><span class="line">&#123;ok, ConnPid&#125; -&gt;</span><br><span class="line">    Conn = new_conn(PoolId, ConnPid, true, Host, Port, User, Password,</span><br><span class="line">    Database, Encoding),</span><br><span class="line">    State = #state&#123;log_fun = LogFun1&#125;,</span><br><span class="line">    &#123;ok, add_conn(Conn, State)&#125;;</span><br><span class="line">&#123;error, Reason&#125; -&gt;</span><br><span class="line">    ?Log(LogFun1, error,</span><br><span class="line"> &quot;failed starting first MySQL connection handler, &quot;</span><br><span class="line"> &quot;exiting&quot;),</span><br><span class="line">    &#123;stop, &#123;error, Reason&#125;&#125;</span><br><span class="line">    end.</span><br></pre></td></tr></table></figure></p><p>首先用process_flag将优先级设为高。之后调用mysql_conn:start/8,等会再进去看它内部，我们只知道它返回一个ConnPid,或者出错，然后将这个Pid用new_conn生成一个Conn。然后用add_conn将Conn加入State中，返回，至此这个gen_server创建完毕。名字是”my_sql_game”（随便取）。我们看一下new_conn和add_conn这两个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">new_conn(PoolId, ConnPid, Reconnect, Host, Port, User, Password, Database,</span><br><span class="line"> Encoding) -&gt;</span><br><span class="line">    case Reconnect of</span><br><span class="line">true -&gt;</span><br><span class="line">    #conn&#123;pool_id = PoolId,</span><br><span class="line">  pid = ConnPid,</span><br><span class="line">  reconnect = true,</span><br><span class="line">  host = Host,</span><br><span class="line">  port = Port,</span><br><span class="line">  user = User,</span><br><span class="line">  password = Password,</span><br><span class="line">  database = Database,</span><br><span class="line">  encoding = Encoding</span><br><span class="line"> &#125;;</span><br><span class="line">false -&gt;                        </span><br><span class="line">    #conn&#123;pool_id = PoolId,</span><br><span class="line">  pid = ConnPid,</span><br><span class="line">  reconnect = false&#125;</span><br><span class="line">    end.</span><br><span class="line">---------</span><br><span class="line">add_conn(Conn, State) -&gt;</span><br><span class="line">    Pid = Conn#conn.pid,</span><br><span class="line">    erlang:monitor(process, Conn#conn.pid),</span><br><span class="line">    PoolId = Conn#conn.pool_id,</span><br><span class="line">    ConnPools = State#state.conn_pools,</span><br><span class="line">    NewPool = </span><br><span class="line">case gb_trees:lookup(PoolId, ConnPools) of</span><br><span class="line">    none -&gt;</span><br><span class="line">&#123;[Conn],[]&#125;;</span><br><span class="line">    &#123;value, &#123;Unused, Used&#125;&#125; -&gt;</span><br><span class="line">&#123;[Conn | Unused], Used&#125;</span><br><span class="line">end,</span><br><span class="line">    State#state&#123;conn_pools =</span><br><span class="line">gb_trees:enter(PoolId, NewPool,</span><br><span class="line">       ConnPools),</span><br><span class="line">pids_pools = gb_trees:enter(Pid, PoolId,</span><br><span class="line">    State#state.pids_pools)&#125;.</span><br></pre></td></tr></table></figure></p><p>这里涉及了两个结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-record(conn, &#123;</span><br><span class="line">  pool_id,      %% atom(), the pool&apos;s id</span><br><span class="line">  pid,          %% pid(), mysql_conn process </span><br><span class="line">  reconnect,%% true | false, should mysql_dispatcher try</span><br><span class="line">                        </span><br><span class="line">  host,%% string()</span><br><span class="line">  port,%% integer()</span><br><span class="line">  user,%% string()</span><br><span class="line">  password,%% string()</span><br><span class="line">  database,%% string()</span><br><span class="line">  encoding</span><br><span class="line"> &#125;).</span><br><span class="line"> </span><br><span class="line">-record(state, &#123;</span><br><span class="line"></span><br><span class="line">  conn_pools = gb_trees:empty(), </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  pids_pools = gb_trees:empty(),                               </span><br><span class="line"></span><br><span class="line">  log_fun,</span><br><span class="line"></span><br><span class="line">  prepares = gb_trees:empty()</span><br><span class="line"> &#125;).</span><br></pre></td></tr></table></figure></p><p>conn这个结构大部分就是把函数参数存了起来，其中只有pid需要注意下，它就是mysql_conn:start返回的Pid，new_conn这个函数将参数转成了#conn这个record，然后通过add_conn将#conn存入了#state的conn_pools.字面理解就是链接池。值得注意的是my_sql_game这个gen_server的state用了3个gb_trees这个存储结构。也就是二叉查找树。erlang:monitor(process, Conn#conn.pid).</p><blockquote><p>monitor(Type, Item) -&gt; MonitorRef<br>Types:<br>Type = process<br>Item = pid() | {RegName, Node} | RegName<br> RegName = atom()<br> Node = node()<br>MonitorRef = reference()</p></blockquote><p>目前Type只接受process这个参数，这个函数字面理解就是监控，让这个gen_server监控之前建立的conn进程，被监控进程如果崩溃了，一条{‘DOWN’, MonitorRef, Type, Object，Info}<br>消息会发往监控者，这时可以被handle_info处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">handle_info(&#123;&apos;DOWN&apos;, _MonitorRef, process, Pid, Info&#125;, State) -&gt;</span><br><span class="line">    LogFun = State#state.log_fun,</span><br><span class="line">    case remove_conn(Pid, State) of</span><br><span class="line">&#123;ok, Conn, NewState&#125; -&gt;</span><br><span class="line">    LogLevel = case Info of</span><br><span class="line">   normal -&gt; normal;</span><br><span class="line">   _ -&gt; error</span><br><span class="line">       end,</span><br><span class="line">    ?Log2(LogFun, LogLevel,</span><br><span class="line">&quot;connection pid ~p exited : ~p&quot;, [Pid, Info]),</span><br><span class="line">    case Conn#conn.reconnect of</span><br><span class="line">true -&gt;</span><br><span class="line">    start_reconnect(Conn, LogFun);</span><br><span class="line">false -&gt;</span><br><span class="line">    ok</span><br><span class="line">    end,</span><br><span class="line">    &#123;noreply, NewState&#125;;</span><br><span class="line">error -&gt;</span><br><span class="line">    ?Log2(LogFun, error,</span><br><span class="line">  &quot;received &apos;DOWN&apos; signal from pid ~p not in my list&quot;, [Pid]),</span><br><span class="line">    &#123;noreply, State&#125;</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure></p><p>可以看出主要是讲state里面的conn_pool里面把这个崩掉的进程conn移除，然后如果这个链接conn的属性是reconnect，那么会重新start_reconnect。先不展开，以机会再说，要不init的过程就跑远了。<br>回到erlang:monitor.(还有个对应的函数是demonitor，可以取消监控)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NewPool = </span><br><span class="line">case gb_trees:lookup(PoolId, ConnPools) of</span><br><span class="line">    none -&gt;</span><br><span class="line">&#123;[Conn],[]&#125;;</span><br><span class="line">    &#123;value, &#123;Unused, Used&#125;&#125; -&gt;</span><br><span class="line">&#123;[Conn | Unused], Used&#125;</span><br><span class="line">end,</span><br></pre></td></tr></table></figure></p><p>从ConnPool中找到PoolId的结点，由case可见这个结点存的是{Unused， Used}的形式。<br>gb_tree的结构是{Size, Tree}.Size表示这个tree有多少个结点。tree的结构是{key, Value, Smaller, Biger}.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1&gt; gb_trees:empty().</span><br><span class="line">&#123;0,nil&#125;</span><br><span class="line">2&gt; gb_trees:insert(5, v0, v(1)).</span><br><span class="line">&#123;1,&#123;5,v0,nil,nil&#125;&#125;</span><br><span class="line">3&gt; gb_trees:insert(8, v1, v(2)).</span><br><span class="line">&#123;2,&#123;5,v0,nil,&#123;8,v1,nil,nil&#125;&#125;&#125;</span><br><span class="line">4&gt; gb_trees:insert(3, v2, v(3)).</span><br><span class="line">&#123;3,&#123;5,v0,&#123;3,v2,nil,nil&#125;,&#123;8,v1,nil,nil&#125;&#125;&#125;</span><br><span class="line">5&gt; gb_trees:insert(7, v3, v(4)).</span><br><span class="line">&#123;4,&#123;5,v0,&#123;3,v2,nil,nil&#125;,&#123;8,v1,&#123;7,v3,nil,nil&#125;,nil&#125;&#125;&#125;</span><br><span class="line">6&gt; gb_trees:insert(1, v4, v(5)).</span><br><span class="line">&#123;5,</span><br><span class="line"> &#123;5,v0,&#123;3,v2,&#123;1,v4,nil,nil&#125;,nil&#125;,&#123;8,v1,&#123;7,v3,nil,nil&#125;,nil&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面演示了一个gb_tree的建立，gb_tree的大小判断是基于key的。二叉树数据结构都学过。<br>我们可以看一下state里面的结构究竟是什么样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql:613: state:&#123;state,</span><br><span class="line">                     &#123;1,</span><br><span class="line">                      &#123;my_sql_game,</span><br><span class="line">                          &#123;[&#123;conn,my_sql_game,&lt;0.62.0&gt;,true,&quot;127.0.0.1&quot;,3306,</span><br><span class="line">                                &quot;aries&quot;,&quot;arig&quot;,&quot;aries_game&quot;,utf8&#125;,</span><br><span class="line">                            &#123;conn,my_sql_game,&lt;0.58.0&gt;,true,&quot;127.0.0.1&quot;,3306,</span><br><span class="line">                                &quot;aries&quot;,&quot;arig&quot;,&quot;aries_game&quot;,utf8&#125;,</span><br><span class="line">                            &#123;conn,my_sql_game,&lt;0.54.0&gt;,true,&quot;127.0.0.1&quot;,3306,</span><br><span class="line">                                &quot;aries&quot;,&quot;arig&quot;,&quot;aries_game&quot;,utf8&#125;],</span><br><span class="line">                           [&#123;conn,my_sql_game,&lt;0.41.0&gt;,true,&quot;127.0.0.1&quot;,3306,</span><br><span class="line">                                &quot;aries&quot;,&quot;arig&quot;,&quot;aries_game&quot;,utf8&#125;]&#125;,</span><br><span class="line">                          nil,nil&#125;&#125;,</span><br><span class="line">                     &#123;4,</span><br><span class="line">                      &#123;&lt;0.41.0&gt;,my_sql_game,nil,</span><br><span class="line">                       &#123;&lt;0.54.0&gt;,my_sql_game,nil,</span><br><span class="line">                        &#123;&lt;0.58.0&gt;,my_sql_game,nil,</span><br><span class="line">                         &#123;&lt;0.62.0&gt;,my_sql_game,nil,nil&#125;&#125;&#125;&#125;&#125;,</span><br><span class="line">                     #Fun&lt;mysql.0.74618748&gt;,</span><br><span class="line">                     &#123;0,nil&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>可见我们my_sql_game的conn_pool的size始终为1，<br>因为我们在add_conn函数中的最后总是将conn enter进poolId为my_sql_game的链接池，之后又以pid为key，enter进pid_pool,因为pid不是唯一的，所以pid_pool的size会不断变大。至此我们了解了my_sql_game这个gen_server的创建过程。下篇看一下之前没看到部分。<br>相关参考</p><blockquote><p><a href="http://www.cnblogs.com/me-sa/archive/2012/06/23/erlang-gb_trees.html" target="_blank" rel="noopener">gb_trees(坚强2002博客）</a><br><a href="http://learnyousomeerlang.com/a-short-visit-to-common-data-structures" target="_blank" rel="noopener">A Short Visit to Common Data Structures(推荐！)</a><br><a href="http://www.erlang.org/doc/man/gb_trees.html" target="_blank" rel="noopener">gb_trees(官方doc)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天抽时间看了看erlang_mysql_driver这个项目，用来建立管理服务器端mysql方面的处理。听说emysql也不错，过两天看看对比下。&lt;br&gt;这个项目主体有这么几个文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql.erl&lt;br&gt;mysql_auth.erl&lt;br&gt;mysql_conn.erl&lt;br&gt;mysql_recv.erl&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>Erlang存储模块之ETS</title>
    <link href="http://youthyblog.com/2014/10/25/Erlang-ETS/"/>
    <id>http://youthyblog.com/2014/10/25/Erlang-ETS/</id>
    <published>2014-10-25T10:31:33.000Z</published>
    <updated>2018-10-17T08:46:23.196Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><!-- toc --><h2 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h2><h4 id="new-2"><a href="#new-2" class="headerlink" title="new/2"></a>new/2</h4><blockquote><p>new(Name, Options) -&gt; tid() | atom()</p></blockquote><p>Name = atom()<br>Options = [Option]<br> Option = Type | Access | named_table | {keypos,Pos} | {heir,pid(),HeirData} | {heir,none} | Tweaks<br>  Type = set | ordered_set | bag | duplicate_bag<br>  Access = public | protected | private<br>  Tweaks = {write_concurrency,boolean()} | {read_concurrency,boolean()} | compressed<br>  Pos = integer()<br>  HeirData = term()</p><p>首先ets中保存的是元组(tuple),元组的第一个元素为key</p><p><strong>Type</strong><br>即类型,set是异键表,表示这个ets中的key是唯一的,不能相同,bag表示的是同键表,它允许多个元素有相同的key,但是key之后的元素不能相同,即不能有完全相同的tuple.order_set是set的变种,表示按key排序的ets表,duplicate_bag表示key之外的元素也可以相同,即可以存在完全相同的tuple.<br>set: {playerid1, &lt;&lt;”yuyouqi”&gt;&gt;, 1},{playerid2, &lt;&lt;”youthy”&gt;&gt;, 0}. —default type<br>bag: {playerid1, &lt;&lt;”yuyouqi”&gt;&gt;, 1}, {playerid1, lvl90}.<br>duplicate_bag: {playerid1, hello}, {playerid1, hello}….{playerid1, hello}</p><p>还需要注意的是orderd_set 里面判断key是否相同用的是==而不是=:=,也就意味着1和1.0是相同的key,而其他类型的ets则不是.<br><strong>Access</strong><br>public是任何进程都可读写这个ets<br>protected是只有创建者进程可以改写ets,其他进程只能读取,这个是默认选项<br>private是只有创建者进程可以读写.<br><strong>{keypos, Pos}</strong><br>用来指定Pos位置为key.</p><blockquote><p>在不指定任何Option的时候,默认是以上三个[set, protected, {keypos, 1}]</p></blockquote><p><strong>其他</strong><br>named_table 指定可以通过Name访问这个ets.<br><strong>{heir,Pid,HeirData} | {heir,none}</strong>这个用来控制继承,在创建一个ets时,如果声明了这个,表示这个ets的owner死掉之后,将发送{‘ETS-TRANSFER’,tid(),FromPid,HeirData}这个消息给Pid这个进程,其中tid()是ets的table id.看以下的例子<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; HeirPid = spawn(<span class="keyword">fun</span>() -&gt; <span class="keyword">receive</span> &#123;'ETS-TRANSFER', Tid, FromPid, HeirData&#125; -&gt; ets:insert(Tid, HeirData), timer:sleep(<span class="number">100000</span>) <span class="keyword">end</span> <span class="keyword">end</span>).</span><br><span class="line"><span class="comment">%% 创建用于继承的进程</span></span><br><span class="line">&lt;<span class="number">0.34</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">2</span>&gt; OwnerPid = spawn(<span class="keyword">fun</span>() -&gt; ets:new(person, [named_table, &#123;heir, HeirPid, &#123;<span class="number">1</span>, youthy&#125;&#125;]), <span class="keyword">receive</span> die -&gt; ok <span class="keyword">end</span> <span class="keyword">end</span>).</span><br><span class="line">&lt;<span class="number">0.36</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="comment">%% 创建用于初始化ets的进程,声明heir参数.</span></span><br><span class="line"><span class="number">3</span>&gt; observer:start().</span><br><span class="line">ok</span><br><span class="line"><span class="comment">%% 启动观察器</span></span><br></pre></td></tr></table></figure></p><p><img src="../../../../img/选区_045.png" alt=""><br>此时我们可以看到person这个表的owner是&lt;0.36.0&gt;<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>&gt; ets:tab2list(person).</span><br><span class="line">[]</span><br><span class="line"><span class="comment">%% person中没有任何数据</span></span><br><span class="line"><span class="number">5</span>&gt; OwnerPid ! die.</span><br><span class="line">die</span><br><span class="line"><span class="comment">%% 让OwnerPid死亡</span></span><br><span class="line"><span class="number">6</span>&gt; observer:start(). </span><br><span class="line">ok</span><br><span class="line"><span class="number">7</span>&gt; ets:tab2list(person).</span><br><span class="line">[&#123;<span class="number">1</span>,youthy&#125;]</span><br></pre></td></tr></table></figure></p><p><img src="../../../../img/选区_046.png" alt=""><br>再次观察可以看到person这个表已经继承给了HeirPid,并且里面有了数据.数据是我主动插入的HeirData.</p><p>{write_concurrency,boolean()}/{read_concurrency,boolean()}/compressed<br>write,read默认都是false,当分别指定为true时,编译器会优化,会使write更快,read更快,但是在读写之间的切换会很慢,只适合于单纯的写表或读表.<br>compressed会压缩ets节省空间,但是对ets的操作尤其,match,select等遍历所有元素的操作会慢很多,慎用.</p><hr><h2 id="对表的操作"><a href="#对表的操作" class="headerlink" title="对表的操作"></a>对表的操作</h2><p>上面完成了对ets的创建,接下来自然就是对ets的操作.</p><h3 id="一-插入"><a href="#一-插入" class="headerlink" title="一.插入"></a>一.插入</h3><h4 id="insert-2"><a href="#insert-2" class="headerlink" title="insert/2"></a>insert/2</h4><blockquote><p> insert(Tab, ObjectOrObjects) -&gt; true<br>Types:<br>Tab = tid() | atom()<br>ObjectOrObjects = tuple() | [tuple()]</p></blockquote><p>Tab为ets的TableId, 如果声明为named_table可以为对应的名字.<br>1.<strong>insert是原子操作,BIF,不管object是多个tuple组成的list还是单独一个tuple</strong><br>2.<strong>如果像set表中插入具有相同key的多个元素,则只有一个能被插入,而且不知道具体哪个会被插入,如果是order_set要记住此时key相同的原则不是靠=:=而是==,也就是match(模式匹配)和equal(相等)的区别</strong></p><h4 id="insert-new-2"><a href="#insert-new-2" class="headerlink" title="insert_new/2"></a>insert_new/2</h4><blockquote><p>insert_new(Tab, ObjectOrObjects) -&gt; boolean()<br>Types:<br>Tab = tid() | atom()<br>ObjectOrObjects = tuple() | [tuple()]</p></blockquote><p>大体与insert相同,只不过这个insert直插入ets中不存在键值,当发现key在ets表中已经存在,则返回false.也是原子操作,也就是就算是insert_new一个list的东西,只要有一个key存在了,这个插入就是失败的</p><h3 id="二-查询"><a href="#二-查询" class="headerlink" title="二.查询"></a>二.查询</h3><h4 id="lookup-2"><a href="#lookup-2" class="headerlink" title="lookup/2"></a>lookup/2</h4><blockquote><p>lookup(Tab, Key) -&gt; [Object]<br>Types:<br>Tab = tid() | atom()<br>Key = term()<br>Object = tuple()</p></blockquote><p>注意结果返回是list.同样order_set是特别的,1.0与1是相同的key.</p><h4 id="lookup-element-3"><a href="#lookup-element-3" class="headerlink" title="lookup_element/3"></a>lookup_element/3</h4><blockquote><p>lookup_element(Tab, Key, Pos) -&gt; Elem<br>Types:<br>Tab = tid() | atom()<br>Key = term()<br>Pos = integer()<br>Elem = term() | [term()]</p></blockquote><p>这个返回的是key的tuple里面pos位置的元素.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt; ets:new(person, [named_table, set]).</span><br><span class="line">person</span><br><span class="line">2&gt; ets:insert(person, &#123;player1, man, sword&#125;).</span><br><span class="line">true</span><br><span class="line">3&gt; ets:lookup_element(person, player1, 3).</span><br><span class="line">sword</span><br></pre></td></tr></table></figure></p><p>如果pos处不存在元素则会报bagarg错误</p><h3 id="三-删除"><a href="#三-删除" class="headerlink" title="三.删除"></a>三.删除</h3><h4 id="delete-1"><a href="#delete-1" class="headerlink" title="delete/1"></a>delete/1</h4><blockquote><p>delete(Tab) -&gt; true<br>Types:<br>Tab = tid() | atom()</p></blockquote><h4 id="delete-2"><a href="#delete-2" class="headerlink" title="delete/2"></a>delete/2</h4><p>删除整个ets</p><blockquote><p>delete(Tab, Key) -&gt; true<br>Types:<br>Tab = tid() | atom()<br>Key = term()</p></blockquote><h4 id="delete-all-objects-1"><a href="#delete-all-objects-1" class="headerlink" title="delete_all_objects/1"></a>delete_all_objects/1</h4><p>删除key所对应的键值</p><blockquote><p>delete_all_objects(Tab) -&gt; true<br>Types:<br>Tab = tid() | atom()</p></blockquote><h4 id="delete-object-2"><a href="#delete-object-2" class="headerlink" title="delete_object/2"></a>delete_object/2</h4><p>删除Tab里面所有的值,与delete不同的是不会删掉这个ets</p><blockquote><p>delete_object(Tab,Object) -&gt; true<br>Types:<br>Tab = tid() | atom()<br>Object = tuple()</p></blockquote><p>删除object,主要用于bag型,因为bag是key对应多个object,只删除这个object,而保留key对应其他的object.<br>example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1&gt; ets:new(ingredients, [set, named_table]).</span><br><span class="line">ingredients</span><br><span class="line">2&gt; ets:insert(ingredients, &#123;bacon, great&#125;).</span><br><span class="line">true</span><br><span class="line">3&gt; ets:lookup(ingredients, bacon).</span><br><span class="line">[&#123;bacon,great&#125;]</span><br><span class="line">4&gt; ets:insert(ingredients, [&#123;bacon, awesome&#125;, &#123;cabbage, alright&#125;]).</span><br><span class="line">true</span><br><span class="line">5&gt; ets:lookup(ingredients, bacon).</span><br><span class="line">[&#123;bacon,awesome&#125;]</span><br><span class="line">6&gt; ets:lookup(ingredients, cabbage).</span><br><span class="line">[&#123;cabbage,alright&#125;]</span><br><span class="line">7&gt; ets:delete(ingredients, cabbage).</span><br><span class="line">true</span><br><span class="line">8&gt; ets:lookup(ingredients, cabbage).</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><h3 id="三-其他"><a href="#三-其他" class="headerlink" title="三.其他"></a>三.其他</h3><h4 id="tab2list-1"><a href="#tab2list-1" class="headerlink" title="tab2list/1"></a>tab2list/1</h4><blockquote><p>tab2list(Tab) -&gt; [Object]<br>Types:<br>Tab = tab()<br>Object = tuple()<br>Returns a list of all objects in the table Tab.</p></blockquote><p>列出Tab中所有元素</p><h4 id="all-1"><a href="#all-1" class="headerlink" title="all/1"></a>all/1</h4><blockquote><p>all() -&gt; [Tab]<br>Types:<br>Tab = tid() | atom()</p></blockquote><p>列出当前节点所有的ets</p><h4 id="tab2file-2"><a href="#tab2file-2" class="headerlink" title="tab2file/2"></a>tab2file/2</h4><blockquote><p>tab2file(Tab, Filename) -&gt; ok | {error, Reason}<br>Types:<br>Tab = tab()<br>Filename = file:name()<br>Reason = term()<br>Dumps the table Tab to the file Filename.</p></blockquote><h4 id="tab2file-3"><a href="#tab2file-3" class="headerlink" title="tab2file/3"></a>tab2file/3</h4><blockquote><p>tab2file(Tab, Filename, Options) -&gt; ok | {error, Reason}<br>Types:<br>Tab = tab()<br>Filename = file:name()<br>Options = [Option]<br>Option = {extended_info, [ExtInfo]}<br>ExtInfo = md5sum | object_count<br>Reason = term()</p></blockquote><p>将ets储存到文件,<br>extended_info 选项参数指定什么额外信息要在转储过程中一同被写进，参数选项有以下值：<br>object_count：被标记在文件尾后的实际被写进文件的对象数量。<br>md5sum：在文件里的文件头数据和对象数据都会用内置的 MD5 函数来效验。所有对象数据的 MD5 校验值会被卸载文件尾，因此读取数据的验证将检测在文件数据里的校验值。<br>不管参数 extended_info 是否使用，在 stdlib-1.15.1 之前的 ets 版本该参数无效。反之可以将文件中的ets读入.</p><h4 id="file2tab-1"><a href="#file2tab-1" class="headerlink" title="file2tab/1"></a>file2tab/1</h4><blockquote><p>file2tab(Filename) -&gt; {ok, Tab} | {error, Reason}<br>Types:<br>Filename = file:name()<br>Tab = tab()<br>Reason = term()</p></blockquote><h4 id="file2tab-2"><a href="#file2tab-2" class="headerlink" title="file2tab/2"></a>file2tab/2</h4><blockquote><p>file2tab(Filename, Options) -&gt; {ok, Tab} | {error, Reason}<br>Types:<br>Filename = file:name()<br>Tab = tab()<br>Options = [Option]<br>Option = {verify, boolean()}<br>Reason = term()</p></blockquote><p>file2tab    的option是[{verify, true|false}], 默认是false,即是否验证.当指定为true时,如果tab2file时没有指定{extended_info},则写入内存时比较大小是否一致,在ets为public或者该ets在写入的时候同时更新了数据,很容易在读入时出错,所以一般需要指定{extended_info, [object_count]},写入实际写入的大小.如果指定为{extended_info, [md5sum]},则会消耗更多的时间与cpu资源来读入.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Erlang R15B (erts-5.9) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V5.9  (abort with ^G)</span><br><span class="line">1&gt; </span><br><span class="line">1&gt; ets:new(person, [named_table]).</span><br><span class="line">person</span><br><span class="line">2&gt; ets:insert(person, &#123;name, sex, career&#125;).</span><br><span class="line">true</span><br><span class="line">3&gt; ets:all().</span><br><span class="line">[person,8207,4110,13,file_io_servers,inet_hosts_file_byaddr,</span><br><span class="line"> inet_hosts_file_byname,inet_hosts_byaddr,inet_hosts_byname,</span><br><span class="line"> inet_cache,inet_db,global_pid_ids,global_pid_names,</span><br><span class="line"> global_names_ext,global_names,global_locks,ac_tab]</span><br><span class="line">4&gt; ets:tab2file(person, &quot;person.ets&quot;).</span><br><span class="line">ok</span><br><span class="line">5&gt; ets:delete(person).</span><br><span class="line">true</span><br><span class="line">6&gt; ets:all().</span><br><span class="line">[disk_log_pids,disk_log_names,8207,4110,13,file_io_servers,</span><br><span class="line"> inet_hosts_file_byaddr,inet_hosts_file_byname,</span><br><span class="line"> inet_hosts_byaddr,inet_hosts_byname,inet_cache,inet_db,</span><br><span class="line"> global_pid_ids,global_pid_names,global_names_ext,</span><br><span class="line"> global_names,global_locks,ac_tab]</span><br><span class="line">7&gt; ets:file2tab(&quot;person.ets&quot;).</span><br><span class="line">&#123;ok,person&#125;</span><br><span class="line">8&gt; ets:all().</span><br><span class="line">[disk_log_pids,disk_log_names,person,8207,4110,13,</span><br><span class="line"> file_io_servers,inet_hosts_file_byaddr,</span><br><span class="line"> inet_hosts_file_byname,inet_hosts_byaddr,inet_hosts_byname,</span><br><span class="line"> inet_cache,inet_db,global_pid_ids,global_pid_names,</span><br><span class="line"> global_names_ext,global_names,global_locks,ac_tab]</span><br><span class="line">9&gt; ets:tab2list(person).</span><br><span class="line">[&#123;name,sex,career&#125;]</span><br><span class="line">10&gt; ets:tab2file(person, &quot;person.ets&quot;, [&#123;extended_info, [object_count]&#125;]).</span><br><span class="line">ok</span><br><span class="line">11&gt; ets:delete(person).</span><br><span class="line">true</span><br><span class="line">12&gt; ets:file2tab(&quot;person.ets&quot;,[&#123;verify, true&#125;]).</span><br><span class="line">&#123;ok,person&#125;</span><br><span class="line">13&gt; ets:tab2list(person).</span><br><span class="line">[&#123;name,sex,career&#125;]</span><br></pre></td></tr></table></figure><h4 id="first-1"><a href="#first-1" class="headerlink" title="first/1"></a>first/1</h4><blockquote><p>first(Tab) -&gt; Key | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Key = term()</p></blockquote><h4 id="last-1"><a href="#last-1" class="headerlink" title="last/1"></a>last/1</h4><blockquote><p>last(Tab) -&gt; Key | ‘$end_of_table’</p></blockquote><h4 id="next-2"><a href="#next-2" class="headerlink" title="next/2"></a>next/2</h4><blockquote><p>next(Tab, Key1) -&gt; Key2 | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Key1 = Key2 = term()</p></blockquote><h4 id="prev-2"><a href="#prev-2" class="headerlink" title="prev/2"></a>prev/2</h4><blockquote><p>prev(Tab, Key1) -&gt; Key2 | ‘$end_of_table’</p></blockquote><p>first返回ets第一个key,last返回最后一个key, 如果没有内容则返回end_of_table, 可以用next返回下一个key,prev返回上一个key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">31&gt; ets:tab2list(person).</span><br><span class="line">[&#123;4,ok&#125;,&#123;1,23&#125;,&#123;2,34&#125;]</span><br><span class="line">32&gt; ets:first(person).</span><br><span class="line">2</span><br><span class="line">33&gt; ets:next(person, 2).</span><br><span class="line">1</span><br><span class="line">34&gt; ets:next(person, 1).</span><br><span class="line">4</span><br><span class="line">35&gt; ets:next(person, 4).</span><br><span class="line">&apos;$end_of_table&apos;</span><br></pre></td></tr></table></figure></p><h4 id="foldl-3"><a href="#foldl-3" class="headerlink" title="foldl/3"></a>foldl/3</h4><blockquote><p>foldl(Function, Acc0, Tab) -&gt; Acc1<br>Types:<br>Function = fun((Element :: term(), AccIn) -&gt; AccOut)<br>Tab = tab()<br>Acc0 = Acc1 = AccIn = AccOut = term()</p></blockquote><p>内部实际调用的还是lists:foldl,根据看源码发现,首先通过ets:first找到第一个key,然后调用ets:lookup(Table, Key),找到第一个元素,此时返回的元素在一个list里面,然后对这个列表用lists:foldl,Function本身是对ets每个元素执行的,包括key.例子如下.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&gt; ets:new(double, [named_table]).</span><br><span class="line">double</span><br><span class="line">2&gt; ets:insert(double, [&#123;1, 14&#125;,&#123;2, 12&#125;, &#123;3, 23&#125;]).</span><br><span class="line">true</span><br><span class="line">3&gt; ets:tab2list(double).</span><br><span class="line">[&#123;1,14&#125;,&#123;2,12&#125;,&#123;3,23&#125;]</span><br><span class="line">4&gt; ets:foldl(fun(&#123;K, V&#125;, Acc) -&gt; [&#123;K, V * 2&#125;|Acc] end, [], double).</span><br><span class="line">[&#123;1,28&#125;,&#123;2,24&#125;,&#123;3,46&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="foldr-3"><a href="#foldr-3" class="headerlink" title="foldr/3"></a>foldr/3</h4><blockquote><p>foldr(Function, Acc0, Tab) -&gt; Acc1<br>Types:<br>Function = fun((Element :: term(), AccIn) -&gt; AccOut)<br>Tab = tab()<br>Acc0 = Acc1 = AccIn = AccOut = term()</p></blockquote><p>同foldl.</p><h4 id="give-away-3"><a href="#give-away-3" class="headerlink" title="give_away/3"></a>give_away/3</h4><p>give_away(Tab, Pid, GiftData) -&gt; true<br>Types:<br>Tab = tid() | atom()<br>Pid = pid()<br>GiftData = term()<br>类似于new的heir继承,在ets的owner进程调用,将Tab这个ets穿给Pid这个进程,传送的消息为{‘ETS-TRANSFER’,Tab,FromPid,GiftData},Pid可以receive这个消息做不同的事情.</p><h4 id="i-0-i-1"><a href="#i-0-i-1" class="headerlink" title="i/0 i/1"></a>i/0 i/1</h4><blockquote><p>i() -&gt; ok<br>i(Tab) -&gt; ok</p></blockquote><p>用于查看ets信息</p><h4 id="info-1-info-2"><a href="#info-1-info-2" class="headerlink" title="info/1 info/2"></a>info/1 info/2</h4><blockquote><p>info(Tab) -&gt; [{Item, Value}] | undefined<br>Types:<br>Tab = tid() | atom()<br>Item = atom(), see below<br>Value = term(), see below<br>info(Tab, Item) -&gt; Value | undefined<br>Types:<br>Tab = tid() | atom()<br>Item, Value - see below</p></blockquote><p>当Tab是个TableId,但是这个ets已经不存在的时候会返回undefined</p><h4 id="match-2-match-3-match-1"><a href="#match-2-match-3-match-1" class="headerlink" title="match/2 match/3 match/1"></a>match/2 match/3 match/1</h4><blockquote><p>match(Tab, Pattern) -&gt; [Match]<br>Types:<br>Tab = tid() | atom()<br>Pattern = tuple()<br>Match = [term()]</p></blockquote><blockquote><p>match(Tab, Pattern, Limit) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Pattern = tuple()<br>Match = [term()]<br>Continuation = term()</p></blockquote><blockquote><p>match(Continuation) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Match = [term()]<br>Continuation = term()</p></blockquote><p>说白了就是模式匹配,lookup只能通过key查找,而实际上面对bag类型,同样的key对应很多值,我们需要额外的添加筛选条件,所以就有了match.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3&gt; ets:new(player, [bag, named_table]).</span><br><span class="line">player</span><br><span class="line">4&gt; ets:insert(player,[&#123;player1, career1, goodsbag1&#125;,&#123;player1, career2, goodsbag2&#125;, &#123;player1, career3, goodsbag3&#125;]).</span><br><span class="line">true</span><br><span class="line">5&gt; ets:tab2list(player).</span><br><span class="line">[&#123;player1,career1,goodsbag1&#125;,</span><br><span class="line"> &#123;player1,career2,goodsbag2&#125;,</span><br><span class="line"> &#123;player1,career3,goodsbag3&#125;]</span><br><span class="line">6&gt; ets:match(player, &#123;player1, &apos;$1&apos;, goodsbag2&#125;).</span><br><span class="line">[[career2]]</span><br><span class="line">7&gt; ets:match(player, &#123;player1, &apos;$1&apos;, &apos;_&apos;&#125;).      </span><br><span class="line">[[career1],[career2],[career3]]</span><br><span class="line">8&gt; ets:match(player, &#123;&apos;_&apos;, &apos;$1&apos;, &apos;goodsbag3&apos;&#125;).</span><br><span class="line">[[career3]]</span><br></pre></td></tr></table></figure></p><p>$后面加数字用来表示想要得到的变量,’_’表示要忽略的变量.值得注意的是如果key指定的match是搞笑的,如果不指定key则需要遍历整个表,如果ets很大,则会很耗时.</p><h4 id="match-object-2-match-object-3"><a href="#match-object-2-match-object-3" class="headerlink" title="match_object/2 match_object/3"></a>match_object/2 match_object/3</h4><blockquote><p>match_object(Tab, Pattern) -&gt; [Object]<br>Types:<br>Tab = tid() | atom()<br>Pattern = Object = tuple()</p></blockquote><blockquote><p>match_object(Tab, Pattern, Limit) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Pattern = tuple()<br>Match = [term()]<br>Continuation = term()</p></blockquote><blockquote><p>match_object(Continuation) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Match = [term()]<br>Continuation = term()</p></blockquote><p>与match一样,只不过这个返回的是整个object,而不是$所指定的值</p><h4 id="init-table-2"><a href="#init-table-2" class="headerlink" title="init_table/2"></a>init_table/2</h4><blockquote><p>init_table(Tab, InitFun) -&gt; true<br>Types:<br>Tab = tab()<br>InitFun = fun((Arg) -&gt; Res)<br>Arg = read | close<br>Res = end_of_input | {Objects :: [term()], InitFun} | term()</p></blockquote><p> 官方doc上面说</p><blockquote><p>This function is provided for compatibility with the dets module, it is not more efficient than filling a table by using ets:insert/2</p></blockquote><p>我们可以看出这个是为了和dets兼容才提供了这个接口,其实效率不比insert高,<br>InitFun是个fun函数,这个函数接受read和close这两个传入值, 返回结果如Res所示,如 fun(read) -&gt; end_of_input end. 其实这个函数的文档写的有些语焉不详,我们还是可以通过官方代码直到具体什么意思.<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> init_table<span class="params">(Tab, InitFun)</span> -&gt; 'true' when</span><br><span class="line">      Tab :: tab<span class="params">()</span>,</span><br><span class="line">      InitFun :: fun<span class="params">((Arg)</span> -&gt; Res),</span><br><span class="line">      Arg :: 'read' | 'close',</span><br><span class="line">      Res :: 'end_of_input' | &#123;Objects :: [term<span class="params">()</span>], InitFun&#125; | term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init_table</span><span class="params">(Table, Fun)</span> -&gt;</span></span><br><span class="line">    ets:delete_all_objects(Table),</span><br><span class="line">    init_table_continue(Table, Fun(read)).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init_table_continue</span><span class="params">(_Table, end_of_input)</span> -&gt;</span></span><br><span class="line">    <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="title">init_table_continue</span><span class="params">(Table, &#123;List, Fun&#125;)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span>, <span class="title">is_function</span><span class="params">(Fun)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">catch</span> init_table_sub(Table, List)) <span class="keyword">of</span></span><br><span class="line">&#123;'EXIT', Reason&#125; -&gt;</span><br><span class="line">    (<span class="keyword">catch</span> Fun(close)),</span><br><span class="line">    exit(Reason);</span><br><span class="line"><span class="literal">true</span> -&gt;</span><br><span class="line">    init_table_continue(Table, Fun(read))</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">init_table_continue</span><span class="params">(_Table, Error)</span> -&gt;</span></span><br><span class="line">    exit(Error).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init_table_sub</span><span class="params">(_Table, [])</span> -&gt;</span></span><br><span class="line">    <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="title">init_table_sub</span><span class="params">(Table, [H|T])</span> -&gt;</span></span><br><span class="line">    ets:insert(Table, H),</span><br><span class="line">    init_table_sub(Table, T).</span><br></pre></td></tr></table></figure></p><p>可以看出首先用delete_all_objects删掉了之前ets的数据,之后在init_table_sub中分别插入List中的元素,在调用List,之后的initfun,遇到end_of_input为止. j<br>举个简单的例子<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>&gt; ets:new(test, [named_table]).</span><br><span class="line">test</span><br><span class="line"><span class="number">22</span>&gt; ets:insert(test, &#123;test1, result1&#125;).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">23</span>&gt; ets:tab2list(test).</span><br><span class="line">[&#123;test1,result1&#125;]</span><br><span class="line"><span class="number">24</span>&gt; ets:init_table(test, <span class="keyword">fun</span>(read) -&gt; &#123;[&#123;test2, result2&#125;,&#123;test3, result3&#125;], <span class="keyword">fun</span>(read) -&gt; <span class="keyword">end</span>_of_input end&#125; <span class="keyword">end</span>).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">25</span>&gt; ets:tab2list(test).</span><br><span class="line">[&#123;test3,result3&#125;,&#123;test2,result2&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="member-2"><a href="#member-2" class="headerlink" title="member/2"></a>member/2</h4><blockquote><p>member(Tab, Key) -&gt; true | false</p></blockquote><p>如果key在Tab中有值则返回true,否则false</p><h4 id="rename-2"><a href="#rename-2" class="headerlink" title="rename/2"></a>rename/2</h4><blockquote><p>rename(Tab, Name) -&gt; Name</p></blockquote><p>重命名一个table,只对有名字的table有效</p><h4 id="safe-fixtable-2"><a href="#safe-fixtable-2" class="headerlink" title="safe_fixtable/2"></a>safe_fixtable/2</h4><blockquote><p>safe_fixtable(Tab, true|false) -&gt; true</p></blockquote><p>当一个进程对某个ets用了safe_fixtable(Tab, true)后,这个进程对这个ets的first和next操作的key只返回没有返回过的key,也就是说ets表中的每个key只返回一次,为什么这么说呢.我们知道ordered_set中的key是排好序的,只要不停的next,肯定会得到更大的key,加入删除了之前一个较小的key,那么再次插入时,也不过next到这个key,但是set,bag表不是,有可能在next的过程中,如果有别的进程删除了你之前遍历过的key,之后在插入,将有可能再次next到这个key,safe_fixtable的作用就是对每个结果只返回一次,这个在游戏中对线上玩家列表的操作有一定作用,ets的官方文档中的foldl等也用到了.</p><blockquote><p>Note that no deleted objects are actually removed from a fixed table until it has been released. If a process fixes a table but never releases it, the memory used by the deleted objects will never be freed. The performance of operations on the table will also degrade significantly.</p></blockquote><p>值得注意的是在有进程对ets fixtable的情况对ets中数据的删除并没有真正的删除,直到这个进程死掉或者释放掉safe_fixtable为止,此时对ets的操作效率将显著降低, 所以尽量少用ets:foldl.<br>可参考:<a href="http://stackoverflow.com/questions/20327171/etsfoldl-vs-deleted-elements/20338795#20338795" target="_blank" rel="noopener">http://stackoverflow.com/questions/20327171/etsfoldl-vs-deleted-elements/20338795#20338795</a></p><h4 id="setopts-2"><a href="#setopts-2" class="headerlink" title="setopts/2"></a>setopts/2</h4><blockquote><p>setopts(Tab, Opts) -&gt; true</p></blockquote><p>opts只能是[{heir,pid(),HeirData} | {heir,none}],用于在table创建后修改继承选项,只能由table的owner调用</p><h4 id="update-counter-3"><a href="#update-counter-3" class="headerlink" title="update_counter/3"></a>update_counter/3</h4><blockquote><p>update_counter(Tab, Key, UpdateOp) -&gt; Result<br>update_counter(Tab, Key, [UpdateOp]) -&gt; [Result]<br>update_counter(Tab, Key, Incr) -&gt; Result<br>Types:<br>Tab = tid() | atom()<br>Key = term()<br>UpdateOp = {Pos,Incr} | {Pos,Incr,Threshold,SetValue}<br>Pos = Incr = Threshold = SetValue = Result = integer()</p></blockquote><p>更新ets中的数据,省去从ets去数据,相加在存入这个流程, Threshold是阈值,根据incr的正负,当结果大于或小于阈值时,将值设为SetValue.<br><strong><em>只能用于set和ordered_set</em></strong><br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>&gt; ets:new(test, [named_table]).</span><br><span class="line">test</span><br><span class="line"><span class="number">4</span>&gt; </span><br><span class="line"><span class="number">4</span>&gt; ets:insert(test,[&#123;one, <span class="number">1</span>&#125;,&#123;two, <span class="number">2</span>&#125;,&#123;three, <span class="number">3</span>&#125;,&#123;four, <span class="number">4</span>&#125;]).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">5</span>&gt; ets:update_counter(test, one, <span class="number">1</span>). </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span>&gt; ets:tab2list(test).</span><br><span class="line">[&#123;two,<span class="number">2</span>&#125;,&#123;three,<span class="number">3</span>&#125;,&#123;one,<span class="number">2</span>&#125;,&#123;four,<span class="number">4</span>&#125;]</span><br><span class="line"><span class="number">7</span>&gt; ets:insert(test,&#123;five, haha, <span class="number">5</span>&#125;).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">8</span>&gt; ets:update_counter(test, five, &#123;<span class="number">3</span>, <span class="number">1</span>&#125;).</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span>&gt; ets:tab2list(test).</span><br><span class="line">[&#123;two,<span class="number">2</span>&#125;,&#123;five,haha,<span class="number">6</span>&#125;,&#123;three,<span class="number">3</span>&#125;,&#123;one,<span class="number">2</span>&#125;,&#123;four,<span class="number">4</span>&#125;]</span><br><span class="line"><span class="number">10</span>&gt; ets:update_counter(test, five, &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>&#125;).</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">11</span>&gt; ets:tab2list(test).</span><br><span class="line">[&#123;two,<span class="number">2</span>&#125;,&#123;five,haha,<span class="number">5</span>&#125;,&#123;three,<span class="number">3</span>&#125;,&#123;one,<span class="number">2</span>&#125;,&#123;four,<span class="number">4</span>&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="update-element-3"><a href="#update-element-3" class="headerlink" title="update_element/3"></a>update_element/3</h4><blockquote><p>update_element(Tab, Key, {Pos,Value}) -&gt; true | false<br>update_element(Tab, Key, [{Pos,Value}]) -&gt; true | false<br>Types:<br>Tab = tid() | atom()<br>Key = Value = term()<br>Pos = integer()</p></blockquote><p>大致跟上面一样,未找到Key会返回false.</p><h3 id="所有关于match-specification"><a href="#所有关于match-specification" class="headerlink" title="所有关于match specification"></a>所有关于match specification</h3><p>下面的函数都有用到MatchSpec这个数据类型，<br>定义见: [doc]: (<a href="http://www.erlang.org/doc/apps/erts/match_spec.html)" target="_blank" rel="noopener">http://www.erlang.org/doc/apps/erts/match_spec.html)</a>.<br>match specification用于更为复杂的匹配情况,可以用于ets和erlang:trace_pattern中,一个ms的具体例子可能如下</p><p><img src="../../../../img/ets1.png" alt=""></p><p>乍看之下是非常难懂的,抽象一下大致是这个样子<br>[{InitialPattern1, Guards1, ReturnedValue1},<br>{InitialPattern2, Guards2, ReturnedValue2}].<br>上面的{‘$1’,’$2’,&lt;<1>&gt;,’$3’,’$4’}是InitialPattern, [{‘andalso’,{‘&gt;’,’$4’,150},{‘&lt;’,’$4’,500}},<br>{‘orelse’,{‘==’,’$2’,meat},{‘==’,’$2’,dairy}}]和[{‘&lt;’,’$3’,4.0},{is_float,’$3’}]是Guards1和Guards2,[‘$1’]是returnedvalue.</1></p><p>InitialPattern是将变量绑定到具体的$数字上,然后通过guard,得到returnvalue.<br>Guard的语序是{FunctionOrOperator, Arg1, …, ArgN},’andalso’ ‘orelse’和’&lt;’等属于FunctionorOperator,后面的是参数.<br>{‘andalso’,{‘&gt;’,’$4’,150},{‘&lt;’,’$4’,500}}翻译过来就是 when $4 &gt; 150 andalso $4 &lt; 500.<br>如果满足这个Guard就返回$1.</p><p>当然让我们去写这样一个match是很不符合人类的发展的,所以我们要用到下面的函数</p><h4 id="fun2ms-1"><a href="#fun2ms-1" class="headerlink" title="fun2ms/1"></a>fun2ms/1</h4><blockquote><p>fun2ms(LiteralFun) -&gt; MatchSpec<br>Types:<br>LiteralFun = function()<br>MatchSpec = match_spec()<br>这个函数将我们熟悉的fun函数转换成match specification的形式,这个转换过程由ms_transform完成,<br>需要在模块开头加上<br><strong><em>-include_lib(“stdlib/include/ms_transform.hrl”).</em></strong><br>需要注意的是fun的参数只有一个,只能是一个变量或者一个tuple不能使list等,不能使bit流.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt; ets:fun2ms(fun(X) when X &gt; 10 -&gt; X end).   </span><br><span class="line">[&#123;&apos;$1&apos;,[&#123;&apos;&gt;&apos;,&apos;$1&apos;,10&#125;],[&apos;$1&apos;]&#125;]</span><br><span class="line">2&gt; ets:fun2ms(fun(&#123;X, Y&#125;) when X &gt; 10, Y &lt; 20 -&gt; X * Y end).</span><br><span class="line">[&#123;&#123;&apos;$1&apos;,&apos;$2&apos;&#125;,</span><br><span class="line">  [&#123;&apos;&gt;&apos;,&apos;$1&apos;,10&#125;,&#123;&apos;&lt;&apos;,&apos;$2&apos;,20&#125;],</span><br><span class="line">  [&#123;&apos;*&apos;,&apos;$1&apos;,&apos;$2&apos;&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>ms的在ets中的主要作用是用在select语句中,达到类似于mysql中select的效果</p><h4 id="select-1-2-3"><a href="#select-1-2-3" class="headerlink" title="select/1/2/3"></a>select/1/2/3</h4><blockquote><p>select(Tab, MatchSpec) -&gt; [Match]<br>select(Tab, MatchSpec, Limit) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>select(Continuation) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Match = term()<br>MatchSpec = match_spec()<br>Continuation = term()</p></blockquote><p>select/2将所有符合MatchSpec的结果返回，select/3制定了limit。返回的Continuation可以用在select/1中。为何这么做？官方说明是</p><blockquote><p>This is a space efficient way to work on objects in a table which is still faster than traversing the table object by object using ets:first/1 and ets:next/1.</p></blockquote><p>这样节省空间，同时比用first，next更加快。<br>下面的例子是在player表中有两个#player结构的数据。一个返回的是10010这个id的玩家，之后调用select(C)将第二个10011玩家玩家返回同时返回end of table。如果将end of table传入select会直接返回end of table。</p><p><img src="../../../../img/ets2.png" alt=""></p><p>learn you some erlang书中的例子，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">11&gt; rd(food, &#123;name, calories, price, group&#125;).</span><br><span class="line">food</span><br><span class="line">12&gt; ets:new(food, [ordered_set, &#123;keypos,#food.name&#125;, named_table]).</span><br><span class="line">food</span><br><span class="line">13&gt; ets:insert(food, [#food&#123;name=salmon, calories=88, price=4.00, group=meat&#125;,</span><br><span class="line">13&gt; #food&#123;name=cereals, calories=178, price=2.79, group=bread&#125;,</span><br><span class="line">13&gt; #food&#123;name=milk, calories=150, price=3.23, group=dairy&#125;,</span><br><span class="line">13&gt; #food&#123;name=cake, calories=650, price=7.21, group=delicious&#125;,</span><br><span class="line">13&gt; #food&#123;name=bacon, calories=800, price=6.32, group=meat&#125;,</span><br><span class="line">13&gt; #food&#123;name=sandwich, calories=550, price=5.78, group=whatever&#125;]).</span><br><span class="line">true</span><br><span class="line">14&gt; ets:select(food, ets:fun2ms(fun(N = #food&#123;calories=C&#125;) when C &lt; 600 -&gt; N end)).</span><br><span class="line">[#food&#123;name = cereals,calories = 178,price = 2.79,group = bread&#125;,</span><br><span class="line">#food&#123;name = milk,calories = 150,price = 3.23,group = dairy&#125;,</span><br><span class="line">#food&#123;name = salmon,calories = 88,price = 4.0,group = meat&#125;,</span><br><span class="line">#food&#123;name = sandwich,calories = 550,price = 5.78,group = whatever&#125;]</span><br><span class="line">15&gt; ets:select_reverse(food, ets:fun2ms(fun(N = #food&#123;calories=C&#125;) when C &lt; 600 -&gt; N end)).</span><br><span class="line">[#food&#123;name = sandwich,calories = 550,price = 5.78,group = whatever&#125;,</span><br><span class="line">#food&#123;name = salmon,calories = 88,price = 4.0,group = meat&#125;,</span><br><span class="line">#food&#123;name = milk,calories = 150,price = 3.23,group = dairy&#125;,</span><br><span class="line">#food&#123;name = cereals,calories = 178,price = 2.79,group = bread&#125;]</span><br></pre></td></tr></table></figure></p><p> 同时在官方doc的ms_transform中有个多个子句的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ets:select(emp_tab, ets:fun2ms(</span><br><span class="line">                     fun(#emp&#123;empno = E, surname = &quot;Smith&quot; &#125;) -&gt;</span><br><span class="line">                             &#123;guru,E&#125;;</span><br><span class="line">                        (#emp&#123;empno = E, empyear = Y&#125;) when Y &lt; 1997  -&gt;</span><br><span class="line">                             &#123;inventory, E&#125;;</span><br><span class="line">                        (#emp&#123;empno = E, empyear = Y&#125;) when Y &gt; 2001  -&gt;</span><br><span class="line">                             &#123;newbie, E&#125;;</span><br><span class="line">                        (#emp&#123;empno = E, empyear = Y&#125;) -&gt; % 1997 -- 2001</span><br><span class="line">                             &#123;rookie, E&#125;</span><br><span class="line">                     end)).</span><br></pre></td></tr></table></figure><h4 id="select-count-2"><a href="#select-count-2" class="headerlink" title="select_count/2"></a>select_count/2</h4><blockquote><p>select_count(Tab, MatchSpec) -&gt; NumMatched<br>Types:<br>Tab = tid() | atom()<br>Object = tuple()<br>MatchSpec = match_spec()<br>NumMatched = integer()<br>对MS返回为true的会计数。如下，得出player表中id大于0的玩家数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ets:select_count(player, ets:fun2ms(fun(#player&#123;id = ID&#125;) -&gt; ID &gt; 0  end)).    </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="select-delete-2"><a href="#select-delete-2" class="headerlink" title="select_delete/2"></a>select_delete/2</h4><blockquote><p>select_delete(Tab, MatchSpec) -&gt; NumDeleted<br>Types:<br>Tab = tid() | atom()<br>Object = tuple()<br>MatchSpec = match_spec()<br>NumDeleted = integer()</p></blockquote><p>大致同count，将返回true的object从表中删掉。</p><h4 id="select-reverse-1-2-3"><a href="#select-reverse-1-2-3" class="headerlink" title="select_reverse/1/2/3"></a>select_reverse/1/2/3</h4><blockquote><p>select_reverse(Tab, MatchSpec) -&gt; [Match]<br>Types:<br>Tab = tid() | atom()<br>Match = term()<br>MatchSpec = match_spec()<br>select_reverse(Tab, MatchSpec, Limit) -&gt; {[Match],Continuation} | ‘$end_of_table’<br>Types:<br>Tab = tid() | atom()<br>Match = term()<br>MatchSpec = match_spec()<br>Continuation = term()<br>select_reverse(Tab, MatchSpec) -&gt; [Match]<br>Types:<br>Tab = tid() | atom()<br>Match = term()<br>MatchSpec = match_spec()</p></blockquote><p>与只不过将select的结果反序，对order_set表有效，其他类型的表与select返回结果一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1&gt; T = ets:new(x,[ordered_set]).</span><br><span class="line">2&gt; [ ets:insert(T,&#123;N&#125;) || N &lt;- lists:seq(1,10) ].</span><br><span class="line">...</span><br><span class="line">3&gt; &#123;R0,C0&#125; = ets:select_reverse(T,[&#123;&apos;_&apos;,[],[&apos;$_&apos;]&#125;],4).</span><br><span class="line">...</span><br><span class="line">4&gt; R0.</span><br><span class="line">[&#123;10&#125;,&#123;9&#125;,&#123;8&#125;,&#123;7&#125;]</span><br><span class="line">5&gt; &#123;R1,C1&#125; = ets:select_reverse(C0).</span><br><span class="line">...</span><br><span class="line">6&gt; R1.</span><br><span class="line">[&#123;6&#125;,&#123;5&#125;,&#123;4&#125;,&#123;3&#125;]</span><br><span class="line">7&gt; &#123;R2,C2&#125; = ets:select_reverse(C1).</span><br><span class="line">...</span><br><span class="line">8&gt; R2.</span><br><span class="line">[&#123;2&#125;,&#123;1&#125;]</span><br><span class="line">9&gt; &apos;$end_of_table&apos; = ets:select_reverse(C2).</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="match-spec-compile-1"><a href="#match-spec-compile-1" class="headerlink" title="match_spec_compile/1"></a>match_spec_compile/1</h4><h4 id="match-spec-run-2"><a href="#match-spec-run-2" class="headerlink" title="match_spec_run/2"></a>match_spec_run/2</h4><h4 id="is-compiled-ms-1"><a href="#is-compiled-ms-1" class="headerlink" title="is_compiled_ms/1"></a>is_compiled_ms/1</h4><blockquote><p>match_spec_compile(MatchSpec) -&gt; CompiledMatchSpec<br>Types:<br>MatchSpec = match_spec()<br>CompiledMatchSpec = comp_match_spec()<br>match_spec_run(List,CompiledMatchSpec) -&gt; list()<br>Types:<br>List = [ tuple() ]<br>CompiledMatchSpec = comp_match_spec()<br>is_compiled_ms(Term) -&gt; boolean()<br>Types:<br>Term = term()</p></blockquote><p>match_spec_compile将一个MS编译成一个不可见的内部形式供match_spec_run调用，is_compile_ms用来判断这个编译结果是否是个正确的编译，因为编译后的内部形式不能再节点间传递也不能储存在硬盘上。<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ets:is_compiled_ms(ets:match_spec_compile([&#123;&apos;_&apos;,[],[true]&#125;])).</span><br></pre></td></tr></table></figure></p><p>返回的是true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MS = ets:match_spec_compile([&#123;&apos;_&apos;,[],[true]&#125;]),</span><br><span class="line">Broken = binary_to_term(term_to_binary(MS)),</span><br><span class="line">ets:is_compiled_ms(Broken).</span><br></pre></td></tr></table></figure></p><p>返回的是false，因为不接受外部的转化。会使其失去原有的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MatchSpec = ets:fun2ms(fun(&#123;M, N&#125;) when N &gt; 3 -&gt; M end),</span><br><span class="line">CompiledMatchSpec = ets:match_spec_compile(MatchSpec),</span><br><span class="line">List = [&#123;1, 2&#125;, &#123;3, 4&#125;, &#123;5, 6&#125;],</span><br><span class="line">ets:match_spec_run(List, CompiledMatchSpec).</span><br></pre></td></tr></table></figure></p><p>如果MatchSpec不是个合格的Ms会抛badarg的错误。</p><h4 id="repair-continuation-2"><a href="#repair-continuation-2" class="headerlink" title="repair_continuation/2"></a>repair_continuation/2</h4><blockquote><p>repair_continuation(Continuation, MatchSpec) -&gt; Continuation<br>Types:<br>Continuation = continuation()<br>MatchSpec = match_spec()</p></blockquote><p>用来修复select/3返回的continuation，如果continuation在被转化为外部形势（用来在节点间传递)，会失效，但是使用repair_continuation可以恢复。<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%% 无效</span><br><span class="line">T=ets:new(x,[]),</span><br><span class="line">&#123;_,C&#125; = ets:select(T,ets:fun2ms(fun(&#123;N,_&#125;=A)</span><br><span class="line">when (N rem 10) =:= 0 -&gt;</span><br><span class="line">A</span><br><span class="line">end),10),</span><br><span class="line">Broken = binary_to_term(term_to_binary(C)),</span><br><span class="line">ets:select(Broken).</span><br><span class="line"></span><br><span class="line">%% 有效</span><br><span class="line">T=ets:new(x,[]),</span><br><span class="line">MS = ets:fun2ms(fun(&#123;N,_&#125;=A)</span><br><span class="line">when (N rem 10) =:= 0 -&gt;</span><br><span class="line">A</span><br><span class="line">end),</span><br><span class="line">&#123;_,C&#125; = ets:select(T,MS,10),</span><br><span class="line">Broken = binary_to_term(term_to_binary(C)),</span><br><span class="line">ets:select(ets:repair_continuation(Broken,MS)).</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>工作五个月后</title>
    <link href="http://youthyblog.com/2014/10/13/%E5%B7%A5%E4%BD%9C%E4%BA%94%E4%B8%AA%E6%9C%88%E5%90%8E/"/>
    <id>http://youthyblog.com/2014/10/13/工作五个月后/</id>
    <published>2014-10-13T13:18:05.000Z</published>
    <updated>2018-10-17T03:28:39.095Z</updated>
    
    <content type="html"><![CDATA[<p>今天天气实在妩媚妖娆,人的心情也会变得很好,很早之前看过一句话,不要在这种天气出去玩,因为很可能你会爱上对面走来的任何人.<br><a id="more"></a></p><p> 时至今日工作差不多五个月了,三个月试用期,两个月正式员工,从没想到这么快就永远的和学生身份say goodbye,昨天和几个大学同学吃了自助,玩了几个小时桌游,很开心,这种机会是在太难得了~~因为我总是在加班,哇啊啊啊啊%&gt;<em>&lt;%,他们大体没什么变化,这样也好,年轻最好.<br> 吃完饭后有个女生临走拿个苹果,那苹果外边很鲜艳,我一时想到了我高中时经常买这种水果,外表鲜艳,里面却时有腐烂,都是药剂催的,于是我没经大脑的bulabula讲:”这种水果虽然看起来好看,但是里面各种……我高中时…”,然后那个女生满脸黑线,说”你能别说了么-</em>-||”旁边的小伙伴笑了出来,吐槽我怪不得找不到女朋友,我一向是很瞧不起这种情商低的行为的,没想到,哎..”岁月就像一把无情刻刀,改变了我模样~ (泪奔”</p><p>  9月过的很是拮据,因为我和小伙伴的笔记本被偷了,攒了台式,然后给爸妈一人弄了个手机,还是智能机,尽管他们不懂,也不需要,但是我还是希望他们不被时代所抛弃,给他们弄了微信,安了点软件,希望他们能多学就多学一点.不然真的很孤独.然后又买了台ps3,圆了我很久以来的一个梦想,曾经那遥不可及,高不可攀的主机领域,终于触摸到了,在之后我更加体会到一点,当我有时间时没有金钱支付,当我有能力支付时,却没了时间,想起了之前很火的一个图片,那个韩国人穿着boss创业的图片,里面说的真的很对”你现在就要幸福,不要等未来,现在就要”.</p><p>  学习方面最近陷入了瓶颈,平常工作上的已经很快就能完成了,但是感觉还不够深入,陷入了重复的过程,每天做的事情学不到新东西.然后又没有时间研究更底层的代码.因为我还有很多游戏没有玩–.真捉急.<br>  有时也挺佩服我自己,已经不知道多少天2,3点睡觉了,精力很旺盛,白天也不怎么困.难道是因为童子身??想起月初我哥结婚,我回去碰到了我小学两个同学,聊起来女朋友,我说我没有女朋友,他们竟然嘲笑”你不会还是处男吧?”我了个大擦,MB!很久之前我看爱情公寓时,里面胡一菲嘲笑曾小贤处男,我还觉得纳闷,处男有什么可嘲笑的,没想到我很快就被同等对待,我突然感到这个世界充满了恶意…我的世界观也受到重创…</p><p>  上面算是小吐槽,最近我意识到自己可能多巴胺水平比较低,越来越容易多愁善感,曾经幻想自己是持剑的骑士,为了我的命中注定的女人与世界为敌,曾幻想投身商海,玩弄权术心机,坐拥大笔财富,然而实际上自己也为了生活,奔波在刚刚涨价的地铁线上,曾经对自己说你不能成为齿轮那样的人,而最后像故事所说成了自己小时候所讨厌的人,血已经凉了.一个人的力量是在太过渺小,微不足道.地球为何存在,人类为何特殊,不过是偶然罢了.我们先存在于世,然后为了显得不像他人那样盲目,总得给自己找个活着的意义,然而终究不会有什么分别.</p><p>  昨天买了个跑步机,先锻炼锻炼身体吧,希望有时间再拿起放在角落里的吉他,寻找曾经让我热血的事情.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天天气实在妩媚妖娆,人的心情也会变得很好,很早之前看过一句话,不要在这种天气出去玩,因为很可能你会爱上对面走来的任何人.&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://youthyblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://youthyblog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>youthy的番剧历史(持续补全中)</title>
    <link href="http://youthyblog.com/2014/09/18/youthy%E7%9A%84%E7%95%AA%E5%89%A7%E5%8E%86%E5%8F%B2/"/>
    <id>http://youthyblog.com/2014/09/18/youthy的番剧历史/</id>
    <published>2014-09-17T16:17:19.000Z</published>
    <updated>2018-10-17T08:46:23.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直都有想法想把看过的番剧列一个表,我会慢慢想起看过的番剧,然后在这里补全,写一些自己的评价,以供回忆</p></blockquote><a id="more"></a><!-- toc --><h2 id="2014-年"><a href="#2014-年" class="headerlink" title="2014 年"></a>2014 年</h2><p><strong> —————————9月18日更新————————————–</strong></p><h4 id="少女革命-★★★★★"><a href="#少女革命-★★★★★" class="headerlink" title="少女革命 ★★★★★"></a>少女革命 ★★★★★</h4><blockquote><p>90年代3大OTAKU神作之一,以少女寻找王子的故事线表现女权的解放与抗争,少女的自我救赎,主旨上与今年的迪士尼的冰雪女王一样,很多表现手法很超前,甚至觉得有些梗真不像是90年代的,不得不佩服几原老贼的超前思想.</p></blockquote><h4 id="月刊少女野崎君-★★★★★"><a href="#月刊少女野崎君-★★★★★" class="headerlink" title="月刊少女野崎君 ★★★★★"></a>月刊少女野崎君 ★★★★★</h4><blockquote><p>典型的少女漫画般的开场,色调浪漫,少女表白,以为是一部校园恋情剧你就输了,实际上是部搞笑剧,女主意外的萌,男主无口且木讷.几位配角刻画非常成功,不是典型的校园剧,很难得</p></blockquote><h4 id="生存游戏部-★★★★★"><a href="#生存游戏部-★★★★★" class="headerlink" title="生存游戏部 ★★★★★"></a>生存游戏部 ★★★★★</h4><blockquote><p>这个月新番也就认真追了生存游戏部和月刊少女,两部在我看来都很有突破,生存游戏部女主也不是按正常套路出牌,内心比较黑暗,在善与恶的选择中肯定会选择恶的人格.而且很搞笑.</p></blockquote><h4 id="舞-hime-★★★★☆"><a href="#舞-hime-★★★★☆" class="headerlink" title="舞-hime ★★★★☆"></a>舞-hime ★★★★☆</h4><blockquote><p>补了部老番,冲着静夏去的.貌似对有点东京口音或者大阪口音的声优有种莫名的喜欢-.-</p></blockquote><p><strong> —————————7月29日更新————————————–</strong></p><h4 id="kill-la-kill-斩服少女-★★★★★"><a href="#kill-la-kill-斩服少女-★★★★★" class="headerlink" title="kill la kill (斩服少女)    ★★★★★"></a>kill la kill (斩服少女)    ★★★★★</h4><p><img src="../../../../img/killlakill.jpg" width="40%" height="40%"></p><blockquote><p>十分推荐,热血,超展开,世界观奇特(衣服和人类的战斗,啊–剧透了),百合,bgm燃,有泽野大神和小林未郁的合作</p></blockquote><h4 id="目隐都市的演绎者-★★★★★"><a href="#目隐都市的演绎者-★★★★★" class="headerlink" title="目隐都市的演绎者    ★★★★★"></a>目隐都市的演绎者    ★★★★★</h4><p><img src="../../../../img/yangyan.jpg" alt=""></p><blockquote><p>很cool的动漫,风格很像物语系列,画风我很喜欢,剧情也不错,前几集完全不明白剧情,看完之后似懂非懂,不是那种看开头就猜到结尾的类型,新房独特的意识流作画方式,还有各种45°角,各种我有姿势我自豪的表现手法,可以说作品很有特色.音乐简直好赞,ed是国歌演唱者Lia唱的,很好听,op更别说,配合各种彩喷画,目隐团集体兜帽衫,真的cool到爆.各种插入曲也很好听,这部作品音乐方面也是上乘之作.喜欢物语系列的一定要看</p></blockquote><h4 id="Love-Live-第一季-第二季-★★★★☆"><a href="#Love-Live-第一季-第二季-★★★★☆" class="headerlink" title="Love Live 第一季/第二季  ★★★★☆"></a>Love Live 第一季/第二季  ★★★★☆</h4><p><img src="../../../../img/lovelive.jpg" alt=""></p><blockquote><p>lovelive可以说是一款很现象级的作品,手游月流水将近过亿,第二季首周BD销量8w+,上海地铁都有lovelive的包装,这些现象其实与动画的质量是不相称的,其实我在补完两季动画后觉得这动画真的不算神作或者上乘之作,它火的背后其实有很多原因可以探讨,包括企划,宣传什么的,就动画本身而言,塑造了9个性格不同的角色,吸引不同的人群,每次看弹幕都会看到”niconico美如画””我姬美如画”之类的.我都觉得烦,也看不出美在哪里,音乐方面我到现在想不起什么印象深刻的歌,只记得配角组A-rise的歌很好听,远不是当初轻音no thank you,listen,don’t say lazy, 相遇天使,带我给我的深刻印象.love live第一季的时候还没有这么火,第二季没出之前网上就各种宣传LL大法,只能说LL力量大,企划宣传好,人民群众喜闻乐见的跟风态度.</p></blockquote><p><strong> —————————7月29日更新————————————–</strong></p><h4 id="悠哉日常大王-★★★★"><a href="#悠哉日常大王-★★★★" class="headerlink" title="悠哉日常大王 ★★★★"></a>悠哉日常大王 ★★★★</h4><blockquote><p>画质真心很好，风景亮丽，画面党表示很满足，nano.ripe清新的op也很符合我胃口，这部剧诞生了风靡一时的台词“喵帕斯～”，这个台词在动漫里真的很萌，作为一部极其了萝莉，痴女，万年受，炮姐，永远没有台词的神一样的哥哥的日常番，很适合休闲的时候补下。</p></blockquote><h4 id="噬魂师Not-★★★"><a href="#噬魂师Not-★★★" class="headerlink" title="噬魂师Not  ★★★"></a>噬魂师Not  ★★★</h4><blockquote><p>虽然我不是原著党，原著噬魂师我只看了几集。（原著很好，只看了几集是因为一直没时间补），但是仍然想吐槽下这部剧，卖着百合的题材，又到处埋雷是要闹哪样啊喂～而且画质真是不忍直视，这都14年了是在有些觉得粗糙，还没当初噬魂师给我的感觉好。最后还有几集没看完，回头补上。</p></blockquote><h4 id="虫师-序章-★★★★★☆"><a href="#虫师-序章-★★★★★☆" class="headerlink" title="虫师 序章  ★★★★★☆"></a>虫师 序章  ★★★★★☆</h4><blockquote><p>时隔10年,虫师果然没有让人失望,它携带着固有的迷离之音,戴着氤氲的雾气,回到荧屏,片头曲一如既往的让人陶醉,演唱者的声线有点像王若琳,略有成熟,沙哑的感觉.配音依然惯用前作的风格,就像在耳边真实回响,充满生活感.画面不用多说,而且依然是一集一个ED,每首都很好听.我一直觉得任何续作都很大程度上会远远比上作差,尤其虫师这种高质量的动画,实际上没有,是在让我感到欣慰与感动.</p></blockquote><h4 id="请问您今天要来点兔子吗-★★★☆"><a href="#请问您今天要来点兔子吗-★★★☆" class="headerlink" title="请问您今天要来点兔子吗  ★★★☆"></a>请问您今天要来点兔子吗  ★★★☆</h4><blockquote><p>普普通通的卖萌番,话说居然有爷爷变成兔子的设定,兔子那么萌,一想到是爷爷顿时都觉得略有X父的感脚…</p></blockquote><h4 id="恶魔之谜-★★★☆"><a href="#恶魔之谜-★★★☆" class="headerlink" title="恶魔之谜 ★★★☆"></a>恶魔之谜 ★★★☆</h4><p><img src="../../../../img/emozhimi.jpg" alt=""></p><blockquote><p>本来看画面还不错的.但是剧情实在是无趣,打起来也很没有杀手的样子,而且官方各种把漫画的经典百合镜头省掉了.真想给官方寄刀片.不过cp组什么的在p站还是挺火的.</p></blockquote><h4 id="天才麻将少女全国篇-★★★★★"><a href="#天才麻将少女全国篇-★★★★★" class="headerlink" title="天才麻将少女全国篇 ★★★★★"></a>天才麻将少女全国篇 ★★★★★</h4><p><img src="../../../../img/tiancaimajiangshaonv.jpg" width="50%" height="50%"></p><blockquote><p>基本上是国民级动漫了..知名度很高,基本上全是女生,各种超燃的打麻将方式,各种暧昧的女生友情,简称外挂百合少女.(图片:看我大魔王把你们这些渣渣pia飞~)</p></blockquote><h4 id="妄想学生会第二季-★★★★☆"><a href="#妄想学生会第二季-★★★★☆" class="headerlink" title="妄想学生会第二季 ★★★★☆"></a>妄想学生会第二季 ★★★★☆</h4><p><img src="../../../../img/wangxiangxueshenghui.png" alt=""></p><blockquote><p>从没想到曾经轻音里害羞的mio酱,开朗的律队,在这里摇身一变,成了满口黄笑话的学生会长和副会长..男主的存在纯粹是为了吐槽会长的黄笑话…第二季开头画质惊人,漫天飘舞的粉色樱花仿佛告诉你这是一个充满青春气息的校园爱情短篇,然而阳子会用面不改色的讲黄笑话的方式打你的脸.俗称黄段子学生会.</p></blockquote><h4 id="中二病也要谈恋爱第二季★★★★☆"><a href="#中二病也要谈恋爱第二季★★★★☆" class="headerlink" title="中二病也要谈恋爱第二季★★★★☆"></a>中二病也要谈恋爱第二季★★★★☆</h4><blockquote><p>其实中二病异常的火爆我也不太明白,作为早已远离后宫番的我,森凸是我唯一坚持下去的动力..森大人在角色歌里和第一季ed里面的御姐声线是在太迷人了.不过京都一如既往的高画质水准让中二场景展开时的画面很是惊艳.福山润鲁鲁修的声线也是我看下去的动力把.抛出后宫在我心中的不良印象,这部番还是不错的.</p></blockquote><h4 id="樱Trick★★★★"><a href="#樱Trick★★★★" class="headerlink" title="樱Trick★★★★"></a>樱Trick★★★★</h4><blockquote><p>第一集的时候看到满弹幕的”我好兴奋”,着实吃了一惊,芳文社作为百合社真是业界良心,第一集就送上各种赤裸裸的接吻镜头,还有呻吟声….不过作为日常来说,我觉得最重要的不是搞笑就是治愈,而这部我感觉有些太赤裸导致的对各种镜头都无感了. </p></blockquote><h4 id="境界的彼方★★★"><a href="#境界的彼方★★★" class="headerlink" title="境界的彼方★★★"></a>境界的彼方★★★</h4><blockquote><p>我不明白为何当初这部番那么火,出了一贯的高清画质,没有什么可圈可点的地方,难道是因为眼镜控众多?⊙﹏⊙b汗.<br>唯一吸引我的也就是有意思的大阪口音和茅原实里的配音了.哎,对这种整天”我不高兴”的口癖仿佛可以加上去般的生硬的女主,是在提不起兴趣.</p></blockquote><h4 id="弹丸论破之希望的学园和绝望高中生★★★★☆"><a href="#弹丸论破之希望的学园和绝望高中生★★★★☆" class="headerlink" title="弹丸论破之希望的学园和绝望高中生★★★★☆"></a>弹丸论破之希望的学园和绝望高中生★★★★☆</h4><p><img src="../../../../img/danwanlunpo.jpg" alt=""></p><blockquote><p>弹丸论破是部不错的动漫,根据游戏改编,其实剧情什么的也就那样,主要是风格与众不同,有点当初看海猫鸣泣之时的感觉,有些游戏里的设定显得与众不同,而且画风也很忠于游戏,熊校长也算是风极一时的角色了.到处可见.而且开头音乐风格简直32个赞.一般动画很少有这种风格.值得一看</p></blockquote><h4 id="蔷薇少女第三季★★★★"><a href="#蔷薇少女第三季★★★★" class="headerlink" title="蔷薇少女第三季★★★★"></a>蔷薇少女第三季★★★★</h4><blockquote><p>还没看完,作为看过前两季的人来说第三季来的好晚好晚,都已经把之前的剧情忘得差不多了.不过惊喜的当然是画质随着时代的进步终于不再是av画质了.加入了平行世界的情节,感觉比以前好看了,但是怎么感觉少女们怎么有点变小了..</p></blockquote><h4 id="黄金拼图★★★★"><a href="#黄金拼图★★★★" class="headerlink" title="黄金拼图★★★★"></a>黄金拼图★★★★</h4><blockquote><p>俗称黄图,其实这么叫很容易误解成肉番,实质上是个轻百合,还好当初忍过了第一集,因为第一集描写小时候的画风实在是难以忍受,之后长大后突然画风就好了..最近要出第二季了,准备看看.</p></blockquote><h2 id="2014-年以前—–-gt"><a href="#2014-年以前—–-gt" class="headerlink" title="2014 年以前—–&gt;"></a>2014 年以前—–&gt;</h2><hr><h4 id="虫师-★★★★★☆"><a href="#虫师-★★★★★☆" class="headerlink" title="虫师       ★★★★★☆"></a>虫师       ★★★★★☆</h4><blockquote><p>大概在大二暑假补了虫师,虫师是个典型的阳春白雪的类型,我一直把&lt;夏目友人帐&gt;当作下里巴人,并不是多贬低夏目,而是觉得和虫师比起来确实很有这种强烈的对比感,夏目是个大众治愈系,被推荐的太多,而它给我的感觉就是很多故事都很幼稚,刻画也不如虫师那般细腻而又绵绵无声,虫师的有三:其一是音乐,在bangumi的音乐排行上虫师排在第二,它每集的ed都不一样,而且每首都给人以打入感,十分空灵而又优美,契合虫师的妖怪世界.第二:背景画,虫师的人物不是很美形,但是习惯了就觉得有韵味,背景确是十分大气,优美,时常有游走在水墨画的感觉,而且当时负责背景的是一家中国外包公司,很有中国风的味道.放张图你们感受下<br><img src="http://youthy-picture.qiniudn.com/857KT6C351H90003.jpg" alt=""><br>最后是配音.虫师的声优大都不是很出名,但是就是感觉这个声音非常适合这个角色,而且里面的小孩都是找的真实的小孩配的音,不是专业声优,有时你会感觉他们说话是如此的真实.总之虫师是治愈系的良作.</p></blockquote><h4 id="叛逆的鲁路修-★★★★"><a href="#叛逆的鲁路修-★★★★" class="headerlink" title="叛逆的鲁路修      ★★★★"></a>叛逆的鲁路修      ★★★★</h4><blockquote><p>高中时鲁路修很火,可是我对机甲类实在不感冒,直到大二才补了这部,当时从早上一直看到凌晨3点,看了鲁路修第一部和第二部前7集,我也不知道为什么停不下来,就是很让人想知道接下来的发展.</p></blockquote><h4 id="魔法少女小圆-★★★★★"><a href="#魔法少女小圆-★★★★★" class="headerlink" title="魔法少女小圆   ★★★★★"></a>魔法少女小圆   ★★★★★</h4><p><img src="../../../../img/xiaoyuan.jpg" width="50%" height="50%"></p><blockquote><p>百合启蒙作,在被晓美焰对圆神执着的付出的感动下我走上了不归路…也就是这部剧奠定了神剧标准:第三集开始死人–小圆的题材是很古老的马猴烧酒题材,然后老虚不愧是老虚,把这个快要拍烂的题材拍出了一样的哲学,整部剧围绕着付出,牺牲,时间,循环.沙耶香为了上条定下了契约,她的愿望是为了他而许,然而之后的绝望让她堕落为魔女,而杏子为此内疚,一心想要唤醒沙耶香,甚至为此与沙耶香同归于尽.黑长直更不用说了,为了阻止小圆重蹈魔法少女们的悲剧,她在时间中孤独的行走,孤独的战斗.从一开始我就想要知道,黑长直为什么这么专一的对待小圆,他们之间发生了什么,究竟小圆什么时候才能成为魔法少女,直到最后一集老虚才给我答案…当时看完是夜里3点,为剧情不能自已.小圆的成绩有目共睹,13年新篇剧场版狂卷20亿日元,而这个成绩只有宫崎骏和几部还有口袋妖怪和机器猫那些好多年前的动画电影可以超过,这个数字对于13集的番剧已成神话.</p></blockquote><h4 id="凉宫春日的忧郁-★★★★"><a href="#凉宫春日的忧郁-★★★★" class="headerlink" title="凉宫春日的忧郁    ★★★★"></a>凉宫春日的忧郁    ★★★★</h4><blockquote><p>在二次元众很多人喊着要脱团，这个团最初就是指凉宫春日所见的SOS团，这是个神奇的动漫，本来我以为只是个普通的吐槽番，结果然让我一看就一发不可收拾。我也不明白为何当时就找了迷一样一口气看完20多集，而且之后又去补了漫画，补了只有网络放送的小剧场。就是看起来让人很想看下去。剧场版凉宫春日的消失当时也是缔造了票房神话，而且制作水准很高。总之很值得一看。</p></blockquote><h4 id="日常-★★★★★★"><a href="#日常-★★★★★★" class="headerlink" title="日常  ★★★★★★"></a>日常  ★★★★★★</h4><blockquote><p>占位</p></blockquote><h4 id="男子高中生的日常-★★★"><a href="#男子高中生的日常-★★★" class="headerlink" title="男子高中生的日常 ★★★"></a>男子高中生的日常 ★★★</h4><blockquote><p>当初看这个纯粹是出于他有日常这两个字，除了第一集给我点惊喜外，之后我就感觉很普通了，可能是由于日常的影响在，我甚至觉得这个想要模仿日常可能没模仿好，毕竟男孩子没有女孩子可爱嘛（pia～飞）。</p></blockquote><h4 id="黑礁-★★★★"><a href="#黑礁-★★★★" class="headerlink" title="黑礁 ★★★★"></a>黑礁 ★★★★</h4><p><img src="../../../../img/heijiao.jpg" alt=""></p><blockquote><p>黑礁已经有3季了，如果不是同类较优秀的作品是不会有3季的。军火题材，女主莱维是中国人，非常帅气，（对拿枪械的美女没有抵抗力啊～～～）有时经常会蹦出些有哲理的台词。音乐很好听。</p></blockquote><h4 id="未闻花名-★★★★"><a href="#未闻花名-★★★★" class="headerlink" title="未闻花名 ★★★★"></a>未闻花名 ★★★★</h4><blockquote><p>画面制作水准很高，讲述从孩童一直到高中时代的朋友间的羁绊。虽然我觉得剧情很幼稚，甚至有些无脑粉的行为让我觉得很无聊，但是在最后一集还是流泪了。音乐给动画增了不少分，每集结尾的ed插入的非常好。</p></blockquote><h4 id="命运石之门-★★★★★"><a href="#命运石之门-★★★★★" class="headerlink" title="命运石之门 ★★★★★"></a>命运石之门 ★★★★★</h4><p><img src="../../../../img/mingyunshizhimen.jpg" width="80%" height="80%"></p><blockquote><p> 终于轮到讲我大命运石之门了，什么?图片上为什么没有凶真？要什么凶真！<br>有我大助手就够了！！好吧，开玩笑。说实话，命运石之门真的是很优秀的作品，由游戏改编，有良好的剧本支撑。这也许是个慢热的作品，刚开始面对凶真中二的不能更中二的行为，也许有些觉得无厘头，但是之后你会慢慢的随着剧情扣紧心心弦，看着凶真不断地在时间跳跃中想要拯救“嘟嘟噜”，但是一次又一次失败，还好，无论在哪个世界，助手的头脑都可以很快的理解并帮助他，这也是纠结所在，最后得知只有在助手死后的世界中“嘟嘟噜”才能活下来，一个是青梅竹马，一个是头脑与自己相当的知音，得力助手，谁都难以抉择..最后助手与凶真的擦身而过，画面更是仍人心动。情节扣人心弦，音乐脍炙人口，人物深得人心，这就是命运石之门，让我们高喊“EL Phy Congroo！！”</p></blockquote><h4 id="钢之炼金术师FA"><a href="#钢之炼金术师FA" class="headerlink" title="钢之炼金术师FA"></a>钢之炼金术师FA</h4><blockquote><p>占位</p></blockquote><h4 id="全金属狂潮第二季-★★★★★"><a href="#全金属狂潮第二季-★★★★★" class="headerlink" title="全金属狂潮第二季     ★★★★★"></a>全金属狂潮第二季     ★★★★★</h4><blockquote><p>我只看了全金属狂潮的第二季，因为当初是为了找搞笑番看的，这个是个番外，与正统剧情基本没啥关系，发生在校园里，画风比较老，但是论搞笑程度来说，只能说它绝对值五颗星。</p></blockquote><h4 id="超元气三姐妹-★★★★★"><a href="#超元气三姐妹-★★★★★" class="headerlink" title="超元气三姐妹  ★★★★★"></a>超元气三姐妹  ★★★★★</h4><blockquote><p>又称 “超色情三姐妹”，真的是部很神奇的片子。。。。主角都是类似幼稚园的小学生，有整天拿着小黄书看的老三，有力大无穷的天然呆老大，有坏心眼的老二，有画风与众不同的爸爸，有整天带着“69”帽子的小色鬼，还有略显无能的班主任，这部真的很值得一看，因为实在是很好笑～也很H（有那么一点啦）</p></blockquote><h4 id="南家三姐妹-★★★★"><a href="#南家三姐妹-★★★★" class="headerlink" title="南家三姐妹 ★★★★"></a>南家三姐妹 ★★★★</h4><blockquote><p>南家三姐妹去年貌似出的第四季。三个姐妹的声优都是美女，而且都是现声优界的一把手。剧情就是高中，初中，小学三个姐妹的日常生活，大姐负责吸引人妻控，二姐是个元气妹，三妹是个腹黑的萝莉。作为个生活日常番质量还是很高的。</p></blockquote><h4 id="某科学的超电磁炮-★★★★★"><a href="#某科学的超电磁炮-★★★★★" class="headerlink" title="某科学的超电磁炮 ★★★★★"></a>某科学的超电磁炮 ★★★★★</h4><p><img src="../../../../img/chaodiancipao.gif" alt=""></p><blockquote><p>作为为数不多的番外比本片更好看的动漫,炮姐算是很典型的一例,我入B站较晚,4年前才直到B站,也不清楚是炮姐带红了B站还是B站让炮姐在国内火了.剧情爽快,不拖拉,任务个性鲜明,值得一看. </p></blockquote><h4 id="某科学的超电磁炮S-★★★★"><a href="#某科学的超电磁炮S-★★★★" class="headerlink" title="某科学的超电磁炮S ★★★★"></a>某科学的超电磁炮S ★★★★</h4><blockquote><p>扣了1星,因为第二季,当妈的戏份太多了!!!到处施展把妹之手,尤其是打了一方通行的脸,让我彻底坚信炮姐已经抛弃了黑子,好替黑子伤心&gt;_&lt;.剧情还延续前作的风格,不过炮姐与克隆妹妹之间的互动着实非常有爱,有其抢瓜太徽章的时候,很搞笑,可以说妹妹们为第二季添了不少色彩.</p></blockquote><h4 id="Fate-Zero-★★★★★☆"><a href="#Fate-Zero-★★★★★☆" class="headerlink" title="Fate/Zero  ★★★★★☆"></a>Fate/Zero  ★★★★★☆</h4><p><img src="../../../../img/fatezero.jpg" alt=""></p><blockquote><p>绝对的大制作,大手笔,画面特效什么的十分精致,而且有老虚坐镇,剧情肯定不是普通日常番能比,唯一觉得遗憾的就是老虚把zero表现的过于倾向于战争了.感情戏份很少,没有想staynight结尾时的saber安静的站在山顶的那种温馨感人的画面.不过仍然是上等之作.</p></blockquote><h4 id="Fate-stay-night-★★★★★"><a href="#Fate-stay-night-★★★★★" class="headerlink" title="Fate stay night  ★★★★★"></a>Fate stay night  ★★★★★</h4><blockquote><p>唯一的缺点看来也就是时代所不可避免的画质了吧,至今仍然忘不了结局时吾王在湖边醒来那有点睡眼惺忪又有点望穿一切的眼神,以及站在山顶,一个360度旋转的镜头,真的非常美好.</p></blockquote><h4 id="龙与虎-★★★★"><a href="#龙与虎-★★★★" class="headerlink" title="龙与虎 ★★★★"></a>龙与虎 ★★★★</h4><blockquote><p>龙与虎很多人都喜欢,可能不是很和我胃口,我对校园爱情剧不是特别感冒,而且对卷毛萝莉提不起什么兴趣,反倒举得实乃梨这种元气妹应该和男主在一起,或者蓝毛御姐,总觉得tigar还太小…没到谈婚论嫁的年龄..</p></blockquote><h4 id="幸运星-★★★★★"><a href="#幸运星-★★★★★" class="headerlink" title="幸运星 ★★★★★"></a>幸运星 ★★★★★</h4><blockquote><p>幸运星的剧情实在是想不起来了,⊙﹏⊙b汗,本来就是日常番,其实也没什么剧情可言,不过当初觉得很好看就是了..</p></blockquote><h4 id="一起一起-这里那里-★★★★"><a href="#一起一起-这里那里-★★★★" class="headerlink" title="一起一起,这里那里 ★★★★"></a>一起一起,这里那里 ★★★★</h4><p><img src="../../../../img/yiqiyiqi.gif" alt=""><br><img src="../../../../img/yiqiyiqi2.gif" alt=""></p><blockquote><p>和幸运星放在了一起,因为人设实在很像,而且也很有爱,动漫的名字都可以看出来就是萌+有爱.</p></blockquote><h4 id="白兔糖-★★★★"><a href="#白兔糖-★★★★" class="headerlink" title="白兔糖 ★★★★"></a>白兔糖 ★★★★</h4><p><img src="../../../../img/baitutang.jpg" alt=""></p><blockquote><p>孤儿萝莉和单身老男人的生活?动画还算是个治愈系,写的就是小萝莉是老男人的爷爷与年轻女仆的私生女,爷爷去世了,女仆一时消失,面临无人抚养的时候,30岁的老男人挑起了抚养她的担子,写的很贴近生活,很朴素.而且有电影版,主演还是死亡笔记的L松山健一.动画是小萝莉小时候的事,据说漫画之后发展成父嫁了..汗.</p></blockquote><h4 id="寒蝉鸣泣之时-★★★★"><a href="#寒蝉鸣泣之时-★★★★" class="headerlink" title="寒蝉鸣泣之时 ★★★★"></a>寒蝉鸣泣之时 ★★★★</h4><blockquote><p>喜欢寒蝉的人也挺多的.我只看了一季,也就只看了迷,而没有看解,所以发生了什么还是云里雾里.就是个男主不断做错误的抉择而被杀死,而又从新读档,再被杀死的故事….根据游戏改编的.</p></blockquote><h4 id="玉子市场-★★★★"><a href="#玉子市场-★★★★" class="headerlink" title="玉子市场  ★★★★"></a>玉子市场  ★★★★</h4><blockquote><p>其实没什么特别的.主要是主任在片中各种卖萌捧场,普通的日常番.本来还挺期待小绿和玉子的cp,结果官方都透露无情的bg结局.哎,看了一季,准备弃了.</p></blockquote><h4 id="我女友与青梅竹马的惨烈修罗场-★★★★"><a href="#我女友与青梅竹马的惨烈修罗场-★★★★" class="headerlink" title="我女友与青梅竹马的惨烈修罗场 ★★★★"></a>我女友与青梅竹马的惨烈修罗场 ★★★★</h4><blockquote><p>很明显的后宫番,我也纳闷年轻的自己竟然能看得下去后宫番,大概因为斋藤千和和田村打大魔王作为主役声优把.<br>还好,男主是有实力的人,而不是无脑男主坐拥一大堆后宫.还可以接受.</p></blockquote><h4 id="青之驱魔师-★☆"><a href="#青之驱魔师-★☆" class="headerlink" title="青之驱魔师 ★☆"></a>青之驱魔师 ★☆</h4><blockquote><p>我实在是很想吐槽这个番，当初是因为看了corepride的现场live才去补的这个动漫，实在是太渣了！！自古渣片出燃曲，白瞎了corepride这么燃个歌了。剧情简直有够了，没有什么吸引力，主要是难住太气人了，我看着都难受啊～哪有这么笨，这么不会说话，这么没大脑的男主！！哎，想起来就来气，剧情一般就算了，主要是男主有够白痴，让我一点都不想看下去。就这样了，继续走百合路线吧。。。</p></blockquote><p>(未完…)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直都有想法想把看过的番剧列一个表,我会慢慢想起看过的番剧,然后在这里补全,写一些自己的评价,以供回忆&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ACG" scheme="http://youthyblog.com/categories/ACG/"/>
    
    
      <category term="ACG" scheme="http://youthyblog.com/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>erlang有关效率的一些limit</title>
    <link href="http://youthyblog.com/2014/08/05/erlang%E6%9C%89%E5%85%B3%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%BA%9Blimit/"/>
    <id>http://youthyblog.com/2014/08/05/erlang有关效率的一些limit/</id>
    <published>2014-08-05T12:57:32.000Z</published>
    <updated>2018-10-17T08:46:23.200Z</updated>
    
    <content type="html"><![CDATA[<p> Erlang Efficiency Guide</p><p>###1. 数据类型的空间消耗<br> 基本单位: word<br> 在32位架构中占32位,即4bytes<br> 在64位架构中占64位,即8bytes</p><a id="more"></a><table><thead><tr><th>data type</th><th style="text-align:left">memory cost</th></tr></thead><tbody><tr><td>small integer</td><td style="text-align:left">1 word :</td></tr><tr><td></td><td style="text-align:left">On 32-bit architectures: -134217729 &lt; i &lt; 134217728 (28 bits)</td></tr><tr><td></td><td style="text-align:left">On 64-bit architectures: -576460752303423489 &lt; i &lt; 576460752303423488 (60 bits)</td></tr><tr><td>big integer</td><td style="text-align:left">3..N words</td></tr><tr><td>Atom</td><td style="text-align:left">1 word :值得注意的是原子储存在一个原子表中,这个原子表同样耗空间,而且不会被回收</td></tr><tr><td>float</td><td style="text-align:left">On 32-bit architectures: 4 words / On 64-bit architectures: 3 words</td></tr><tr><td>binary</td><td style="text-align:left">3..6 + data (can be shared)</td></tr><tr><td>list</td><td style="text-align:left">1word + 每个元素分配一个word + 每个元素的大小</td></tr><tr><td>String</td><td style="text-align:left">1word + 每个元素分配两个word,同list 只不过每个元素的大小就是一个word</td></tr><tr><td>Tuple</td><td style="text-align:left">2words + 每个元素的大小</td></tr><tr><td>Pid</td><td style="text-align:left">本地节点一个word,其他节点5 words. 另外 port table node table 都耗空间</td></tr><tr><td>reference</td><td style="text-align:left">32位:本地节点5 word ,其他节点7 word 64位:本地4word  其他地方6word</td></tr><tr><td>Fun</td><td style="text-align:left">9..13 words + size of environment :fun table also cost momery</td></tr><tr><td>ets</td><td style="text-align:left">初始时需要768 words + 为每个元素分配该元素的的大小加6words</td></tr><tr><td>process</td><td style="text-align:left">327 words when spawned including a heap of 233 words.</td></tr></tbody></table><blockquote><p><strong>Note</strong> : integer 为什么少了4个bits?我去stackoverflow上问了问,大致是用来判断类型的,这4个bits用来区别list,tuple,pid 等等.而32,64位架构指的是你的编译系统,可以在启动erlang的时候看到<br><code>Erlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]</code><br>我的erlang环境没有显示,但是用<code>erlang:system_info(wordsize)</code>看出,如果为4就是4bytes即32bits如果为8就是64bits</p></blockquote><p>所以能用atom就用atom,别用string.</p><p>###2.system limit</p><h4 id="Process-limit"><a href="#Process-limit" class="headerlink" title="Process limit"></a>Process limit</h4><p>erlang运行时系统默认进程的上限是32768,可以通过erl +P NUMBER 提高到一定数量,NUMBER最高为268435456,即2^28(28 bits).<br>可以通过<code>erlang:system_info(process_limit)</code>查看当前系统的进程数上限</p><h4 id="atom-limit"><a href="#atom-limit" class="headerlink" title="atom limit"></a>atom limit</h4><ul><li>一个原子最多由255 个字符构成</li><li>atom最多为2^20个, 即 1048576个,可以通过erl +t NUMBER 增加或者降低,暂时还不清楚能增加到多少,doc上没说</li></ul><h4 id="ets-limit"><a href="#ets-limit" class="headerlink" title="ets limit"></a>ets limit</h4><p>最多为1400个,可以通过修改ERL_MAX_ETS_TABLES环境变量提高</p><h4 id="element-in-tuple"><a href="#element-in-tuple" class="headerlink" title="element in tuple"></a>element in tuple</h4><p>元组中的元素最多为2^26 即67108863个,但是由于memory的限制,一般达不到这么多.</p><h4 id="size-of-binary"><a href="#size-of-binary" class="headerlink" title="size of binary"></a>size of binary</h4><p>32位环境中,binary最大不能超过2^29(536870911),64位中不能超过2^61</p><h4 id="node-name"><a href="#node-name" class="headerlink" title="node name"></a>node name</h4><p>因为是atom 所以不能超过255个character</p><h4 id="open-port"><a href="#open-port" class="headerlink" title="open port"></a>open port</h4><p>默认最多为1024, 可以通过修改ERL_MAX_PORTS到2^28</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>最多为255</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Erlang Efficiency Guide&lt;/p&gt;
&lt;p&gt;###1. 数据类型的空间消耗&lt;br&gt; 基本单位: word&lt;br&gt; 在32位架构中占32位,即4bytes&lt;br&gt; 在64位架构中占64位,即8bytes&lt;/p&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
  <entry>
    <title>linux修改键盘映射capslock为ctrl</title>
    <link href="http://youthyblog.com/2014/07/12/linux%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84/"/>
    <id>http://youthyblog.com/2014/07/12/linux修改键盘映射/</id>
    <published>2014-07-12T14:36:35.000Z</published>
    <updated>2018-10-17T08:46:23.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于在vim下需要经常使用ctrl键，比如ctrl+]在tags之间跳，ctrl+v进入列可视模式等等，但是由于ctrl键按起来比较麻烦<br>所以一般将capslock映射为ctrl。</p></blockquote><a id="more"></a><p>需要xmodmap支持</p><p>首先，安装xmodmap</p><blockquote><p>sudo apt-get install xmodmap</p></blockquote><p>如果提示没有则安装</p><blockquote><p>sudo apt-get install x11-xserver-utils</p></blockquote><p>之后在自己的工作目录home里新建一个.xmodmaprc的文件，<br>里面键入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Control_L</span><br><span class="line">add Control = Control_L</span><br></pre></td></tr></table></figure></p><p>保存。</p><p>在shell里面cd到xmodmaprc所在目录执行</p><blockquote><p> xmodmap .xmodmaprc</p></blockquote><p>使映射生效。</p><p>如不生效注销一下应该就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于在vim下需要经常使用ctrl键，比如ctrl+]在tags之间跳，ctrl+v进入列可视模式等等，但是由于ctrl键按起来比较麻烦&lt;br&gt;所以一般将capslock映射为ctrl。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="http://youthyblog.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://youthyblog.com/tags/linux/"/>
    
      <category term="vim" scheme="http://youthyblog.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Erlang中的lists模块</title>
    <link href="http://youthyblog.com/2014/07/11/Erlang%E4%B8%AD%E7%9A%84lists%E6%A8%A1%E5%9D%97/"/>
    <id>http://youthyblog.com/2014/07/11/Erlang中的lists模块/</id>
    <published>2014-07-11T13:13:31.000Z</published>
    <updated>2018-10-17T08:46:23.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>个人感觉erlang里面lists模块用的地方非常多,因为erlang中没有for循环,很多函数功能多是靠lists的map,filter或者列表解析完成的,所以lists里面的函数非常重要</p></blockquote><a id="more"></a><!-- toc --><h3 id="all-2"><a href="#all-2" class="headerlink" title="all/2"></a>all/2</h3><blockquote><p>all(Func, List) -&gt; boolean()</p></blockquote><p>如果全员执行Func都返回true,则这个表达式返回true,否则返回false.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>&gt; lists:all(<span class="keyword">fun</span>(X) -&gt; is_integer(X) <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">3</span>&gt; lists:all(<span class="keyword">fun</span>(X) -&gt; is_integer(X) <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"haha"</span>,<span class="number">4</span>]).</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="any-2"><a href="#any-2" class="headerlink" title="any/2"></a>any/2</h3><blockquote><p>any(Pred, List) -&gt; boolean()</p></blockquote><p>与all大致相同,如果有任意一个List中的元素返回true,则any返回true.</p><h3 id="append-1"><a href="#append-1" class="headerlink" title="append/1"></a>append/1</h3><blockquote><p>append(ListOfLists) -&gt; List1</p></blockquote><p>用于合并子列表,列表中元素最起码要有一层深度,而且append只能去掉一层的深度,如果子元素没有深度,就会抛错<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>&gt; lists:append([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>],[<span class="number">2</span>]]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">7</span>&gt; lists:append([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>],[[<span class="number">1</span>,[<span class="number">3</span>,<span class="number">2</span>]],<span class="number">2</span>]]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,[<span class="number">1</span>,[<span class="number">3</span>,<span class="number">2</span>]],<span class="number">2</span>]</span><br><span class="line"><span class="number">8</span>&gt; lists:append([<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>]]).</span><br><span class="line">** exception error: bad argument</span><br><span class="line">     in operator  ++/<span class="number">2</span></span><br><span class="line">        called as <span class="number">1</span> ++ [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">     in call from lists:append/<span class="number">1</span> (lists.erl, line <span class="number">74</span>)</span><br></pre></td></tr></table></figure></p><p>因为在append的源码是:</p><blockquote><p>73 append([E]) -&gt; E;<br>  74 append([H|T]) -&gt; H ++ append(T);<br>  75 append([]) -&gt; []. </p></blockquote><p>所以上面说 <code>++</code>附近出错,因为1不是列表.</p><h3 id="append-2"><a href="#append-2" class="headerlink" title="append/2"></a>append/2</h3><blockquote><p>append(List1, List2) -&gt; List3</p></blockquote><p>源码</p><blockquote><p> append(L1, L2) -&gt; L1 ++ L2.</p></blockquote><p>用于合并两个列表,其实append实质就是++,所以需要注意效率,因为++是将左边的列表都一遍,因此在递归中要始终保持左边的列表要是最短的那个.<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>&gt; lists:append(<span class="string">"haha"</span>,<span class="string">"heihei"</span>).</span><br><span class="line"><span class="string">"hahaheihei"</span></span><br></pre></td></tr></table></figure></p><h3 id="concat-1"><a href="#concat-1" class="headerlink" title="concat/1"></a>concat/1</h3><blockquote><p>concat([Things]) -&gt; string()</p></blockquote><p>Things可以使integer,float,atom,string, concat将他们转换成一个字符串,如果Things中含有list,可能会整体装换成list.<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10&gt; lists:concat([&quot;haha&quot;,[1],3,3.14,atom]).</span><br><span class="line">[104,97,104,97,1,51,51,46,49,52,48,48,48,48,48,48,48,48,48,</span><br><span class="line"> 48,48,48,48,49,50,52,51,52,101|...]</span><br><span class="line">11&gt; lists:concat([&quot;haha&quot;,3,3.14,atom]).    </span><br><span class="line">&quot;haha33.14000000000000012434e+00atom&quot;</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">concat</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    flatmap(fun thing_to_list/1, List).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">thing_to_list</span><span class="params">(X)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(X)</span> -&gt;</span> integer_to_list(X);</span><br><span class="line"><span class="function"><span class="title">thing_to_list</span><span class="params">(X)</span> <span class="title">when</span> <span class="title">is_float</span><span class="params">(X)</span>   -&gt;</span> float_to_list(X);</span><br><span class="line"><span class="function"><span class="title">thing_to_list</span><span class="params">(X)</span> <span class="title">when</span> <span class="title">is_atom</span><span class="params">(X)</span>    -&gt;</span> atom_to_list(X);</span><br><span class="line"><span class="function"><span class="title">thing_to_list</span><span class="params">(X)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(X)</span>    -&gt;</span> X.<span class="comment">%Assumed to be a string</span></span><br></pre></td></tr></table></figure></p><h3 id="delete-2"><a href="#delete-2" class="headerlink" title="delete/2"></a>delete/2</h3><blockquote><p>delete(Elem, List) -&gt; List1</p></blockquote><p>删除List中第一个等于Elem的元素,返回一个新的list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12&gt; lists:delete(1,[1,2,1,3,4]).</span><br><span class="line">[2,1,3,4]</span><br></pre></td></tr></table></figure></p><h3 id="dropwhile-2"><a href="#dropwhile-2" class="headerlink" title="dropwhile/2"></a>dropwhile/2</h3><blockquote><p>dropwhile(Func, List) -&gt; List1</p></blockquote><p>从左边开始去掉List中Func返回值为true的元素,遇到第一个返回false的元素时终止,并返回剩下列表.<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16&gt; lists:dropwhile(fun(X) -&gt; X rem 2 =:= 0  end, [2,4,3,5,6]).  </span><br><span class="line">[3,5,6]</span><br></pre></td></tr></table></figure></p><p>源码实现:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dropwhile</span><span class="params">(Pred, [Hd|Tail]=Rest)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Pred(Hd) <span class="keyword">of</span></span><br><span class="line"><span class="literal">true</span> -&gt; dropwhile(Pred, Tail);</span><br><span class="line"><span class="literal">false</span> -&gt; Rest</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">dropwhile</span><span class="params">(Pred, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="duplicate-2"><a href="#duplicate-2" class="headerlink" title="duplicate/2"></a>duplicate/2</h3><blockquote><p>duplicate(N, Elem) -&gt; List.</p></blockquote><p>生成N个Elem的列表.N不能使负数.原因可以看源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> duplicate<span class="params">(N, Elem)</span> -&gt; List when</span><br><span class="line">      N :: non_neg_integer<span class="params">()</span>,</span><br><span class="line">      Elem :: T,</span><br><span class="line">      List :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">duplicate</span><span class="params">(N, X)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(N)</span>, N &gt;= 0 -&gt;</span> duplicate(N, X, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">duplicate</span><span class="params">(<span class="number">0</span>, _, L)</span> -&gt;</span> L;</span><br><span class="line"><span class="function"><span class="title">duplicate</span><span class="params">(N, X, L)</span> -&gt;</span> duplicate(N-<span class="number">1</span>, X, [X|L]).</span><br></pre></td></tr></table></figure></p><p>原理就是用列表构造,没添加一个H,N就-1,终止条件就是直到N=0,如果是负数则无法终止,所以不能为负<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17&gt; lists:duplicate(3,&quot;haha&quot;).</span><br><span class="line">[&quot;haha&quot;,&quot;haha&quot;,&quot;haha&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="filter-2"><a href="#filter-2" class="headerlink" title="filter/2"></a>filter/2</h3><blockquote><p>filter(Func, List) -&gt; List1</p></blockquote><p>过滤器,返回列表,元素是List中所有Func返回值为true的元素.这个在工程中经常用.<br>源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> filter<span class="params">(Pred, List1)</span> -&gt; List2 when</span><br><span class="line">      Pred :: fun<span class="params">((Elem :: T)</span> -&gt; boolean<span class="params">()</span>),</span><br><span class="line">      List1 :: [T],</span><br><span class="line">      List2 :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">filter</span><span class="params">(Pred, List)</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span></span><br><span class="line">    [ E || E &lt;- List, Pred(E) ].</span><br></pre></td></tr></table></figure></p><p>可以看到,filter内部其实就是用列表解析实现的.<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">19&gt; lists:filter(fun(X) -&gt; X rem 2 =:= 0 end, [2,4,3,5,6]).</span><br><span class="line">[2,4,6]</span><br></pre></td></tr></table></figure></p><h3 id="flatlength-1"><a href="#flatlength-1" class="headerlink" title="flatlength/1"></a>flatlength/1</h3><blockquote><p>flatlength(DeepList) -&gt; integer</p></blockquote><p>该函数返回一个深度列表的长度,如果是深度为1的列表可以直接用length(List)返回长度,<br>官方doc这么说的</p><blockquote><p>Equivalent to length(flatten(DeepList)), but more efficient.</p></blockquote><p>等同于深度列表扁平化后在length,但是这个做更搞笑,原因很简单,这个函数只不过计算长度,并没有将列表扁平化<br>源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> flatlength<span class="params">(DeepList)</span> -&gt; non_neg_integer<span class="params">()</span> when</span><br><span class="line">      DeepList :: [term<span class="params">()</span> | DeepList].</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">flatlength</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    flatlength(List, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">flatlength</span><span class="params">([H|T], L)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(H)</span> -&gt;</span></span><br><span class="line">    flatlength(H, flatlength(T, L));</span><br><span class="line"><span class="function"><span class="title">flatlength</span><span class="params">([_|T], L)</span> -&gt;</span></span><br><span class="line">    flatlength(T, L + <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="title">flatlength</span><span class="params">([], L)</span> -&gt;</span> L.</span><br></pre></td></tr></table></figure></p><p>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lists:flatlength([<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>],<span class="number">4</span>,[<span class="number">5</span>],<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]).</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><h3 id="flatten-1"><a href="#flatten-1" class="headerlink" title="flatten/1"></a>flatten/1</h3><blockquote><p>flatten(Deeplist) -&gt; List</p></blockquote><p>上面提到的flatten函数,用于扁平化一个深度列表,尽量少用,代价很高,甚至比++操作代价还高<br>源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> flatten<span class="params">(DeepList)</span> -&gt; List when</span><br><span class="line">      DeepList :: [term<span class="params">()</span> | DeepList],</span><br><span class="line">      List :: [term<span class="params">()</span>].</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">flatten</span><span class="params">(List)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    do_flatten(List, []).</span><br><span class="line"></span><br><span class="line"><span class="keyword">-spec</span> flatten<span class="params">(DeepList, Tail)</span> -&gt; List when</span><br><span class="line">      DeepList :: [term<span class="params">()</span> | DeepList],</span><br><span class="line">      Tail :: [term<span class="params">()</span>],</span><br><span class="line">      List :: [term<span class="params">()</span>].</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">flatten</span><span class="params">(List, Tail)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span>, <span class="title">is_list</span><span class="params">(Tail)</span> -&gt;</span></span><br><span class="line">    do_flatten(List, Tail).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_flatten</span><span class="params">([H|T], Tail)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(H)</span> -&gt;</span></span><br><span class="line">    do_flatten(H, do_flatten(T, Tail));</span><br><span class="line"><span class="function"><span class="title">do_flatten</span><span class="params">([H|T], Tail)</span> -&gt;</span></span><br><span class="line">    [H|do_flatten(T, Tail)];</span><br><span class="line"><span class="function"><span class="title">do_flatten</span><span class="params">([], Tail)</span> -&gt;</span></span><br><span class="line">    Tail.</span><br></pre></td></tr></table></figure></p><p>在递归中为了伪递归,如果第一个元素是list就递归调用do_flatten,如果不是就用构造器放在新列表的头,剩下的部分继续调用do_flatten.<br><strong>关于flatten的效率问题</strong><br>在官方doc的efficiency guide中有专门一块Deep and flat lists,<br>原文这么说</p><blockquote><p>lists:flatten/1 builds an entirely new list. Therefore, it is expensive, and even more expensive than the ++ (which copies its left argument, but not its right argument).<br>In the following situations, you can easily avoid calling lists:flatten/1:</p><ol><li>When sending data to a port. Ports understand deep lists so there is no reason to flatten the list before sending it to the port.</li><li>When calling BIFs that accept deep lists, such as list_to_binary/1 or iolist_to_binary/1.</li><li>When you know that your list is only one level deep, you can can use lists:append/1.</li></ol></blockquote><p>因为flatten是完全重建一个列表,甚至比++(复制左边,而右边保留)更为低效,但是有3种情况可以不适用flatten</p><ol><li>往端口发送数据时,因为端口懂得深度列表</li><li><p>诸如<code>list_to_binary</code>和<code>iolist_to_binary</code>的BIF,不需要扁平化</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; list_to_binary([<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]],<span class="number">5</span>]).</span><br><span class="line">&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果我们知道列表深度只有一层,要用append代替flatten</p></li></ol><h3 id="flatten-2"><a href="#flatten-2" class="headerlink" title="flatten/2"></a>flatten/2</h3><blockquote><p>flatten(DeepList, Tail) -&gt; List.</p></blockquote><p>就是上面flatten/1调用的子函数,flatten(DeepList) 就是flatten(DeepList, []).<br>函数在DeepList扁平化后append了一下Tail.<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span>&gt; lists:flatten([<span class="number">1</span>,[<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],<span class="number">2</span>]],[<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>]]]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>]]]</span><br></pre></td></tr></table></figure></p><h3 id="flatmap-2"><a href="#flatmap-2" class="headerlink" title="flatmap/2"></a>flatmap/2</h3><blockquote><p>flatmap(Func, List1) -&gt; List2</p></blockquote><p>官方的说法是</p><blockquote><p>That is, flatmap behaves as if it had been defined as follows:<br>flatmap(Fun, List1) -&gt;<br>    append(map(Fun, List1)).</p></blockquote><p>就是List1中每个元素执行Fun,一般Fun返回一个列表,最后将这些列表append一下.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">26</span>&gt; lists:flatmap(<span class="keyword">fun</span>(X) -&gt; [X, X+<span class="number">1</span>] <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> flatmap<span class="params">(Fun, List1)</span> -&gt; List2 when</span><br><span class="line">      Fun :: fun<span class="params">((A)</span> -&gt; [B]),</span><br><span class="line">      List1 :: [A],</span><br><span class="line">      List2 :: [B],</span><br><span class="line">      A :: term<span class="params">()</span>,</span><br><span class="line">      B :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">flatmap</span><span class="params">(F, [Hd|Tail])</span> -&gt;</span></span><br><span class="line">    F(Hd) ++ flatmap(F, Tail);</span><br><span class="line"><span class="function"><span class="title">flatmap</span><span class="params">(F, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(F, <span class="number">1</span>)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="foldl-3"><a href="#foldl-3" class="headerlink" title="foldl/3"></a>foldl/3</h3><blockquote><p>foldl(Fun, Acc0, List) -&gt; Acc1</p></blockquote><p>这个函数用的非常多,Fun是一个可接受2个参数的函数,例如fun(X, Sum) -&gt; X + Sum end.那么List中的第一个元素带入X,然后Acc0带入Sum,执行得结果Acc1,然后将List中第二个元素带入X,将Acc1带入Sum,以此类推,每回fun的第二个参数是上把的结果,第一个元素是List中的元素.下面例子是一个累加函数<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span>&gt; lists:foldl(<span class="keyword">fun</span>(X, Sum) -&gt; X + Sum <span class="keyword">end</span>, <span class="number">0</span>, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]).</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> foldl<span class="params">(Fun, Acc0, List)</span> -&gt; Acc1 when</span><br><span class="line">      Fun :: fun<span class="params">((Elem :: T, AccIn)</span> -&gt; AccOut),</span><br><span class="line">      Acc0 :: term<span class="params">()</span>,</span><br><span class="line">      Acc1 :: term<span class="params">()</span>,</span><br><span class="line">      AccIn :: term<span class="params">()</span>,</span><br><span class="line">      AccOut :: term<span class="params">()</span>,</span><br><span class="line">      List :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foldl</span><span class="params">(F, Accu, [Hd|Tail])</span> -&gt;</span></span><br><span class="line">    foldl(F, F(Hd, Accu), Tail);</span><br><span class="line"><span class="function"><span class="title">foldl</span><span class="params">(F, Accu, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(F, <span class="number">2</span>)</span> -&gt;</span> Accu.</span><br></pre></td></tr></table></figure></p><p>上面可以看到foldl的第二个参数就是F(Hd, Accu)的返回结果.</p><h3 id="foldr-3"><a href="#foldr-3" class="headerlink" title="foldr/3"></a>foldr/3</h3><p>不说了,跟上面一样,只不过是从右边开始带入.</p><h3 id="map-2"><a href="#map-2" class="headerlink" title="map/2"></a>map/2</h3><blockquote><p>map(Fun, List1) -&gt; List2</p></blockquote><p>返回List1中每个元素执行Fun后的结果列表,官方doc上说执行顺序是运行时决定,这个和下面说的foreach不一样.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">34</span>&gt; lists:map(<span class="keyword">fun</span>(X) -&gt; X*<span class="number">2</span> <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).            </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">map</span><span class="params">(F, [H|T])</span> -&gt;</span></span><br><span class="line">    [F(H)|map(F, T)];</span><br><span class="line"><span class="function"><span class="title">map</span><span class="params">(F, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(F, <span class="number">1</span>)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="foreach-2"><a href="#foreach-2" class="headerlink" title="foreach/2"></a>foreach/2</h3><blockquote><p>foreach(Fun, List1) -&gt; ok.</p></blockquote><p>该函数和map很像,区别就是foreach只执行Fun函数却不保存结果,最后返回ok.<br>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(F, [Hd|Tail])</span> -&gt;</span></span><br><span class="line">    F(Hd),</span><br><span class="line">    foreach(F, Tail);</span><br><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(F, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(F, <span class="number">1</span>)</span> -&gt;</span> ok.</span><br></pre></td></tr></table></figure></p><p>这里和map不同的是foreach的递归在执行完前一个元素的Fun函数后才会继续执行一下个元素的Fun函数,这里的执行顺序就是列表的顺序,官方doc上说:<code>this function is used for its side effects</code><br>我不是很理解具体有什么用…</p><h3 id="keydelete-3"><a href="#keydelete-3" class="headerlink" title="keydelete/3"></a>keydelete/3</h3><blockquote><p>keydelete(Key, N, TupleList) -&gt; TupleList1</p></blockquote><p>主要用于由{}tuple 组成的列表,删除Tuplelist中第一个第N个位置的值等于Key的tuple,N是tuple中key应该匹配的位置.这个也经常用,比如一个地图中存了{PlayerId, name, str, magic…}之类的tuplelist,如果玩家离开地图,可以让Key为PlayerId,然后keydelete这个玩家的信息,因为PlayerId一般都是唯一的.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">37</span>&gt; lists:keydelete(<span class="number">2010211108</span>, <span class="number">1</span>, [&#123;<span class="number">2010211105</span>, sice, <span class="number">5</span>&#125;,&#123;<span class="number">2010211106</span>, sice, <span class="number">6</span>&#125;,&#123;<span class="number">2010211107</span>, sice, <span class="number">7</span>&#125;,&#123;<span class="number">2010211108</span>, <span class="number">8</span>&#125;]).</span><br><span class="line">[&#123;<span class="number">2010211105</span>,sice,<span class="number">5</span>&#125;,</span><br><span class="line"> &#123;<span class="number">2010211106</span>,sice,<span class="number">6</span>&#125;,</span><br><span class="line"> &#123;<span class="number">2010211107</span>,sice,<span class="number">7</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">keydelete</span><span class="params">(K, N, L)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(N)</span>, N &gt; 0 -&gt;</span></span><br><span class="line">    keydelete3(K, N, L).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">keydelete3</span><span class="params">(Key, N, [H|T])</span> <span class="title">when</span> <span class="title">element</span><span class="params">(N, H)</span> == K<span class="title">ey</span> -&gt;</span> T;</span><br><span class="line"><span class="function"><span class="title">keydelete3</span><span class="params">(Key, N, [H|T])</span> -&gt;</span></span><br><span class="line">    [H|keydelete3(Key, N, T)];</span><br><span class="line"><span class="function"><span class="title">keydelete3</span><span class="params">(_, _, [])</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="keyfind-3"><a href="#keyfind-3" class="headerlink" title="keyfind/3"></a>keyfind/3</h3><blockquote><p>keyfind(Key, N, TupleList) -&gt; Tuple | false</p></blockquote><p>大致同上,如字面意思,只不过不delete掉,没找到会返回false,不过这个是BIF,也就是说用c写的,在lists模块看不到实现方法,BIF的效率一般都很高.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">38</span>&gt; lists:keyfind(<span class="number">2010211108</span>, <span class="number">1</span>, [&#123;<span class="number">2010211105</span>, sice, <span class="number">5</span>&#125;,&#123;<span class="number">2010211106</span>, sice, <span class="number">6</span>&#125;,&#123;<span class="number">2010211107</span>, sice, <span class="number">7</span>&#125;]). </span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">39</span>&gt; lists:keyfind(<span class="number">2010211106</span>, <span class="number">1</span>, [&#123;<span class="number">2010211105</span>, sice, <span class="number">5</span>&#125;,&#123;<span class="number">2010211106</span>, sice, <span class="number">6</span>&#125;,&#123;<span class="number">2010211107</span>, sice, <span class="number">7</span>&#125;]).</span><br><span class="line">&#123;<span class="number">2010211106</span>,sice,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>BIF的源码可以把github上的<a href="https://github.com/erlang/otp" target="_blank" rel="noopener">erlang/otp</a>clone下来<br>然后在otp/erts/emulator/beam里面可以找到BIF的c代码,lists里面的BIF写在erl_bif_lists.c中<br>以下是keyfind的源码,以后的BIF代码就不贴了,感兴趣可以自己去找,不是那么好懂.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">keyfind(<span class="keyword">int</span> Bif, Process* p, Eterm Key, Eterm Pos, Eterm List)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> max_iter = <span class="number">10</span> * CONTEXT_REDS;</span><br><span class="line">    Sint pos;</span><br><span class="line">    Eterm term;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!is_small(Pos) || (pos = signed_val(Pos)) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">BIF_ERROR(p, BADARG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_small(Key)) &#123;</span><br><span class="line"><span class="keyword">double</span> float_key = (<span class="keyword">double</span>) signed_val(Key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (is_list(List)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--max_iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">BUMP_ALL_REDS(p);</span><br><span class="line">BIF_TRAP3(bif_export[Bif], p, Key, Pos, List);</span><br><span class="line">    &#125;</span><br><span class="line">    term = CAR(list_val(List));</span><br><span class="line">    List = CDR(list_val(List));</span><br><span class="line">    <span class="keyword">if</span> (is_tuple(term)) &#123;</span><br><span class="line">Eterm *tuple_ptr = tuple_val(term);</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= arityval(*tuple_ptr)) &#123;</span><br><span class="line">    Eterm element = tuple_ptr[pos];</span><br><span class="line">    <span class="keyword">if</span> (Key == element) &#123;</span><br><span class="line"><span class="keyword">return</span> term;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_float(element)) &#123;</span><br><span class="line">FloatDef f;</span><br><span class="line"></span><br><span class="line">GET_DOUBLE(element, f);</span><br><span class="line"><span class="keyword">if</span> (f.fd == float_key) &#123;</span><br><span class="line">    <span class="keyword">return</span> term;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_immed(Key)) &#123;</span><br><span class="line"><span class="keyword">while</span> (is_list(List)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--max_iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">BUMP_ALL_REDS(p);</span><br><span class="line">BIF_TRAP3(bif_export[Bif], p, Key, Pos, List);</span><br><span class="line">    &#125;</span><br><span class="line">    term = CAR(list_val(List));</span><br><span class="line">    List = CDR(list_val(List));</span><br><span class="line">    <span class="keyword">if</span> (is_tuple(term)) &#123;</span><br><span class="line">Eterm *tuple_ptr = tuple_val(term);</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= arityval(*tuple_ptr)) &#123;</span><br><span class="line">    Eterm element = tuple_ptr[pos];</span><br><span class="line">    <span class="keyword">if</span> (Key == element) &#123;</span><br><span class="line"><span class="keyword">return</span> term;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (is_list(List)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--max_iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">BUMP_ALL_REDS(p);</span><br><span class="line">BIF_TRAP3(bif_export[Bif], p, Key, Pos, List);</span><br><span class="line">    &#125;</span><br><span class="line">    term = CAR(list_val(List));</span><br><span class="line">    List = CDR(list_val(List));</span><br><span class="line">    <span class="keyword">if</span> (is_tuple(term)) &#123;</span><br><span class="line">Eterm *tuple_ptr = tuple_val(term);</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= arityval(*tuple_ptr)) &#123;</span><br><span class="line">    Eterm element = tuple_ptr[pos];</span><br><span class="line">    <span class="keyword">if</span> (CMP(Key, element) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> term;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_not_nil(List))  &#123;</span><br><span class="line">BIF_ERROR(p, BADARG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> am_false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哎,跟这c代码比,还是erlang看起来舒服,简单.</p><h3 id="keyserach-3"><a href="#keyserach-3" class="headerlink" title="keyserach/3"></a>keyserach/3</h3><blockquote><p>keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false</p></blockquote><p>与keyfind的功能相同,只不过返回值多了个value的标签,同样是BIF,lists.erl中没有源码,这个函数存在是为了向后兼容,keyfind用的更多些,但是keyfind是在R13B版本引入的,较老的版本用的是keysearch.</p><h3 id="keymember-3"><a href="#keymember-3" class="headerlink" title="keymember/3"></a>keymember/3</h3><blockquote><p>keymember(Key, N, Tuplelist) -&gt; boolean()</p></blockquote><p>功能和以上大致一样,也是BIF,只不过返回是true或false.</p><h3 id="keymap-3"><a href="#keymap-3" class="headerlink" title="keymap/3"></a>keymap/3</h3><blockquote><p>keymap(Fun, N, Tuplelist) -&gt; Tuplelist2</p></blockquote><p>用于将每个tuple的第N个元素替换为Fun(第N个元素)的执行结果.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40</span>&gt; lists:keymap(<span class="keyword">fun</span>(X) -&gt; atom_to_list(X) <span class="keyword">end</span>, <span class="number">2</span>, [&#123;<span class="number">1</span>, john, boy&#125;,&#123;<span class="number">2</span>, aya, girl&#125;, &#123;<span class="number">3</span>, cameron, robot&#125;]).</span><br><span class="line">[&#123;<span class="number">1</span>,<span class="string">"john"</span>,boy&#125;,&#123;<span class="number">2</span>,<span class="string">"aya"</span>,girl&#125;,&#123;<span class="number">3</span>,<span class="string">"cameron"</span>,robot&#125;]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">keymap</span><span class="params">(Fun, Index, [Tup|Tail])</span> -&gt;</span></span><br><span class="line">   [setelement(Index, Tup, Fun(element(Index, Tup)))|keymap(Fun, Index, Tail)];</span><br><span class="line"><span class="function"><span class="title">keymap</span><span class="params">(Fun, Index, [])</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Index)</span>, I<span class="title">ndex</span> &gt;= 1, </span></span><br><span class="line"><span class="function">                            <span class="title">is_function</span><span class="params">(Fun, <span class="number">1</span>)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><p>setelement从字面就可以看出是将Tup的 Index内容替换为Fun(element(Index, Tup)). 而,element就是返回Tup中第Index的值,这些东西都浓缩到一句代码实现,所以说erlang很有意思.</p><h3 id="keymerge-3"><a href="#keymerge-3" class="headerlink" title="keymerge/3"></a>keymerge/3</h3><blockquote><p>keymerge(N, TupleList1, TupleList2) -&gt; TupleList3</p></blockquote><p>将TupleList1和TupleList2合并并排序,其中N用来制定用Tuple中的第N元素为依据排序,注意,tuplelist1和tuplelist2在执行keymerge前需要是已经按N排好序,否则顺序可能不正确,如果tuplelist1有和tuplelist2中有第N元素相同的tuple,则Tuplelist1的在前面.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span>&gt; lists:keymerge(<span class="number">2</span>, [&#123;a,<span class="number">1</span>&#125;,&#123;c,<span class="number">3</span>&#125;],[&#123;b,<span class="number">2</span>&#125;,&#123;d,<span class="number">4</span>&#125;]).</span><br><span class="line">[&#123;a,<span class="number">1</span>&#125;,&#123;b,<span class="number">2</span>&#125;,&#123;c,<span class="number">3</span>&#125;,&#123;d,<span class="number">4</span>&#125;]</span><br><span class="line"><span class="comment">%顺序出错</span></span><br><span class="line"><span class="number">43</span>&gt; lists:keymerge(<span class="number">2</span>, [&#123;a,<span class="number">1</span>&#125;,&#123;c,<span class="number">3</span>&#125;],[&#123;d,<span class="number">4</span>&#125;,&#123;b,<span class="number">2</span>&#125;]).     </span><br><span class="line">[&#123;a,<span class="number">1</span>&#125;,&#123;c,<span class="number">3</span>&#125;,&#123;d,<span class="number">4</span>&#125;,&#123;b,<span class="number">2</span>&#125;]  </span><br><span class="line"><span class="comment">%tuplelist1的在前面</span></span><br><span class="line"><span class="number">44</span>&gt; lists:keymerge(<span class="number">2</span>, [&#123;a,<span class="number">1</span>&#125;,&#123;c,<span class="number">3</span>&#125;],[&#123;e,<span class="number">3</span>&#125;,&#123;d,<span class="number">4</span>&#125;]).</span><br><span class="line">[&#123;a,<span class="number">1</span>&#125;,&#123;c,<span class="number">3</span>&#125;,&#123;e,<span class="number">3</span>&#125;,&#123;d,<span class="number">4</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>源码不放了,这个比较复杂,太长了,感兴趣的自己去找吧.</p><h3 id="keyreplace-4"><a href="#keyreplace-4" class="headerlink" title="keyreplace/4"></a>keyreplace/4</h3><blockquote><p>keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2</p></blockquote><p>如字面意思,用于替换,将TupleList1中第N个值等于Key的tuple替换为NewTuple.只替换第一个.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">46</span>&gt; lists:keyreplace(name2, <span class="number">2</span>, [&#123;player1, name1, career1&#125;,&#123;player2, name2, career2&#125;,&#123;player3, name3, career3&#125;], &#123;player4, name4, career4&#125;).</span><br><span class="line">[&#123;player1,name1,career1&#125;,</span><br><span class="line"> &#123;player4,name4,career4&#125;,</span><br><span class="line"> &#123;player3,name3,career3&#125;]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">keyreplace</span><span class="params">(K, N, L, New)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(N)</span>, N &gt; 0, <span class="title">is_tuple</span><span class="params">(New)</span> -&gt;</span></span><br><span class="line">    keyreplace3(K, N, L, New).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">keyreplace3</span><span class="params">(Key, Pos, [Tup|Tail], New)</span> <span class="title">when</span> <span class="title">element</span><span class="params">(Pos, Tup)</span> == K<span class="title">ey</span> -&gt;</span></span><br><span class="line">    [New|Tail];</span><br><span class="line"><span class="function"><span class="title">keyreplace3</span><span class="params">(Key, Pos, [H|T], New)</span> -&gt;</span></span><br><span class="line">    [H|keyreplace3(Key, Pos, T, New)];</span><br><span class="line"><span class="function"><span class="title">keyreplace3</span><span class="params">(_, _, [], _)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="keysort-2"><a href="#keysort-2" class="headerlink" title="keysort/2"></a>keysort/2</h3><blockquote><p>keysort(N, TupleList1) -&gt; TupleList2.</p></blockquote><p>example:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">47</span>&gt; lists:keysort(<span class="number">1</span>,[&#123;<span class="number">3</span>,name3&#125;,&#123;<span class="number">2</span>, name2&#125;, &#123;<span class="number">4</span>,name4&#125;,&#123;<span class="number">1</span>,name1&#125;]).</span><br><span class="line">[&#123;<span class="number">1</span>,name1&#125;,&#123;<span class="number">2</span>,name2&#125;,&#123;<span class="number">3</span>,name3&#125;,&#123;<span class="number">4</span>,name4&#125;]</span><br></pre></td></tr></table></figure></p><p>源码不贴了,这个函数的源码很长.</p><h3 id="keystore-4"><a href="#keystore-4" class="headerlink" title="keystore/4"></a>keystore/4</h3><blockquote><p>keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2.</p></blockquote><p>功能和keyreplace差不多,只不过当TupleList1中没有与Key相同的Tuple时,keyreplace返回的是原来的TupleList,而keystore是将NewTuple append在原TupleList上.<br>例子;<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span>&gt; lists:keyreplace(name5, <span class="number">2</span>, [&#123;player1, name1, career1&#125;,&#123;player2, name2, career2&#125;,&#123;player3, name3, career3&#125;], &#123;player4, name4, career4&#125;).</span><br><span class="line">[&#123;player1,name1,career1&#125;,</span><br><span class="line"> &#123;player2,name2,career2&#125;,</span><br><span class="line"> &#123;player3,name3,career3&#125;]</span><br><span class="line"><span class="number">49</span>&gt; lists:keystore(name5, <span class="number">2</span>, [&#123;player1, name1, career1&#125;,&#123;player2, name2, career2&#125;,&#123;player3, name3, career3&#125;], &#123;player4, name4, career4&#125;).  </span><br><span class="line">[&#123;player1,name1,career1&#125;,</span><br><span class="line"> &#123;player2,name2,career2&#125;,</span><br><span class="line"> &#123;player3,name3,career3&#125;,</span><br><span class="line"> &#123;player4,name4,career4&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="keytake-3"><a href="#keytake-3" class="headerlink" title="keytake/3"></a>keytake/3</h3><blockquote><p>keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false</p></blockquote><p>与大多数key打头的函数相同,字面意思是从TupleList中拿出第N个值和Key相等的Tuple,如果有的话,返回{value, Tuple, TupleList2},Tuple是想的Tuple,TupleList2是去掉Tuple后的新的TupleList.如果没找到则返回false.<br>example:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span>&gt; lists:keytake(name2, <span class="number">2</span>, [&#123;player1, name1, career1&#125;,&#123;player2, name2, career2&#125;,&#123;player3, name3, career3&#125;]).                            </span><br><span class="line">&#123;value,&#123;player2,name2,career2&#125;,</span><br><span class="line">       [&#123;player1,name1,career1&#125;,&#123;player3,name3,career3&#125;]&#125;</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">keytake</span><span class="params">(Key, N, L)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(N)</span>, N &gt; 0 -&gt;</span></span><br><span class="line">    keytake(Key, N, L, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">keytake</span><span class="params">(Key, N, [H|T], L)</span> <span class="title">when</span> <span class="title">element</span><span class="params">(N, H)</span> == K<span class="title">ey</span> -&gt;</span></span><br><span class="line">    &#123;value, H, lists:reverse(L, T)&#125;;</span><br><span class="line"><span class="function"><span class="title">keytake</span><span class="params">(Key, N, [H|T], L)</span> -&gt;</span></span><br><span class="line">    keytake(Key, N, T, [H|L]);</span><br><span class="line"><span class="function"><span class="title">keytake</span><span class="params">(_K, _N, [], _L)</span> -&gt;</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure></p><h3 id="last-1"><a href="#last-1" class="headerlink" title="last/1"></a>last/1</h3><blockquote><p>last(List) -&gt; Last</p></blockquote><p>返回List中最后一个元素.<br>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">last</span><span class="params">([E|Es])</span> -&gt;</span> last(E, Es).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">last</span><span class="params">(_, [E|Es])</span> -&gt;</span> last(E, Es);</span><br><span class="line"><span class="function"><span class="title">last</span><span class="params">(E, [])</span> -&gt;</span> E.</span><br></pre></td></tr></table></figure></p><h3 id="mapfoldl-3"><a href="#mapfoldl-3" class="headerlink" title="mapfoldl/3"></a>mapfoldl/3</h3><blockquote><p>mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}.</p></blockquote><p>官方的解释就是同时具有map和foldl的功能.直白点就是map完成List1-&gt;List2的变化,foldl完成 Acc0 -&gt; Acc1的变化.<br>因为foldl只能返回一个由List1得到的记过Acc1,而不能多List1本身得到新的List2,而map不能得到Acc1,却能完成List1到List2的变化.所以mapfoldl完成了两者的功能.看源码会比较清晰的理解下.<br>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> mapfoldl<span class="params">(Fun, Acc0, List1)</span> -&gt; &#123;List2, Acc1&#125; when</span><br><span class="line">      Fun :: fun<span class="params">((A, AccIn)</span> -&gt; &#123;B, AccOut&#125;),</span><br><span class="line">      Acc0 :: term<span class="params">()</span>,</span><br><span class="line">      Acc1 :: term<span class="params">()</span>,</span><br><span class="line">      AccIn :: term<span class="params">()</span>,</span><br><span class="line">      AccOut :: term<span class="params">()</span>,</span><br><span class="line">      List1 :: [A],</span><br><span class="line">      List2 :: [B],</span><br><span class="line">      A :: term<span class="params">()</span>,</span><br><span class="line">      B :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mapfoldl</span><span class="params">(F, Accu0, [Hd|Tail])</span> -&gt;</span></span><br><span class="line">    &#123;R,Accu1&#125; = F(Hd, Accu0),</span><br><span class="line">    &#123;Rs,Accu2&#125; = mapfoldl(F, Accu1, Tail),</span><br><span class="line">    &#123;[R|Rs],Accu2&#125;;</span><br><span class="line"><span class="function"><span class="title">mapfoldl</span><span class="params">(F, Accu, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(F, <span class="number">2</span>)</span> -&gt;</span> &#123;[],Accu&#125;.</span><br></pre></td></tr></table></figure></p><p>注意,这里面的Fun返回的是{B, AccOut}的形式,而foldl的Fun是<code>Fun :: fun((Elem :: T, AccIn) -&gt; AccOut),</code>这里是最本质的区别.结合例子说下<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">52</span>&gt; lists:mapfoldl(<span class="keyword">fun</span>(X, Sum) -&gt; &#123;X*<span class="number">2</span>, X + Sum&#125; <span class="keyword">end</span>, <span class="number">0</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).</span><br><span class="line">&#123;[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>],<span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure></p><p>首先第一轮得到的{R, Accu1} = {2, 1},而{Rs, Accu2}需要递归执行mapfoldl,那么第二轮得到一个{R’,Accu1’} = {4, 3},我们每轮能确切知道的只有{R, Accu1},但是mapfoldl要返回的是{[R|Rs],Accu2},所以需要一直递归下去,那么第三轮得到{6, 6},第四轮{8, 10},第五轮得到{10, 15},这时{10, 15}仍然是{R, Accu1},但是接下来由于Tail变成了空列表[],根据模式匹配,这次执行的是第二个mapfoldl函数,那么相当于执行mapfoldl{F, 15, []),得到最底层的{Rs, Accu2} = {[], 15},那么返回的{[R|Rs], Accu2}为{[10|[]], 15}.一直往上递归回去,结果得到{[2,4,6,8,10], 15}.</p><h3 id="mapfoldr-3"><a href="#mapfoldr-3" class="headerlink" title="mapfoldr/3"></a>mapfoldr/3</h3><p>与上面的执行结果一样,只不过foldr是从右边开始,不影响List2的顺序.</p><h3 id="max-1"><a href="#max-1" class="headerlink" title="max/1"></a>max/1</h3><blockquote><p>max(List) -&gt; Max</p></blockquote><p>返回第一个这个List中的最大数.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">54</span>&gt; lists:max([a,b,c]).</span><br><span class="line">c</span><br><span class="line"><span class="number">55</span>&gt; lists:max([<span class="number">100</span>,b,c]).</span><br><span class="line">c</span><br><span class="line"><span class="number">56</span>&gt; lists:max([&#123;<span class="number">100</span>&#125;,b,c]).</span><br><span class="line">&#123;<span class="number">100</span>&#125;</span><br><span class="line"><span class="number">57</span>&gt; lists:max([&#123;<span class="number">100</span>&#125;,b,c,[<span class="number">90</span>]]).</span><br><span class="line"><span class="string">"Z"</span></span><br><span class="line"><span class="number">58</span>&gt; lists:max([&#123;<span class="number">100</span>&#125;,b,c,[<span class="number">2</span>]]). </span><br><span class="line">[<span class="number">2</span>]</span><br><span class="line"><span class="number">59</span>&gt; lists:max([&#123;<span class="number">100</span>&#125;,b,c,[<span class="number">2</span>],&lt;&lt;<span class="number">2</span>&gt;&gt;]).</span><br><span class="line">&lt;&lt;<span class="number">2</span>&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>这里注意下不同类型之间的比较顺序</p><blockquote><p>number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; binary</p></blockquote><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">max</span><span class="params">([H|T])</span> -&gt;</span> max(T, H).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">([H|T], Max)</span> <span class="title">when</span> H &gt; M<span class="title">ax</span> -&gt;</span> max(T, H);</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">([_|T], Max)</span>              -&gt;</span> max(T, Max);</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">([],    Max)</span>              -&gt;</span> Max.</span><br></pre></td></tr></table></figure></p><h3 id="member-2"><a href="#member-2" class="headerlink" title="member/2"></a>member/2</h3><blockquote><p>member(Elem, List) -&gt; boolean()</p></blockquote><p>如果Elem是List中的元素就返回true, 否则返回false.BIF.源码是C写的.不贴了.</p><h3 id="merge-1-2-3以及merge3-3"><a href="#merge-1-2-3以及merge3-3" class="headerlink" title="merge/1/2/3以及merge3/3"></a>merge/1/2/3以及merge3/3</h3><blockquote><p>merge(ListOfLists) -&gt; List1.<br>merge(List1, List2) -&gt; List3.<br>merge(Fun, List1, List2) -&gt; List3.<br>merge3(List1, List2, List3) -&gt; List4</p></blockquote><p>暂且叫归并排序吧,merge/1,merge/2完成的就是合并并排序,顺序由小到大,merge3/3只不过可以合并3个列表.merge/3可以依据Fun更改顺序,排序依据是Fun(A, B)如果返回true,那么就是A在B的前面.<br>举几个例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60</span>&gt; lists:merge([[<span class="number">1</span>],[<span class="number">4</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">3</span>]]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">61</span>&gt; lists:merge([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">3</span>]).      </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"><span class="number">62</span>&gt; lists:merge(<span class="keyword">fun</span>(A,B) -&gt; A &gt; B <span class="keyword">end</span>, [<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>]).</span><br><span class="line">[<span class="number">8</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="number">63</span>&gt; lists:merge(<span class="keyword">fun</span>(A,B) -&gt; A &lt; B <span class="keyword">end</span>, [<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>]).</span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="number">64</span>&gt; lists:merge(<span class="keyword">fun</span>(A,B) -&gt; A &lt; B <span class="keyword">end</span>, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="number">66</span>&gt; lists:merge3([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><p>所有的排序都要求每个子List在排序前都是排好序的,如63行,由于子列表没有排好序,所以排序结果不正确.<br>merge的源码比较多而且杂,感兴趣自己去lists.erl里面看.</p><h3 id="min-1"><a href="#min-1" class="headerlink" title="min/1"></a>min/1</h3><blockquote><p>min(List) -&gt; Min</p></blockquote><p>与max相反.</p><h3 id="nth-2"><a href="#nth-2" class="headerlink" title="nth/2"></a>nth/2</h3><blockquote><p>nth(N, List) -&gt; Elem</p></blockquote><p>返回第List的第N个元素.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">67</span>&gt; lists:nth(<span class="number">2</span>,[<span class="string">"haha"</span>,atom,<span class="number">2</span>,&lt;&lt;<span class="string">"binary"</span>&gt;&gt;]). </span><br><span class="line">atom</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">nth</span><span class="params">(<span class="number">1</span>, [H|_])</span> -&gt;</span> H;</span><br><span class="line"><span class="function"><span class="title">nth</span><span class="params">(N, [_|T])</span> <span class="title">when</span> N &gt; 1 -&gt;</span></span><br><span class="line">    nth(N - <span class="number">1</span>, T).</span><br></pre></td></tr></table></figure></p><h3 id="nthtail-2"><a href="#nthtail-2" class="headerlink" title="nthtail/2"></a>nthtail/2</h3><blockquote><p>nthtail(N, List) -&gt; Tail</p></blockquote><p>返回List的第N个尾列表.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">68</span>&gt; lists:nthtail(<span class="number">0</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">69</span>&gt; lists:nthtail(<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">70</span>&gt; lists:nthtail(<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">71</span>&gt; lists:nthtail(<span class="number">4</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">nthtail</span><span class="params">(<span class="number">1</span>, [_|T])</span> -&gt;</span> T;</span><br><span class="line"><span class="function"><span class="title">nthtail</span><span class="params">(N, [_|T])</span> <span class="title">when</span> N &gt; 1 -&gt;</span></span><br><span class="line">    nthtail(N - <span class="number">1</span>, T);</span><br><span class="line"><span class="function"><span class="title">nthtail</span><span class="params">(<span class="number">0</span>, L)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(L)</span> -&gt;</span> L.</span><br></pre></td></tr></table></figure></p><h3 id="partition-2"><a href="#partition-2" class="headerlink" title="partition/2"></a>partition/2</h3><blockquote><p>partition(Fun, List1) -&gt; {List1, List2}.</p></blockquote><p>字面意思是区分开,将List1依据Fun返回的true和false分为两个列表.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">73</span>&gt; lists:partition(<span class="keyword">fun</span>(X) -&gt; X&gt;<span class="number">2</span> <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">&#123;[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">partition</span><span class="params">(Pred, L)</span> -&gt;</span></span><br><span class="line">    partition(Pred, L, [], []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">partition</span><span class="params">(Pred, [H | T], As, Bs)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Pred(H) <span class="keyword">of</span></span><br><span class="line"><span class="literal">true</span> -&gt; partition(Pred, T, [H | As], Bs);</span><br><span class="line"><span class="literal">false</span> -&gt; partition(Pred, T, As, [H | Bs])</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">partition</span><span class="params">(Pred, [], As, Bs)</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span></span><br><span class="line">    &#123;reverse(As), reverse(Bs)&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="prefix-2"><a href="#prefix-2" class="headerlink" title="prefix/2"></a>prefix/2</h3><blockquote><p>prefix(List1, List2) -&gt; boolean().</p></blockquote><p>如果List1是List2的前缀则返回true,否则返回false<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">74</span>&gt; lists:prefix([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).                </span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">75</span>&gt; lists:prefix([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]).  </span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>源码很好理解:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">prefix</span><span class="params">([X|PreTail], [X|Tail])</span> -&gt;</span></span><br><span class="line">    prefix(PreTail, Tail);</span><br><span class="line"><span class="function"><span class="title">prefix</span><span class="params">([], List)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span> -&gt;</span> <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="title">prefix</span><span class="params">([_|_], List)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span> -&gt;</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure></p><p>如果第一元素都是X,则递归执行prefix,如果List1为[]了,那么返回true,如果遇到不相同的元素了就返回false.</p><h3 id="reverse-1-2"><a href="#reverse-1-2" class="headerlink" title="reverse/1/2"></a>reverse/1/2</h3><blockquote><p>reverse(List1) -&gt; List2.<br>reverse(List1, Tail) -&gt; List2.</p></blockquote><p>reverse/1返回的是逆序的List1. reverse/2返回的是逆序的List1并且append了Tail.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">76</span>&gt; lists:reverse([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="number">77</span>&gt; lists:reverse([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]).</span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> reverse<span class="params">(List1)</span> -&gt; List2 when</span><br><span class="line">      List1 :: [T],</span><br><span class="line">      List2 :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">([] = L)</span> -&gt;</span></span><br><span class="line">    L;</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">([_] = L)</span> -&gt;</span></span><br><span class="line">    L;</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">([A, B])</span> -&gt;</span></span><br><span class="line">    [B, A];</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">([A, B | L])</span> -&gt;</span></span><br><span class="line">    lists:reverse(L, [B, A]).</span><br></pre></td></tr></table></figure></p><p>注意这里比较神奇的是reverse/1调用的是reverse/2,我一直以为reverse/1是BIF,其实reverse/2才是BIF,而且reverse/2在各种merge函数中多次调用,调用reverse/2的次数非常多,估计所以才将reverse/2写成了BIF吧.</p><h3 id="seq-2-3"><a href="#seq-2-3" class="headerlink" title="seq/2/3"></a>seq/2/3</h3><blockquote><p>seq(From, To) -&gt; List1<br>seq(From, To, Incr) -&gt; List2</p></blockquote><p>用于生成From到To的列表,Incr是递增的值.这个函数通常只用于最简单的功能,但是还是需要注意一下,这个函数报错的条件比较苛刻.官方给的说明是在一下会发生error错误.</p><ol><li>To &lt; From - Incr 并且Incr是正数.</li><li>To &gt; From - Incr 并且Incr是负数.</li><li>Incr为0时,From 不等于 To<br>并且官方给出<blockquote><p>length(lists:seq(From, To)) == To-From+1<br>length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr</p></blockquote></li></ol><p>涵盖了上面3种情况,因为length不能是负数,其实只要看<strong><em>To-From+Incr与Incr相除</em></strong>是正数或者0就不会报错.<br>以下是一些例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">78</span>&gt; lists:seq(<span class="number">1</span>,<span class="number">4</span>).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">79</span>&gt; lists:seq(<span class="number">3</span>,<span class="number">1</span>).</span><br><span class="line">** exception error: no function clause matching lists:seq(<span class="number">3</span>,<span class="number">1</span>) (lists.erl, line <span class="number">177</span>)</span><br><span class="line"><span class="number">80</span>&gt; lists:seq(<span class="number">3</span>,<span class="number">1</span>,-<span class="number">1</span>).</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="number">81</span>&gt; lists:seq(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>). </span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br><span class="line"><span class="number">82</span>&gt; lists:seq(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">83</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>).</span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br><span class="line"><span class="number">84</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">4</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">85</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">5</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">86</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">3</span>).</span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br><span class="line"><span class="number">87</span>&gt; lists:seq(<span class="number">1</span>,<span class="number">4</span>).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">88</span>&gt; lists:seq(<span class="number">1</span>,<span class="number">0</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">89</span>&gt; lists:seq(<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>).</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line"><span class="number">90</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">4</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">91</span>&gt; lists:seq(<span class="number">10</span>,<span class="number">6</span>,<span class="number">3</span>).</span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br><span class="line"><span class="number">92</span>&gt; lists:seq(<span class="number">6</span>,<span class="number">8</span>,-<span class="number">3</span>).</span><br><span class="line">[]</span><br><span class="line"><span class="number">93</span>&gt; lists:seq(<span class="number">6</span>,<span class="number">10</span>,-<span class="number">3</span>).</span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br><span class="line"><span class="number">94</span>&gt; lists:seq(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).  </span><br><span class="line">** exception error: no <span class="literal">true</span> branch found <span class="keyword">when</span> evaluating an <span class="keyword">if</span> expression</span><br><span class="line">     in function  lists:seq/<span class="number">3</span> (lists.erl, line <span class="number">198</span>)</span><br></pre></td></tr></table></figure></p><h3 id="sort-1-2"><a href="#sort-1-2" class="headerlink" title="sort/1/2"></a>sort/1/2</h3><blockquote><p>sort(List1) -&gt; List2.<br>sort(Fun, List1) -&gt; List2</p></blockquote><p>排序函数,应熟记不同类型之间的大小顺序,如例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">95</span>&gt; Ref = make_ref().</span><br><span class="line">#Ref&lt;<span class="number">0.0</span>.<span class="number">0.358</span>&gt;</span><br><span class="line"><span class="number">96</span>&gt; Fun = <span class="keyword">fun</span>(X) -&gt; X <span class="keyword">end</span>.</span><br><span class="line">#Fun&lt;erl_eval.<span class="number">6.111823515</span>&gt;</span><br><span class="line"><span class="number">97</span>&gt; &#123;ok, Port&#125;=gen_tcp:listen(<span class="number">8011</span>,[]).</span><br><span class="line">&#123;ok,#Port&lt;<span class="number">0.619</span>&gt;&#125;</span><br><span class="line"><span class="number">98</span>&gt; Pid = spawn(lists, seq, [<span class="number">1</span>,<span class="number">100</span>]).</span><br><span class="line">&lt;<span class="number">0.151</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">99</span>&gt; lists:sort([&lt;&lt;<span class="number">2</span>&gt;&gt;,[<span class="number">3</span>],&#123;<span class="number">4</span>&#125;,Pid,Port,Fun,Ref,atom,<span class="number">5</span>]).</span><br><span class="line">[<span class="number">5</span>,atom,#Ref&lt;<span class="number">0.0</span>.<span class="number">0.358</span>&gt;,#Fun&lt;erl_eval.<span class="number">6.111823515</span>&gt;,</span><br><span class="line"> #Port&lt;<span class="number">0.619</span>&gt;,&lt;<span class="number">0.151</span>.<span class="number">0</span>&gt;,</span><br><span class="line"> &#123;<span class="number">4</span>&#125;,</span><br><span class="line"> [<span class="number">3</span>],</span><br><span class="line"> &lt;&lt;<span class="number">2</span>&gt;&gt;]</span><br></pre></td></tr></table></figure></p><p>我在max函数提到过这个顺序,上面的结果也是按照这个顺序来的</p><blockquote><p>number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; binary</p></blockquote><p>sort/2大致如merge/3,其中Fun可以用来改变默认的由小到大.</p><h3 id="split-2"><a href="#split-2" class="headerlink" title="split/2"></a>split/2</h3><blockquote><p>split(N, List1) -&gt; {List2, List3}</p></blockquote><p>分割函数,将List1分割成前N个元素List2,和剩下的元素List3<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>&gt; lists:split(<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]). </span><br><span class="line">&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> split<span class="params">(N, List1)</span> -&gt; &#123;List2, List3&#125; when</span><br><span class="line">      N :: non_neg_integer<span class="params">()</span>,</span><br><span class="line">      List1 :: [T],</span><br><span class="line">      List2 :: [T],</span><br><span class="line">      List3 :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">split</span><span class="params">(N, List)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(N)</span>, N &gt;= 0, <span class="title">is_list</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> split(N, List, []) <span class="keyword">of</span></span><br><span class="line">&#123;_, _&#125; = Result -&gt; Result;</span><br><span class="line">Fault <span class="keyword">when</span> is_atom(Fault) -&gt;</span><br><span class="line">    erlang:error(Fault, [N,List])</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">split</span><span class="params">(N, List)</span> -&gt;</span></span><br><span class="line">    erlang:error(badarg, [N,List]).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">split</span><span class="params">(<span class="number">0</span>, L, R)</span> -&gt;</span></span><br><span class="line">    &#123;lists:reverse(R, []), L&#125;;</span><br><span class="line"><span class="function"><span class="title">split</span><span class="params">(N, [H|T], R)</span> -&gt;</span></span><br><span class="line">    split(N-<span class="number">1</span>, T, [H|R]);</span><br><span class="line"><span class="function"><span class="title">split</span><span class="params">(_, [], _)</span> -&gt;</span></span><br><span class="line">    badarg.</span><br></pre></td></tr></table></figure></p><h3 id="splitwith-2"><a href="#splitwith-2" class="headerlink" title="splitwith/2"></a>splitwith/2</h3><p>splitwith(Fun, List) -&gt; {List1, List2}</p><p>Fun决定切割的规则,List1是在遇到Fun(X)为false之前的元素,List2是第一个Fun返回为false之后的列表.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">101</span>&gt; lists:splitwith(<span class="keyword">fun</span>(X) -&gt; is_atom(X) <span class="keyword">end</span>, [a,b,c,<span class="number">2</span>,d,e,<span class="number">4</span>]).</span><br><span class="line">&#123;[a,b,c],[<span class="number">2</span>,d,e,<span class="number">4</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> splitwith<span class="params">(Pred, List)</span> -&gt; &#123;List1, List2&#125; when</span><br><span class="line">      Pred :: fun<span class="params">((T)</span> -&gt; boolean<span class="params">()</span>),</span><br><span class="line">      List :: [T],</span><br><span class="line">      List1 :: [T],</span><br><span class="line">      List2 :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">splitwith</span><span class="params">(Pred, List)</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span></span><br><span class="line">    splitwith(Pred, List, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">splitwith</span><span class="params">(Pred, [Hd|Tail], Taken)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Pred(Hd) <span class="keyword">of</span></span><br><span class="line"><span class="literal">true</span> -&gt; splitwith(Pred, Tail, [Hd|Taken]);</span><br><span class="line"><span class="literal">false</span> -&gt; &#123;reverse(Taken), [Hd|Tail]&#125;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">splitwith</span><span class="params">(Pred, [], Taken)</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span></span><br><span class="line">    &#123;reverse(Taken),[]&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="sublist-2-3"><a href="#sublist-2-3" class="headerlink" title="sublist/2/3"></a>sublist/2/3</h3><blockquote><p>sublist(List1, Len) -&gt; List2<br>sublist(List1, Start, Len) -&gt; List2</p></blockquote><p>返回前List中前Len个元素,Len可以大于List的长度,这样整个List会返回.<br>Start可以决定起始位置.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102</span>&gt; lists:sublist([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>).                                </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">103</span>&gt; lists:sublist([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>,<span class="number">2</span>).</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">104</span>&gt; lists:sublist([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>).  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">105</span>&gt; lists:sublist([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>,<span class="number">1</span>).</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>源码<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sublist</span><span class="params">(List, L)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(L)</span>, <span class="title">is_list</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    sublist_2(List, L).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sublist_2</span><span class="params">([H|T], L)</span> <span class="title">when</span> L &gt; 0 -&gt;</span></span><br><span class="line">    [H|sublist_2(T, L-<span class="number">1</span>)];</span><br><span class="line"><span class="function"><span class="title">sublist_2</span><span class="params">(_, <span class="number">0</span>)</span> -&gt;</span></span><br><span class="line">    [];</span><br><span class="line"><span class="function"><span class="title">sublist_2</span><span class="params">(List, L)</span> <span class="title">when</span> <span class="title">is_list</span><span class="params">(List)</span>, L &gt; 0 -&gt;</span></span><br><span class="line">    [].</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sublist</span><span class="params">(List, S, L)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(L)</span>, L &gt;= 0 -&gt;</span></span><br><span class="line">    sublist(nthtail(S-<span class="number">1</span>, List), L).</span><br></pre></td></tr></table></figure></p><h3 id="subtract-2"><a href="#subtract-2" class="headerlink" title="subtract/2"></a>subtract/2</h3><blockquote><p>subtract(List1, List2) -&gt; List3</p></blockquote><p>规则是这样的:对于List2中的每一个元素,在List1第一个与这个元素相等的元素被删掉,而成为List3.<br>例如:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">107</span>&gt; lists:subtract([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]). </span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> subtract<span class="params">(List1, List2)</span> -&gt; List3 when</span><br><span class="line">      List1 :: [T],</span><br><span class="line">      List2 :: [T],</span><br><span class="line">      List3 :: [T],</span><br><span class="line">      T :: term<span class="params">()</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">(L1, L2)</span> -&gt;</span> L1 -- L2.</span><br></pre></td></tr></table></figure></p><p>很明显这个函数在最坏情况下,有length(List1)*length(List2)的复杂度,代价很高.官方给的建议是</p><blockquote><p>Using ordered lists and ordsets:subtract/2 is a much better choice if both lists are long.</p></blockquote><p>使用ordset中的subtract/2,前提是这两个List是排好序的.<br>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> subtract<span class="params">(Ordset1, Ordset2)</span> -&gt; Ordset3 when</span><br><span class="line">      Ordset1 :: ordset<span class="params">(_)</span>,</span><br><span class="line">      Ordset2 :: ordset<span class="params">(_)</span>,</span><br><span class="line">      Ordset3 :: ordset<span class="params">(_)</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">([E1|Es1], [E2|_]=Set2)</span> <span class="title">when</span> E1 &lt; E2 -&gt;</span></span><br><span class="line">    [E1|subtract(Es1, Set2)];</span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">([E1|_]=Set1, [E2|Es2])</span> <span class="title">when</span> E1 &gt; E2 -&gt;</span></span><br><span class="line">    subtract(Set1, Es2);</span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">([_E1|Es1], [_E2|Es2])</span> -&gt;</span><span class="comment">%E1 == E2</span></span><br><span class="line">    subtract(Es1, Es2);</span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">([], _)</span> -&gt;</span> [];</span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">(Es1, [])</span> -&gt;</span> Es1.</span><br></pre></td></tr></table></figure></p><h3 id="suffix-2"><a href="#suffix-2" class="headerlink" title="suffix/2"></a>suffix/2</h3><blockquote><p>suffix(List1, List2) -&gt; boolean().</p></blockquote><p>如同prefix,如果List1是List2的后缀则返回true,否则返回false.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">108</span>&gt; lists:suffix([<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]).                             </span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">suffix</span><span class="params">(Suffix, List)</span> -&gt;</span></span><br><span class="line">    Delta = length(List) - length(Suffix),</span><br><span class="line">    Delta &gt;= <span class="number">0</span> <span class="keyword">andalso</span> nthtail(Delta, List) =:= Suffix.</span><br></pre></td></tr></table></figure></p><h3 id="sum-1"><a href="#sum-1" class="headerlink" title="sum/1"></a>sum/1</h3><blockquote><p>sum(List) -&gt; Sum</p></blockquote><p>得到一个List的和,注意List应为数字组成.否则抛错.<br>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(L)</span>          -&gt;</span> sum(L, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([H|T], Sum)</span> -&gt;</span> sum(T, Sum + H);</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([], Sum)</span>    -&gt;</span> Sum.</span><br></pre></td></tr></table></figure></p><h3 id="takewhile-2"><a href="#takewhile-2" class="headerlink" title="takewhile/2"></a>takewhile/2</h3><blockquote><p>takewhile(Pred, List1) -&gt; List2</p></blockquote><p>从List1中取出满足Pred为true的元素,直到遇到第一个false.也就是取出满足Pred的前缀.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">109</span>&gt; lists:takewhile(<span class="keyword">fun</span>(A) -&gt; A &lt; <span class="number">3</span> <span class="keyword">end</span>, [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]).</span><br><span class="line">[<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">takewhile</span><span class="params">(Pred, [Hd|Tail])</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Pred(Hd) <span class="keyword">of</span></span><br><span class="line"><span class="literal">true</span> -&gt; [Hd|takewhile(Pred, Tail)];</span><br><span class="line"><span class="literal">false</span> -&gt; []</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">takewhile</span><span class="params">(Pred, [])</span> <span class="title">when</span> <span class="title">is_function</span><span class="params">(Pred, <span class="number">1</span>)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h3 id="ukeymerge-3"><a href="#ukeymerge-3" class="headerlink" title="ukeymerge/3"></a>ukeymerge/3</h3><blockquote><p>ukeymerge(N, TupleList1, TupleList2) -&gt; TupleList3</p></blockquote><p>类似于keymerge,但是u的意思是unique的意思,就是当TupleList1和TupleList2中有相同key的Tuple时将会删掉TupleList2中的Tuple.而且要求TupleList1和TupleList2在执行函数前自己本身不含有相同key的Tuple,否则结果会只删除一个TupleLIst2中的Tuple.结果不如人意.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; lists:ukeymerge(<span class="number">2</span>,[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;],[&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]).</span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;]</span><br><span class="line"><span class="number">2</span>&gt; lists:keymerge(<span class="number">2</span>,[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;],[&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]). </span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;]</span><br><span class="line"><span class="number">3</span>&gt; lists:ukeymerge(<span class="number">2</span>,[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;],[&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">3</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]).</span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">3</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;]</span><br><span class="line"><span class="number">4</span>&gt; lists:ukeymerge(<span class="number">2</span>,[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;],[&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]).</span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">5</span>,<span class="number">50</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>可以看到keymerge和ukeymerge的差别,而且第3行是在TupleList2中有相同Key的Tuple,倒是结果中也有相同的key,这时因为只删除了第一个与TupleList1中相同的Tuple即{2, 20}.<br>源码不贴了,凡是根merge有关的,都复杂而且长..</p><h3 id="ukeysort-2"><a href="#ukeysort-2" class="headerlink" title="ukeysort/2"></a>ukeysort/2</h3><blockquote><p>ukeysort(N, TupleList1) -&gt; TupleList2</p></blockquote><p>与keysort差不多,同样u也是唯一的意思,只保留一个keyTuple,如以下例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>&gt; lists:ukeysort(<span class="number">2</span>, [&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">3</span>,<span class="number">30</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">20</span>&#125;]).         </span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">3</span>,<span class="number">30</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]</span><br><span class="line"><span class="number">6</span>&gt; lists:keysort(<span class="number">2</span>, [&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">3</span>,<span class="number">30</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">20</span>&#125;]). </span><br><span class="line">[&#123;<span class="number">1</span>,<span class="number">10</span>&#125;,&#123;<span class="number">2</span>,<span class="number">20</span>&#125;,&#123;<span class="number">5</span>,<span class="number">20</span>&#125;,&#123;<span class="number">3</span>,<span class="number">30</span>&#125;,&#123;<span class="number">4</span>,<span class="number">40</span>&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="umerge-1-2-3以及-umerge3-3"><a href="#umerge-1-2-3以及-umerge3-3" class="headerlink" title="umerge/1/2/3以及 umerge3/3"></a>umerge/1/2/3以及 umerge3/3</h3><p>参加merge,只不过只保留一个相同的key.</p><h3 id="uzip-1以及uzip3-1"><a href="#uzip-1以及uzip3-1" class="headerlink" title="uzip/1以及uzip3/1"></a>uzip/1以及uzip3/1</h3><blockquote><p>unzip(List1) -&gt; {List2, List3}<br>unzip3(List1) -&gt; {List2, List3, List4}</p></blockquote><p>用于分离TupleList中的每个Tuple的第一个元素进入List2,第二个元素进入List3.unzip3适用于3-Tuple的情况.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>&gt; lists:unzip([&#123;<span class="number">10210221</span>, fubowen&#125;,&#123;<span class="number">10210222</span>, yuyouqi&#125;, &#123;<span class="number">10201223</span>, xuyue&#125;]).</span><br><span class="line">&#123;[<span class="number">10210221</span>,<span class="number">10210222</span>,<span class="number">10201223</span>],[fubowen,yuyouqi,xuyue]&#125;</span><br><span class="line"><span class="number">8</span>&gt; lists:unzip3([&#123;<span class="number">10210221</span>, fubowen, <span class="number">1</span>&#125;,&#123;<span class="number">10210222</span>, yuyouqi, <span class="number">1</span>&#125;, &#123;<span class="number">102101001</span>, aya, <span class="number">0</span>&#125;]).</span><br><span class="line">&#123;[<span class="number">10210221</span>,<span class="number">10210222</span>,<span class="number">102101001</span>],</span><br><span class="line"> [fubowen,yuyouqi,aya],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>源码:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">unzip</span><span class="params">(Ts)</span> -&gt;</span> unzip(Ts, [], []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">unzip</span><span class="params">([&#123;X, Y&#125; | Ts], Xs, Ys)</span> -&gt;</span> unzip(Ts, [X | Xs], [Y | Ys]);</span><br><span class="line"><span class="function"><span class="title">unzip</span><span class="params">([], Xs, Ys)</span> -&gt;</span> &#123;reverse(Xs), reverse(Ys)&#125;.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">unzip3</span><span class="params">(Ts)</span> -&gt;</span> unzip3(Ts, [], [], []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">unzip3</span><span class="params">([&#123;X, Y, Z&#125; | Ts], Xs, Ys, Zs)</span> -&gt;</span></span><br><span class="line">    unzip3(Ts, [X | Xs], [Y | Ys], [Z | Zs]);</span><br><span class="line"><span class="function"><span class="title">unzip3</span><span class="params">([], Xs, Ys, Zs)</span> -&gt;</span></span><br><span class="line">    &#123;reverse(Xs), reverse(Ys), reverse(Zs)&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="zip-2以及zip3-3"><a href="#zip-2以及zip3-3" class="headerlink" title="zip/2以及zip3/3"></a>zip/2以及zip3/3</h3><blockquote><p>zip(List1, List2) -&gt; List3<br>zip3(List1, List2, List3) -&gt; List4</p></blockquote><p>就是unzip的反过程.</p><h3 id="usort-1和usort-2"><a href="#usort-1和usort-2" class="headerlink" title="usort/1和usort/2"></a>usort/1和usort/2</h3><blockquote><p>usort(List1) -&gt; List2<br>usort(Fun, List1) -&gt; List2</p></blockquote><p>见sort,只不过只保留一个相同的值.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>&gt; lists:usort([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]).</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h3 id="zipwith-3以及zipwith3-4"><a href="#zipwith-3以及zipwith3-4" class="headerlink" title="zipwith/3以及zipwith3/4"></a>zipwith/3以及zipwith3/4</h3><blockquote><p>zipwith(Combine, List1, List2) -&gt; List3<br>zipwith3(Combine, List1, List2, List3) -&gt; List4</p></blockquote><p>功能大致同zip/2,zip3/3相同,只不过多了个Combine Function,这个Combine决定了如何合并.<br>例子:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>&gt; lists:zipwith(<span class="keyword">fun</span>(X,Y) -&gt; X+Y <span class="keyword">end</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><p>至此,lists模块的函数全都介绍完毕,啊,好累,休息会.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;个人感觉erlang里面lists模块用的地方非常多,因为erlang中没有for循环,很多函数功能多是靠lists的map,filter或者列表解析完成的,所以lists里面的函数非常重要&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="erlang" scheme="http://youthyblog.com/categories/erlang/"/>
    
    
      <category term="erlang" scheme="http://youthyblog.com/tags/erlang/"/>
    
  </entry>
  
</feed>
